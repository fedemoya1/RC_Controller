
CR_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  080098b8  080098b8  000198b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eac  08009eac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009eac  08009eac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009eac  08009eac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  200001dc  0800a090  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  0800a090  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cd7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d2  00000000  00000000  00031edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  000354d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019716  00000000  00000000  00036510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013aa0  00000000  00000000  0004fc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933f6  00000000  00000000  000636c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6abc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000588c  00000000  00000000  000f6b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080098a0 	.word	0x080098a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080098a0 	.word	0x080098a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a96:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000ac2:	bf00      	nop
    __ASM volatile ("NOP");
 8000ac4:	bf00      	nop
    __ASM volatile ("NOP");
 8000ac6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e000      	b.n	8000ad6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000ad4:	2301      	movs	r3, #1
    }
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000edf0 	.word	0xe000edf0
 8000ae4:	e0001000 	.word	0xe0001000

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f000 feaa 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f82c 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 f998 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af8:	f000 f978 	bl	8000dec <MX_DMA_Init>
  MX_ADC1_Init();
 8000afc:	f000 f882 	bl	8000c04 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b00:	f000 f8fc 	bl	8000cfc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b04:	f000 f948 	bl	8000d98 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b08:	f000 f8ca 	bl	8000ca0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000b0c:	f7ff ffbc 	bl	8000a88 <DWT_Delay_Init>
  SH1106_Init();
 8000b10:	f000 fa8e 	bl	8001030 <SH1106_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <main+0x50>)
 8000b16:	f005 f8a3 	bl	8005c60 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, AD_RES_BUFFER, 2);
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	4907      	ldr	r1, [pc, #28]	; (8000b3c <main+0x54>)
 8000b1e:	4808      	ldr	r0, [pc, #32]	; (8000b40 <main+0x58>)
 8000b20:	f000 ffee 	bl	8001b00 <HAL_ADC_Start_DMA>
  SH1106_DrawString(buffer, "Hola Mundo", 0, 0);
 8000b24:	2300      	movs	r3, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <main+0x5c>)
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <main+0x60>)
 8000b2c:	f000 fbb6 	bl	800129c <SH1106_DrawString>
  SH1106_UpdateScreen(buffer);
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <main+0x60>)
 8000b32:	f000 facf 	bl	80010d4 <SH1106_UpdateScreen>
  //SH1106_UpdateScreen(buffer); // Actualizar la pantalla
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <main+0x4e>
 8000b38:	200006d0 	.word	0x200006d0
 8000b3c:	20000200 	.word	0x20000200
 8000b40:	20000608 	.word	0x20000608
 8000b44:	080098b8 	.word	0x080098b8
 8000b48:	20000208 	.word	0x20000208

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b56:	2228      	movs	r2, #40	; 0x28
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 f98a 	bl	8006e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fb46 	bl	8005234 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bae:	f000 fb97 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fdb2 	bl	8005738 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bda:	f000 fb81 	bl	80012e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bde:	2302      	movs	r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 ff32 	bl	8005a54 <HAL_RCCEx_PeriphCLKConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bf6:	f000 fb73 	bl	80012e0 <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3750      	adds	r7, #80	; 0x50
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c16:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <MX_ADC1_Init+0x98>)
 8000c18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c30:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c42:	4815      	ldr	r0, [pc, #84]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c44:	f000 fe84 	bl	8001950 <HAL_ADC_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c4e:	f000 fb47 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c52:	2306      	movs	r3, #6
 8000c54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c64:	f001 f83c 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 fb37 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000c72:	2307      	movs	r3, #7
 8000c74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_ADC1_Init+0x94>)
 8000c80:	f001 f82e 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c8a:	f000 fb29 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000608 	.word	0x20000608
 8000c9c:	40012400 	.word	0x40012400

08000ca0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000ca6:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <MX_I2C1_Init+0x54>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_I2C1_Init+0x58>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_I2C1_Init+0x50>)
 8000cde:	f001 ff83 	bl	8002be8 <HAL_I2C_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f000 fafa 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000067c 	.word	0x2000067c
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	000186a0 	.word	0x000186a0

08000cfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d22:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d30:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000d34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d42:	4814      	ldr	r0, [pc, #80]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d44:	f004 ff3c 	bl	8005bc0 <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d4e:	f000 fac7 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d60:	f005 f8d8 	bl	8005f14 <HAL_TIM_ConfigClockSource>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d6a:	f000 fab9 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_TIM2_Init+0x98>)
 8000d7c:	f005 faae 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d86:	f000 faab 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200006d0 	.word	0x200006d0

08000d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <MX_USART1_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000da4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	f005 faf4 	bl	80063bc <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f000 fa81 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000718 	.word	0x20000718
 8000de8:	40013800 	.word	0x40013800

08000dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_DMA_Init+0x38>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <MX_DMA_Init+0x38>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_DMA_Init+0x38>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	200b      	movs	r0, #11
 8000e10:	f001 fa37 	bl	8002282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e14:	200b      	movs	r0, #11
 8000e16:	f001 fa50 	bl	80022ba <HAL_NVIC_EnableIRQ>

}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a36      	ldr	r2, [pc, #216]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b34      	ldr	r3, [pc, #208]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a30      	ldr	r2, [pc, #192]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e5a:	f043 0320 	orr.w	r3, r3, #32
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0320 	and.w	r3, r3, #32
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a24      	ldr	r2, [pc, #144]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_GPIO_Init+0xf4>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea2:	481f      	ldr	r0, [pc, #124]	; (8000f20 <MX_GPIO_Init+0xf8>)
 8000ea4:	f001 fe56 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2106      	movs	r1, #6
 8000eac:	481d      	ldr	r0, [pc, #116]	; (8000f24 <MX_GPIO_Init+0xfc>)
 8000eae:	f001 fe51 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4815      	ldr	r0, [pc, #84]	; (8000f20 <MX_GPIO_Init+0xf8>)
 8000ecc:	f001 fcbe 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480f      	ldr	r0, [pc, #60]	; (8000f24 <MX_GPIO_Init+0xfc>)
 8000ee8:	f001 fcb0 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eec:	2302      	movs	r3, #2
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_GPIO_Init+0x100>)
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <MX_GPIO_Init+0x104>)
 8000f00:	f001 fca4 	bl	800284c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2007      	movs	r0, #7
 8000f0a:	f001 f9ba 	bl	8002282 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f001 f9d3 	bl	80022ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40010800 	.word	0x40010800
 8000f28:	10110000 	.word	0x10110000
 8000f2c:	40010c00 	.word	0x40010c00

08000f30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000f3a:	f000 fcdb 	bl	80018f4 <HAL_GetTick>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f42:	6013      	str	r3, [r2, #0]
	  if (GPIO_Pin == GPIO_PIN_1 && (currentMillis - previousMillis < 1))
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d10d      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0x36>
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d107      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0x36>
	  {
	    //counterInside++; //For testing only
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000f56:	2102      	movs	r1, #2
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f5a:	f001 fe13 	bl	8002b84 <HAL_GPIO_TogglePin>
	    previousMillis = currentMillis;
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f64:	6013      	str	r3, [r2, #0]
	  }
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);  // Cambia el estado del LED
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001fc 	.word	0x200001fc
 8000f74:	200001f8 	.word	0x200001f8
 8000f78:	40010800 	.word	0x40010800

08000f7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d111      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x36>
		//Led: indica que el sistema está en operación :)
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f94:	f001 fdf6 	bl	8002b84 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f9c:	f001 fdf2 	bl	8002b84 <HAL_GPIO_TogglePin>
		/*SH1106_UpdateScreen(buffer);*/
		SH1106_DrawString(buffer, "Hola Mundo", 3, 0);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fa6:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fa8:	f000 f978 	bl	800129c <SH1106_DrawString>
		SH1106_UpdateScreen(buffer); // Actualizar la pantalla
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fae:	f000 f891 	bl	80010d4 <SH1106_UpdateScreen>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	080098b8 	.word	0x080098b8
 8000fc8:	20000208 	.word	0x20000208

08000fcc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = (AD_RES_BUFFER[0] << 4);
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	6353      	str	r3, [r2, #52]	; 0x34
    TIM2->CCR2 = (AD_RES_BUFFER[1] << 4);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000200 	.word	0x20000200

08000ffc <SH1106_WriteCommand>:

void SH1106_WriteCommand(uint8_t command) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af02      	add	r7, sp, #8
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2] = {0x00, command}; // 0x00 para indicar que es un comando
 8001006:	2300      	movs	r3, #0
 8001008:	733b      	strb	r3, [r7, #12]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, SH1106_I2C_ADDR << 1, data, 2, HAL_MAX_DELAY);
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2302      	movs	r3, #2
 800101a:	2178      	movs	r1, #120	; 0x78
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <SH1106_WriteCommand+0x30>)
 800101e:	f001 ff3b 	bl	8002e98 <HAL_I2C_Master_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000067c 	.word	0x2000067c

08001030 <SH1106_Init>:

void SH1106_Init(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
    HAL_Delay(100); // Espera por estabilidad de energía
 8001034:	2064      	movs	r0, #100	; 0x64
 8001036:	f000 fc67 	bl	8001908 <HAL_Delay>

    // Secuencia de inicialización para SH1106
    SH1106_WriteCommand(0xAE); // Display OFF (sleep mode)
 800103a:	20ae      	movs	r0, #174	; 0xae
 800103c:	f7ff ffde 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xD5); // Set display clock divide ratio/oscillator frequency
 8001040:	20d5      	movs	r0, #213	; 0xd5
 8001042:	f7ff ffdb 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x80); // Set divide ratio
 8001046:	2080      	movs	r0, #128	; 0x80
 8001048:	f7ff ffd8 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xA8); // Set multiplex ratio
 800104c:	20a8      	movs	r0, #168	; 0xa8
 800104e:	f7ff ffd5 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x3F); // 1/64 duty
 8001052:	203f      	movs	r0, #63	; 0x3f
 8001054:	f7ff ffd2 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xD3); // Set display offset
 8001058:	20d3      	movs	r0, #211	; 0xd3
 800105a:	f7ff ffcf 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x00); // No offset
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff ffcc 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x40); // Set start line address
 8001064:	2040      	movs	r0, #64	; 0x40
 8001066:	f7ff ffc9 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x8D); // Charge pump
 800106a:	208d      	movs	r0, #141	; 0x8d
 800106c:	f7ff ffc6 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x14); // Enable charge pump
 8001070:	2014      	movs	r0, #20
 8001072:	f7ff ffc3 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x20); // Memory addressing mode
 8001076:	2020      	movs	r0, #32
 8001078:	f7ff ffc0 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x00); // Horizontal addressing mode
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff ffbd 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xA1); // Set segment re-map
 8001082:	20a1      	movs	r0, #161	; 0xa1
 8001084:	f7ff ffba 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xC8); // COM output scan direction
 8001088:	20c8      	movs	r0, #200	; 0xc8
 800108a:	f7ff ffb7 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xDA); // Set COM pins hardware configuration
 800108e:	20da      	movs	r0, #218	; 0xda
 8001090:	f7ff ffb4 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x12);
 8001094:	2012      	movs	r0, #18
 8001096:	f7ff ffb1 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x81); // Contrast control
 800109a:	2081      	movs	r0, #129	; 0x81
 800109c:	f7ff ffae 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x7F);
 80010a0:	207f      	movs	r0, #127	; 0x7f
 80010a2:	f7ff ffab 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xD9); // Set pre-charge period
 80010a6:	20d9      	movs	r0, #217	; 0xd9
 80010a8:	f7ff ffa8 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xF1);
 80010ac:	20f1      	movs	r0, #241	; 0xf1
 80010ae:	f7ff ffa5 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xDB); // Set Vcomh deselect level
 80010b2:	20db      	movs	r0, #219	; 0xdb
 80010b4:	f7ff ffa2 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0x40);
 80010b8:	2040      	movs	r0, #64	; 0x40
 80010ba:	f7ff ff9f 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xA4); // Entire display ON
 80010be:	20a4      	movs	r0, #164	; 0xa4
 80010c0:	f7ff ff9c 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xA6); // Set normal display
 80010c4:	20a6      	movs	r0, #166	; 0xa6
 80010c6:	f7ff ff99 	bl	8000ffc <SH1106_WriteCommand>
    SH1106_WriteCommand(0xAF); // Display ON
 80010ca:	20af      	movs	r0, #175	; 0xaf
 80010cc:	f7ff ff96 	bl	8000ffc <SH1106_WriteCommand>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(uint8_t* buffer) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af04      	add	r7, sp, #16
 80010da:	6078      	str	r0, [r7, #4]
    for (uint8_t page = 0; page < 8; page++) {
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e01f      	b.n	8001122 <SH1106_UpdateScreen+0x4e>
        SH1106_WriteCommand(0xB0 + page);    // Set page address
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	3b50      	subs	r3, #80	; 0x50
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff87 	bl	8000ffc <SH1106_WriteCommand>
        SH1106_WriteCommand(0x00);           // Set lower column address
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ff84 	bl	8000ffc <SH1106_WriteCommand>
        SH1106_WriteCommand(0x10);           // Set higher column address
 80010f4:	2010      	movs	r0, #16
 80010f6:	f7ff ff81 	bl	8000ffc <SH1106_WriteCommand>

        HAL_I2C_Mem_Write(&hi2c1, SH1106_I2C_ADDR << 1, 0x40, 1, &buffer[128 * page], 128, HAL_MAX_DELAY);
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	01db      	lsls	r3, r3, #7
 80010fe:	461a      	mov	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	9202      	str	r2, [sp, #8]
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	2240      	movs	r2, #64	; 0x40
 8001114:	2178      	movs	r1, #120	; 0x78
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <SH1106_UpdateScreen+0x60>)
 8001118:	f001 ffbc 	bl	8003094 <HAL_I2C_Mem_Write>
    for (uint8_t page = 0; page < 8; page++) {
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b07      	cmp	r3, #7
 8001126:	d9dc      	bls.n	80010e2 <SH1106_UpdateScreen+0xe>
    }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	2000067c 	.word	0x2000067c

08001138 <SH1106_DrawChar>:
            }
        }
    }
}*/

void SH1106_DrawChar(uint8_t* buffer, char c, uint8_t x, uint8_t y) {
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	4608      	mov	r0, r1
 8001142:	4611      	mov	r1, r2
 8001144:	461a      	mov	r2, r3
 8001146:	4603      	mov	r3, r0
 8001148:	70fb      	strb	r3, [r7, #3]
 800114a:	460b      	mov	r3, r1
 800114c:	70bb      	strb	r3, [r7, #2]
 800114e:	4613      	mov	r3, r2
 8001150:	707b      	strb	r3, [r7, #1]
    const uint8_t width = 5;
 8001152:	2305      	movs	r3, #5
 8001154:	737b      	strb	r3, [r7, #13]
    const uint8_t height = 7;
 8001156:	2307      	movs	r3, #7
 8001158:	733b      	strb	r3, [r7, #12]
    const uint8_t bytesPerChar = width;
 800115a:	7b7b      	ldrb	r3, [r7, #13]
 800115c:	72fb      	strb	r3, [r7, #11]

    if (c < 32 || c > 126) return; // Si el carácter no está en el rango soportado, no hacer nada
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b1f      	cmp	r3, #31
 8001162:	f240 8093 	bls.w	800128c <SH1106_DrawChar+0x154>
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	2b7e      	cmp	r3, #126	; 0x7e
 800116a:	f200 808f 	bhi.w	800128c <SH1106_DrawChar+0x154>

    uint8_t charIndex = c - 32; // Ajuste de índice en la tabla de fuentes
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	3b20      	subs	r3, #32
 8001172:	72bb      	strb	r3, [r7, #10]

    for (uint8_t i = 0; i < bytesPerChar; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e082      	b.n	8001280 <SH1106_DrawChar+0x148>
        uint8_t line = font5x7[charIndex * bytesPerChar + i];
 800117a:	7abb      	ldrb	r3, [r7, #10]
 800117c:	7afa      	ldrb	r2, [r7, #11]
 800117e:	fb03 f202 	mul.w	r2, r3, r2
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	4413      	add	r3, r2
 8001186:	4a44      	ldr	r2, [pc, #272]	; (8001298 <SH1106_DrawChar+0x160>)
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	727b      	strb	r3, [r7, #9]
        for (uint8_t j = 0; j < height; j++) {
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
 8001190:	e06f      	b.n	8001272 <SH1106_DrawChar+0x13a>
            if (line & (1 << j)) {
 8001192:	7a7a      	ldrb	r2, [r7, #9]
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	fa42 f303 	asr.w	r3, r2, r3
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d031      	beq.n	8001206 <SH1106_DrawChar+0xce>
                if ((x + i) < 128 && (y + j) < 64) { // Verificar los límites del buffer
 80011a2:	78ba      	ldrb	r2, [r7, #2]
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	4413      	add	r3, r2
 80011a8:	2b7f      	cmp	r3, #127	; 0x7f
 80011aa:	dc5f      	bgt.n	800126c <SH1106_DrawChar+0x134>
 80011ac:	787a      	ldrb	r2, [r7, #1]
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	4413      	add	r3, r2
 80011b2:	2b3f      	cmp	r3, #63	; 0x3f
 80011b4:	dc5a      	bgt.n	800126c <SH1106_DrawChar+0x134>
                    buffer[(x + i) + ((y + j) / 8) * 128] |= (1 << ((y + j) % 8));
 80011b6:	78ba      	ldrb	r2, [r7, #2]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	18d1      	adds	r1, r2, r3
 80011bc:	787a      	ldrb	r2, [r7, #1]
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	4413      	add	r3, r2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da00      	bge.n	80011c8 <SH1106_DrawChar+0x90>
 80011c6:	3307      	adds	r3, #7
 80011c8:	10db      	asrs	r3, r3, #3
 80011ca:	01da      	lsls	r2, r3, #7
 80011cc:	440a      	add	r2, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	440a      	add	r2, r1
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	b251      	sxtb	r1, r2
 80011d8:	7878      	ldrb	r0, [r7, #1]
 80011da:	7bba      	ldrb	r2, [r7, #14]
 80011dc:	4402      	add	r2, r0
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	f002 0207 	and.w	r2, r2, #7
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	b252      	sxtb	r2, r2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	b250      	sxtb	r0, r2
 80011f0:	78b9      	ldrb	r1, [r7, #2]
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	440a      	add	r2, r1
 80011f6:	01db      	lsls	r3, r3, #7
 80011f8:	4413      	add	r3, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	b2c2      	uxtb	r2, r0
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e032      	b.n	800126c <SH1106_DrawChar+0x134>
                }
            } else {
                if ((x + i) < 128 && (y + j) < 64) { // Verificar los límites del buffer
 8001206:	78ba      	ldrb	r2, [r7, #2]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4413      	add	r3, r2
 800120c:	2b7f      	cmp	r3, #127	; 0x7f
 800120e:	dc2d      	bgt.n	800126c <SH1106_DrawChar+0x134>
 8001210:	787a      	ldrb	r2, [r7, #1]
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	4413      	add	r3, r2
 8001216:	2b3f      	cmp	r3, #63	; 0x3f
 8001218:	dc28      	bgt.n	800126c <SH1106_DrawChar+0x134>
                    buffer[(x + i) + ((y + j) / 8) * 128] &= ~(1 << ((y + j) % 8));
 800121a:	78ba      	ldrb	r2, [r7, #2]
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	18d1      	adds	r1, r2, r3
 8001220:	787a      	ldrb	r2, [r7, #1]
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	4413      	add	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	da00      	bge.n	800122c <SH1106_DrawChar+0xf4>
 800122a:	3307      	adds	r3, #7
 800122c:	10db      	asrs	r3, r3, #3
 800122e:	01da      	lsls	r2, r3, #7
 8001230:	440a      	add	r2, r1
 8001232:	4611      	mov	r1, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	440a      	add	r2, r1
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	b251      	sxtb	r1, r2
 800123c:	7878      	ldrb	r0, [r7, #1]
 800123e:	7bba      	ldrb	r2, [r7, #14]
 8001240:	4402      	add	r2, r0
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f002 0207 	and.w	r2, r2, #7
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	b252      	sxtb	r2, r2
 8001250:	43d2      	mvns	r2, r2
 8001252:	b252      	sxtb	r2, r2
 8001254:	400a      	ands	r2, r1
 8001256:	b250      	sxtb	r0, r2
 8001258:	78b9      	ldrb	r1, [r7, #2]
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	440a      	add	r2, r1
 800125e:	01db      	lsls	r3, r3, #7
 8001260:	4413      	add	r3, r2
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	b2c2      	uxtb	r2, r0
 800126a:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < height; j++) {
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	3301      	adds	r3, #1
 8001270:	73bb      	strb	r3, [r7, #14]
 8001272:	7bba      	ldrb	r2, [r7, #14]
 8001274:	7b3b      	ldrb	r3, [r7, #12]
 8001276:	429a      	cmp	r2, r3
 8001278:	d38b      	bcc.n	8001192 <SH1106_DrawChar+0x5a>
    for (uint8_t i = 0; i < bytesPerChar; i++) {
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3301      	adds	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	7afb      	ldrb	r3, [r7, #11]
 8001284:	429a      	cmp	r2, r3
 8001286:	f4ff af78 	bcc.w	800117a <SH1106_DrawChar+0x42>
 800128a:	e000      	b.n	800128e <SH1106_DrawChar+0x156>
    if (c < 32 || c > 126) return; // Si el carácter no está en el rango soportado, no hacer nada
 800128c:	bf00      	nop
                }
            }
        }
    }
}
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	080098c4 	.word	0x080098c4

0800129c <SH1106_DrawString>:

void SH1106_DrawString(uint8_t* buffer, const char* str, uint8_t x, uint8_t y) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	4613      	mov	r3, r2
 80012b0:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 80012b2:	e00c      	b.n	80012ce <SH1106_DrawString+0x32>
        SH1106_DrawChar(buffer, *str, x, y);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	7819      	ldrb	r1, [r3, #0]
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f7ff ff3b 	bl	8001138 <SH1106_DrawChar>
        x += 6; // Avanzar 6 píxeles para el siguiente carácter (5 píxeles de ancho + 1 de espacio)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	3306      	adds	r3, #6
 80012c6:	71fb      	strb	r3, [r7, #7]
        str++;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
    while (*str) {
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ee      	bne.n	80012b4 <SH1106_DrawString+0x18>
    }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_MspInit+0x5c>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_MspInit+0x5c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6193      	str	r3, [r2, #24]
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_MspInit+0x5c>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x5c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_MspInit+0x5c>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	61d3      	str	r3, [r2, #28]
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x5c>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_MspInit+0x60>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_MspInit+0x60>)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a28      	ldr	r2, [pc, #160]	; (800140c <HAL_ADC_MspInit+0xbc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d149      	bne.n	8001404 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_ADC_MspInit+0xc0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_ADC_MspInit+0xc0>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_ADC_MspInit+0xc0>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <HAL_ADC_MspInit+0xc0>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_ADC_MspInit+0xc0>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <HAL_ADC_MspInit+0xc0>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a0:	23c0      	movs	r3, #192	; 0xc0
 80013a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a4:	2303      	movs	r3, #3
 80013a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4619      	mov	r1, r3
 80013ae:	4819      	ldr	r0, [pc, #100]	; (8001414 <HAL_ADC_MspInit+0xc4>)
 80013b0:	f001 fa4c 	bl	800284c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013b6:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_ADC_MspInit+0xcc>)
 80013b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013de:	2220      	movs	r2, #32
 80013e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013ea:	f000 ff81 	bl	80022f0 <HAL_DMA_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80013f4:	f7ff ff74 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 80013fc:	621a      	str	r2, [r3, #32]
 80013fe:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_ADC_MspInit+0xc8>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40012400 	.word	0x40012400
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800
 8001418:	20000638 	.word	0x20000638
 800141c:	40020008 	.word	0x40020008

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_I2C_MspInit+0x90>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d133      	bne.n	80014a8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <HAL_I2C_MspInit+0x94>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_I2C_MspInit+0x94>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_I2C_MspInit+0x94>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001458:	23c0      	movs	r3, #192	; 0xc0
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4813      	ldr	r0, [pc, #76]	; (80014b8 <HAL_I2C_MspInit+0x98>)
 800146c:	f001 f9ee 	bl	800284c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_I2C_MspInit+0x94>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_I2C_MspInit+0x94>)
 8001476:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147a:	61d3      	str	r3, [r2, #28]
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <HAL_I2C_MspInit+0x94>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	201f      	movs	r0, #31
 800148e:	f000 fef8 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001492:	201f      	movs	r0, #31
 8001494:	f000 ff11 	bl	80022ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2020      	movs	r0, #32
 800149e:	f000 fef0 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014a2:	2020      	movs	r0, #32
 80014a4:	f000 ff09 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40005400 	.word	0x40005400
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010c00 	.word	0x40010c00

080014bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d113      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <HAL_TIM_Base_MspInit+0x44>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_TIM_Base_MspInit+0x44>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	61d3      	str	r3, [r2, #28]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_TIM_Base_MspInit+0x44>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	201c      	movs	r0, #28
 80014ec:	f000 fec9 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f0:	201c      	movs	r0, #28
 80014f2:	f000 fee2 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <HAL_UART_MspInit+0x9c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d139      	bne.n	8001598 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_UART_MspInit+0xa0>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_UART_MspInit+0xa0>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0xa0>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0xa0>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0xa0>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_UART_MspInit+0xa0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001558:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <HAL_UART_MspInit+0xa4>)
 800156a:	f001 f96f 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0310 	add.w	r3, r7, #16
 8001580:	4619      	mov	r1, r3
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <HAL_UART_MspInit+0xa4>)
 8001584:	f001 f962 	bl	800284c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2025      	movs	r0, #37	; 0x25
 800158e:	f000 fe78 	bl	8002282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001592:	2025      	movs	r0, #37	; 0x25
 8001594:	f000 fe91 	bl	80022ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010800 	.word	0x40010800

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f2:	f000 f96d 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}

080015fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80015fe:	2002      	movs	r0, #2
 8001600:	f001 fada 	bl	8002bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA1_Channel1_IRQHandler+0x10>)
 800160e:	f000 ffdd 	bl	80025cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000638 	.word	0x20000638

0800161c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM2_IRQHandler+0x10>)
 8001622:	f004 fb6f 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200006d0 	.word	0x200006d0

08001630 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <I2C1_EV_IRQHandler+0x10>)
 8001636:	f001 fe27 	bl	8003288 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2000067c 	.word	0x2000067c

08001644 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <I2C1_ER_IRQHandler+0x10>)
 800164a:	f001 ff8e 	bl	800356a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000067c 	.word	0x2000067c

08001658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <USART1_IRQHandler+0x10>)
 800165e:	f004 fefd 	bl	800645c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000718 	.word	0x20000718

0800166c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return 1;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <_kill>:

int _kill(int pid, int sig)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001684:	f005 fbcc 	bl	8006e20 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	2216      	movs	r2, #22
 800168c:	601a      	str	r2, [r3, #0]
  return -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_exit>:

void _exit (int status)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016a2:	f04f 31ff 	mov.w	r1, #4294967295
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffe7 	bl	800167a <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ac:	e7fe      	b.n	80016ac <_exit+0x12>

080016ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e00a      	b.n	80016d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c0:	f3af 8000 	nop.w
 80016c4:	4601      	mov	r1, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	b2ca      	uxtb	r2, r1
 80016ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbf0      	blt.n	80016c0 <_read+0x12>
  }

  return len;
 80016de:	687b      	ldr	r3, [r7, #4]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e009      	b.n	800170e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	60ba      	str	r2, [r7, #8]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf1      	blt.n	80016fa <_write+0x12>
  }
  return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_close>:

int _close(int file)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <_isatty>:

int _isatty(int file)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f005 fb36 	bl	8006e20 <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20005000 	.word	0x20005000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	20000760 	.word	0x20000760
 80017e8:	20000778 	.word	0x20000778

080017ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff fff8 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001814:	4c09      	ldr	r4, [pc, #36]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f005 fb03 	bl	8006e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff f95f 	bl	8000ae8 <main>
  bx lr
 800182a:	4770      	bx	lr
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001834:	08009eb4 	.word	0x08009eb4
  ldr r2, =_sbss
 8001838:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800183c:	20000778 	.word	0x20000778

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_Init+0x28>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_Init+0x28>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 fd09 	bl	800226c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fd44 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fd21 	bl	80022d6 <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 fce9 	bl	8002282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_IncTick+0x1c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_IncTick+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_IncTick+0x20>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000764 	.word	0x20000764

080018f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_GetTick+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000764 	.word	0x20000764

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff fff0 	bl	80018f4 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffe0 	bl	80018f4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0be      	b.n	8001af0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d109      	bne.n	8001994 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fcde 	bl	8001350 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 faf5 	bl	8001f84 <ADC_ConversionStop_Disable>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 8099 	bne.w	8001ade <HAL_ADC_Init+0x18e>
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 8095 	bne.w	8001ade <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019bc:	f023 0302 	bic.w	r3, r3, #2
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7b1b      	ldrb	r3, [r3, #12]
 80019d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	4313      	orrs	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e8:	d003      	beq.n	80019f2 <HAL_ADC_Init+0xa2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <HAL_ADC_Init+0xa8>
 80019f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f6:	e000      	b.n	80019fa <HAL_ADC_Init+0xaa>
 80019f8:	2300      	movs	r3, #0
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7d1b      	ldrb	r3, [r3, #20]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d119      	bne.n	8001a3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7b1b      	ldrb	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	035a      	lsls	r2, r3, #13
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	e00b      	b.n	8001a3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_ADC_Init+0x1a8>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6c:	d003      	beq.n	8001a76 <HAL_ADC_Init+0x126>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d104      	bne.n	8001a80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	051b      	lsls	r3, r3, #20
 8001a7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_ADC_Init+0x1ac>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d10b      	bne.n	8001abc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001aba:	e018      	b.n	8001aee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f023 0312 	bic.w	r3, r3, #18
 8001ac4:	f043 0210 	orr.w	r2, r3, #16
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001adc:	e007      	b.n	8001aee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	f043 0210 	orr.w	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	ffe1f7fd 	.word	0xffe1f7fd
 8001afc:	ff1f0efe 	.word	0xff1f0efe

08001b00 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a64      	ldr	r2, [pc, #400]	; (8001ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d004      	beq.n	8001b24 <HAL_ADC_Start_DMA+0x24>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a63      	ldr	r2, [pc, #396]	; (8001cac <HAL_ADC_Start_DMA+0x1ac>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d106      	bne.n	8001b32 <HAL_ADC_Start_DMA+0x32>
 8001b24:	4b60      	ldr	r3, [pc, #384]	; (8001ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 80b3 	bne.w	8001c98 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADC_Start_DMA+0x40>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0ae      	b.n	8001c9e <HAL_ADC_Start_DMA+0x19e>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f9c1 	bl	8001ed0 <ADC_Enable>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f040 809a 	bne.w	8001c8e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <HAL_ADC_Start_DMA+0x1ac>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_Start_DMA+0x84>
 8001b78:	4b4b      	ldr	r3, [pc, #300]	; (8001ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d115      	bne.n	8001bb0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d026      	beq.n	8001bec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ba6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bae:	e01d      	b.n	8001bec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a39      	ldr	r2, [pc, #228]	; (8001ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_ADC_Start_DMA+0xd0>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a38      	ldr	r2, [pc, #224]	; (8001cac <HAL_ADC_Start_DMA+0x1ac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10d      	bne.n	8001bec <HAL_ADC_Start_DMA+0xec>
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	f023 0206 	bic.w	r2, r3, #6
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_ADC_Start_DMA+0x1b0>)
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_ADC_Start_DMA+0x1b4>)
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_ADC_Start_DMA+0x1b8>)
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0202 	mvn.w	r2, #2
 8001c34:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c44:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6a18      	ldr	r0, [r3, #32]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	334c      	adds	r3, #76	; 0x4c
 8001c50:	4619      	mov	r1, r3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f000 fba5 	bl	80023a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c68:	d108      	bne.n	8001c7c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c78:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c7a:	e00f      	b.n	8001c9c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c8a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001c8c:	e006      	b.n	8001c9c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001c96:	e001      	b.n	8001c9c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40012400 	.word	0x40012400
 8001cac:	40012800 	.word	0x40012800
 8001cb0:	08002007 	.word	0x08002007
 8001cb4:	08002083 	.word	0x08002083
 8001cb8:	0800209f 	.word	0x0800209f

08001cbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x20>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0dc      	b.n	8001eba <HAL_ADC_ConfigChannel+0x1da>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	d81c      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b05      	subs	r3, #5
 8001d22:	221f      	movs	r2, #31
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b05      	subs	r3, #5
 8001d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34
 8001d48:	e03c      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d81c      	bhi.n	8001d8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b23      	subs	r3, #35	; 0x23
 8001d64:	221f      	movs	r2, #31
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4019      	ands	r1, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b23      	subs	r3, #35	; 0x23
 8001d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
 8001d8a:	e01b      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b41      	subs	r3, #65	; 0x41
 8001d9e:	221f      	movs	r2, #31
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4019      	ands	r1, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b41      	subs	r3, #65	; 0x41
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	d91c      	bls.n	8001e06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68d9      	ldr	r1, [r3, #12]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b1e      	subs	r3, #30
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4019      	ands	r1, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	e019      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6919      	ldr	r1, [r3, #16]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6898      	ldr	r0, [r3, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d003      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e46:	2b11      	cmp	r3, #17
 8001e48:	d132      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d125      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d126      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d11a      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_ADC_ConfigChannel+0x1ec>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	0c9a      	lsrs	r2, r3, #18
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x1b2>
 8001e9e:	e007      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f043 0220 	orr.w	r2, r3, #32
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40012400 	.word	0x40012400
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d040      	beq.n	8001f70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <ADC_Enable+0xac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <ADC_Enable+0xb0>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f0c:	e002      	b.n	8001f14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f1a:	f7ff fceb 	bl	80018f4 <HAL_GetTick>
 8001f1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f20:	e01f      	b.n	8001f62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f22:	f7ff fce7 	bl	80018f4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d918      	bls.n	8001f62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d011      	beq.n	8001f62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f42:	f043 0210 	orr.w	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e007      	b.n	8001f72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d1d8      	bne.n	8001f22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	431bde83 	.word	0x431bde83

08001f84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d12e      	bne.n	8001ffc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fae:	f7ff fca1 	bl	80018f4 <HAL_GetTick>
 8001fb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fb4:	e01b      	b.n	8001fee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fb6:	f7ff fc9d 	bl	80018f4 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d914      	bls.n	8001fee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10d      	bne.n	8001fee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e007      	b.n	8001ffe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d0dc      	beq.n	8001fb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800201c:	2b00      	cmp	r3, #0
 800201e:	d127      	bne.n	8002070 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002036:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800203a:	d115      	bne.n	8002068 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d105      	bne.n	8002068 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7fe ffaf 	bl	8000fcc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800206e:	e004      	b.n	800207a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fe13 	bl	8001cbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fe02 	bl	8001cce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4906      	ldr	r1, [pc, #24]	; (800216c <__NVIC_EnableIRQ+0x34>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002238:	d301      	bcc.n	800223e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223a:	2301      	movs	r3, #1
 800223c:	e00f      	b.n	800225e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <SysTick_Config+0x40>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002246:	210f      	movs	r1, #15
 8002248:	f04f 30ff 	mov.w	r0, #4294967295
 800224c:	f7ff ff90 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <SysTick_Config+0x40>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <SysTick_Config+0x40>)
 8002258:	2207      	movs	r2, #7
 800225a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	e000e010 	.word	0xe000e010

0800226c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff ff2d 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002282:	b580      	push	{r7, lr}
 8002284:	b086      	sub	sp, #24
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002294:	f7ff ff42 	bl	800211c <__NVIC_GetPriorityGrouping>
 8002298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff90 	bl	80021c4 <NVIC_EncodePriority>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff5f 	bl	8002170 <__NVIC_SetPriority>
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff35 	bl	8002138 <__NVIC_EnableIRQ>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffa2 	bl	8002228 <SysTick_Config>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e043      	b.n	800238e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_DMA_Init+0xa8>)
 800230e:	4413      	add	r3, r2
 8002310:	4a22      	ldr	r2, [pc, #136]	; (800239c <HAL_DMA_Init+0xac>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1f      	ldr	r2, [pc, #124]	; (80023a0 <HAL_DMA_Init+0xb0>)
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800233a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800233e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	bffdfff8 	.word	0xbffdfff8
 800239c:	cccccccd 	.word	0xcccccccd
 80023a0:	40020000 	.word	0x40020000

080023a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Start_IT+0x20>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e04b      	b.n	800245c <HAL_DMA_Start_IT+0xb8>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d13a      	bne.n	800244e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f9f8 	bl	80027f2 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 020e 	orr.w	r2, r2, #14
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	e00f      	b.n	800243c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0204 	bic.w	r2, r2, #4
 800242a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 020a 	orr.w	r2, r2, #10
 800243a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e005      	b.n	800245a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d008      	beq.n	800248e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2204      	movs	r2, #4
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e020      	b.n	80024d0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 020e 	bic.w	r2, r2, #14
 800249c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	2101      	movs	r1, #1
 80024b8:	fa01 f202 	lsl.w	r2, r1, r2
 80024bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d005      	beq.n	8002500 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2204      	movs	r2, #4
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e051      	b.n	80025a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 020e 	bic.w	r2, r2, #14
 800250e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_DMA_Abort_IT+0xd4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d029      	beq.n	800257e <HAL_DMA_Abort_IT+0xa2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <HAL_DMA_Abort_IT+0xd8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d022      	beq.n	800257a <HAL_DMA_Abort_IT+0x9e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_DMA_Abort_IT+0xdc>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01a      	beq.n	8002574 <HAL_DMA_Abort_IT+0x98>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_DMA_Abort_IT+0xe0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d012      	beq.n	800256e <HAL_DMA_Abort_IT+0x92>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_DMA_Abort_IT+0xe4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00a      	beq.n	8002568 <HAL_DMA_Abort_IT+0x8c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_DMA_Abort_IT+0xe8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d102      	bne.n	8002562 <HAL_DMA_Abort_IT+0x86>
 800255c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002560:	e00e      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 8002562:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002566:	e00b      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 8002568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256c:	e008      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 800256e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002572:	e005      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 8002574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002578:	e002      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 800257a:	2310      	movs	r3, #16
 800257c:	e000      	b.n	8002580 <HAL_DMA_Abort_IT+0xa4>
 800257e:	2301      	movs	r3, #1
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_DMA_Abort_IT+0xec>)
 8002582:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
    } 
  }
  return status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40020008 	.word	0x40020008
 80025b4:	4002001c 	.word	0x4002001c
 80025b8:	40020030 	.word	0x40020030
 80025bc:	40020044 	.word	0x40020044
 80025c0:	40020058 	.word	0x40020058
 80025c4:	4002006c 	.word	0x4002006c
 80025c8:	40020000 	.word	0x40020000

080025cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d04f      	beq.n	8002694 <HAL_DMA_IRQHandler+0xc8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d04a      	beq.n	8002694 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0204 	bic.w	r2, r2, #4
 800261a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a66      	ldr	r2, [pc, #408]	; (80027bc <HAL_DMA_IRQHandler+0x1f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d029      	beq.n	800267a <HAL_DMA_IRQHandler+0xae>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a65      	ldr	r2, [pc, #404]	; (80027c0 <HAL_DMA_IRQHandler+0x1f4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d022      	beq.n	8002676 <HAL_DMA_IRQHandler+0xaa>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_DMA_IRQHandler+0x1f8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01a      	beq.n	8002670 <HAL_DMA_IRQHandler+0xa4>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a62      	ldr	r2, [pc, #392]	; (80027c8 <HAL_DMA_IRQHandler+0x1fc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d012      	beq.n	800266a <HAL_DMA_IRQHandler+0x9e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a60      	ldr	r2, [pc, #384]	; (80027cc <HAL_DMA_IRQHandler+0x200>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x98>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5f      	ldr	r2, [pc, #380]	; (80027d0 <HAL_DMA_IRQHandler+0x204>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d102      	bne.n	800265e <HAL_DMA_IRQHandler+0x92>
 8002658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800265c:	e00e      	b.n	800267c <HAL_DMA_IRQHandler+0xb0>
 800265e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002662:	e00b      	b.n	800267c <HAL_DMA_IRQHandler+0xb0>
 8002664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002668:	e008      	b.n	800267c <HAL_DMA_IRQHandler+0xb0>
 800266a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800266e:	e005      	b.n	800267c <HAL_DMA_IRQHandler+0xb0>
 8002670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002674:	e002      	b.n	800267c <HAL_DMA_IRQHandler+0xb0>
 8002676:	2340      	movs	r3, #64	; 0x40
 8002678:	e000      	b.n	800267c <HAL_DMA_IRQHandler+0xb0>
 800267a:	2304      	movs	r3, #4
 800267c:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <HAL_DMA_IRQHandler+0x208>)
 800267e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8094 	beq.w	80027b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002692:	e08e      	b.n	80027b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2202      	movs	r2, #2
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d056      	beq.n	8002752 <HAL_DMA_IRQHandler+0x186>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d051      	beq.n	8002752 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 020a 	bic.w	r2, r2, #10
 80026ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a38      	ldr	r2, [pc, #224]	; (80027bc <HAL_DMA_IRQHandler+0x1f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d029      	beq.n	8002732 <HAL_DMA_IRQHandler+0x166>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a37      	ldr	r2, [pc, #220]	; (80027c0 <HAL_DMA_IRQHandler+0x1f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d022      	beq.n	800272e <HAL_DMA_IRQHandler+0x162>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_DMA_IRQHandler+0x1f8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01a      	beq.n	8002728 <HAL_DMA_IRQHandler+0x15c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <HAL_DMA_IRQHandler+0x1fc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d012      	beq.n	8002722 <HAL_DMA_IRQHandler+0x156>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a32      	ldr	r2, [pc, #200]	; (80027cc <HAL_DMA_IRQHandler+0x200>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00a      	beq.n	800271c <HAL_DMA_IRQHandler+0x150>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <HAL_DMA_IRQHandler+0x204>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d102      	bne.n	8002716 <HAL_DMA_IRQHandler+0x14a>
 8002710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002714:	e00e      	b.n	8002734 <HAL_DMA_IRQHandler+0x168>
 8002716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800271a:	e00b      	b.n	8002734 <HAL_DMA_IRQHandler+0x168>
 800271c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002720:	e008      	b.n	8002734 <HAL_DMA_IRQHandler+0x168>
 8002722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002726:	e005      	b.n	8002734 <HAL_DMA_IRQHandler+0x168>
 8002728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800272c:	e002      	b.n	8002734 <HAL_DMA_IRQHandler+0x168>
 800272e:	2320      	movs	r3, #32
 8002730:	e000      	b.n	8002734 <HAL_DMA_IRQHandler+0x168>
 8002732:	2302      	movs	r3, #2
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <HAL_DMA_IRQHandler+0x208>)
 8002736:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d034      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002750:	e02f      	b.n	80027b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2208      	movs	r2, #8
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4013      	ands	r3, r2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x1e8>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 020e 	bic.w	r2, r2, #14
 800277a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	2101      	movs	r1, #1
 8002786:	fa01 f202 	lsl.w	r2, r1, r2
 800278a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
    }
  }
  return;
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
}
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40020008 	.word	0x40020008
 80027c0:	4002001c 	.word	0x4002001c
 80027c4:	40020030 	.word	0x40020030
 80027c8:	40020044 	.word	0x40020044
 80027cc:	40020058 	.word	0x40020058
 80027d0:	4002006c 	.word	0x4002006c
 80027d4:	40020000 	.word	0x40020000

080027d8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027e6:	b2db      	uxtb	r3, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f202 	lsl.w	r2, r1, r2
 800280e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b10      	cmp	r3, #16
 800281e:	d108      	bne.n	8002832 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002830:	e007      	b.n	8002842 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	60da      	str	r2, [r3, #12]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b08b      	sub	sp, #44	; 0x2c
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800285e:	e169      	b.n	8002b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002860:	2201      	movs	r2, #1
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	429a      	cmp	r2, r3
 800287a:	f040 8158 	bne.w	8002b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a9a      	ldr	r2, [pc, #616]	; (8002aec <HAL_GPIO_Init+0x2a0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d05e      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 8002888:	4a98      	ldr	r2, [pc, #608]	; (8002aec <HAL_GPIO_Init+0x2a0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d875      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 800288e:	4a98      	ldr	r2, [pc, #608]	; (8002af0 <HAL_GPIO_Init+0x2a4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d058      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 8002894:	4a96      	ldr	r2, [pc, #600]	; (8002af0 <HAL_GPIO_Init+0x2a4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d86f      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 800289a:	4a96      	ldr	r2, [pc, #600]	; (8002af4 <HAL_GPIO_Init+0x2a8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d052      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 80028a0:	4a94      	ldr	r2, [pc, #592]	; (8002af4 <HAL_GPIO_Init+0x2a8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d869      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028a6:	4a94      	ldr	r2, [pc, #592]	; (8002af8 <HAL_GPIO_Init+0x2ac>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d04c      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 80028ac:	4a92      	ldr	r2, [pc, #584]	; (8002af8 <HAL_GPIO_Init+0x2ac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d863      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028b2:	4a92      	ldr	r2, [pc, #584]	; (8002afc <HAL_GPIO_Init+0x2b0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d046      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
 80028b8:	4a90      	ldr	r2, [pc, #576]	; (8002afc <HAL_GPIO_Init+0x2b0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d85d      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028be:	2b12      	cmp	r3, #18
 80028c0:	d82a      	bhi.n	8002918 <HAL_GPIO_Init+0xcc>
 80028c2:	2b12      	cmp	r3, #18
 80028c4:	d859      	bhi.n	800297a <HAL_GPIO_Init+0x12e>
 80028c6:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <HAL_GPIO_Init+0x80>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	08002947 	.word	0x08002947
 80028d0:	08002921 	.word	0x08002921
 80028d4:	08002933 	.word	0x08002933
 80028d8:	08002975 	.word	0x08002975
 80028dc:	0800297b 	.word	0x0800297b
 80028e0:	0800297b 	.word	0x0800297b
 80028e4:	0800297b 	.word	0x0800297b
 80028e8:	0800297b 	.word	0x0800297b
 80028ec:	0800297b 	.word	0x0800297b
 80028f0:	0800297b 	.word	0x0800297b
 80028f4:	0800297b 	.word	0x0800297b
 80028f8:	0800297b 	.word	0x0800297b
 80028fc:	0800297b 	.word	0x0800297b
 8002900:	0800297b 	.word	0x0800297b
 8002904:	0800297b 	.word	0x0800297b
 8002908:	0800297b 	.word	0x0800297b
 800290c:	0800297b 	.word	0x0800297b
 8002910:	08002929 	.word	0x08002929
 8002914:	0800293d 	.word	0x0800293d
 8002918:	4a79      	ldr	r2, [pc, #484]	; (8002b00 <HAL_GPIO_Init+0x2b4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800291e:	e02c      	b.n	800297a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	623b      	str	r3, [r7, #32]
          break;
 8002926:	e029      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	3304      	adds	r3, #4
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e024      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	3308      	adds	r3, #8
 8002938:	623b      	str	r3, [r7, #32]
          break;
 800293a:	e01f      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	330c      	adds	r3, #12
 8002942:	623b      	str	r3, [r7, #32]
          break;
 8002944:	e01a      	b.n	800297c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800294e:	2304      	movs	r3, #4
 8002950:	623b      	str	r3, [r7, #32]
          break;
 8002952:	e013      	b.n	800297c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800295c:	2308      	movs	r3, #8
 800295e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	611a      	str	r2, [r3, #16]
          break;
 8002966:	e009      	b.n	800297c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002968:	2308      	movs	r3, #8
 800296a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	615a      	str	r2, [r3, #20]
          break;
 8002972:	e003      	b.n	800297c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002974:	2300      	movs	r3, #0
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x130>
          break;
 800297a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2bff      	cmp	r3, #255	; 0xff
 8002980:	d801      	bhi.n	8002986 <HAL_GPIO_Init+0x13a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	e001      	b.n	800298a <HAL_GPIO_Init+0x13e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2bff      	cmp	r3, #255	; 0xff
 8002990:	d802      	bhi.n	8002998 <HAL_GPIO_Init+0x14c>
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x152>
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3b08      	subs	r3, #8
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	210f      	movs	r1, #15
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	401a      	ands	r2, r3
 80029b0:	6a39      	ldr	r1, [r7, #32]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	fa01 f303 	lsl.w	r3, r1, r3
 80029b8:	431a      	orrs	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80b1 	beq.w	8002b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029cc:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <HAL_GPIO_Init+0x2b8>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4a4c      	ldr	r2, [pc, #304]	; (8002b04 <HAL_GPIO_Init+0x2b8>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6193      	str	r3, [r2, #24]
 80029d8:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_GPIO_Init+0x2b8>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029e4:	4a48      	ldr	r2, [pc, #288]	; (8002b08 <HAL_GPIO_Init+0x2bc>)
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a40      	ldr	r2, [pc, #256]	; (8002b0c <HAL_GPIO_Init+0x2c0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_GPIO_Init+0x1ec>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3f      	ldr	r2, [pc, #252]	; (8002b10 <HAL_GPIO_Init+0x2c4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00d      	beq.n	8002a34 <HAL_GPIO_Init+0x1e8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3e      	ldr	r2, [pc, #248]	; (8002b14 <HAL_GPIO_Init+0x2c8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <HAL_GPIO_Init+0x1e4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3d      	ldr	r2, [pc, #244]	; (8002b18 <HAL_GPIO_Init+0x2cc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_GPIO_Init+0x1e0>
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e006      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	e004      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e002      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_GPIO_Init+0x1ee>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	f002 0203 	and.w	r2, r2, #3
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	4093      	lsls	r3, r2
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a4a:	492f      	ldr	r1, [pc, #188]	; (8002b08 <HAL_GPIO_Init+0x2bc>)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	492c      	ldr	r1, [pc, #176]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
 8002a70:	e006      	b.n	8002a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	4928      	ldr	r1, [pc, #160]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	4922      	ldr	r1, [pc, #136]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	491e      	ldr	r1, [pc, #120]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d006      	beq.n	8002ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4918      	ldr	r1, [pc, #96]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	4914      	ldr	r1, [pc, #80]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d021      	beq.n	8002b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	490e      	ldr	r1, [pc, #56]	; (8002b1c <HAL_GPIO_Init+0x2d0>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]
 8002ae8:	e021      	b.n	8002b2e <HAL_GPIO_Init+0x2e2>
 8002aea:	bf00      	nop
 8002aec:	10320000 	.word	0x10320000
 8002af0:	10310000 	.word	0x10310000
 8002af4:	10220000 	.word	0x10220000
 8002af8:	10210000 	.word	0x10210000
 8002afc:	10120000 	.word	0x10120000
 8002b00:	10110000 	.word	0x10110000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	40010c00 	.word	0x40010c00
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40011400 	.word	0x40011400
 8002b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_GPIO_Init+0x304>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	4909      	ldr	r1, [pc, #36]	; (8002b50 <HAL_GPIO_Init+0x304>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	3301      	adds	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f47f ae8e 	bne.w	8002860 <HAL_GPIO_Init+0x14>
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	372c      	adds	r7, #44	; 0x2c
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b70:	e003      	b.n	8002b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43d9      	mvns	r1, r3
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe f9aa 	bl	8000f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40010400 	.word	0x40010400

08002be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e12b      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fc06 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f002 febc 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a81      	ldr	r2, [pc, #516]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d807      	bhi.n	8002c6c <HAL_I2C_Init+0x84>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a80      	ldr	r2, [pc, #512]	; (8002e60 <HAL_I2C_Init+0x278>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e006      	b.n	8002c7a <HAL_I2C_Init+0x92>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a7d      	ldr	r2, [pc, #500]	; (8002e64 <HAL_I2C_Init+0x27c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0e7      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a78      	ldr	r2, [pc, #480]	; (8002e68 <HAL_I2C_Init+0x280>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a6a      	ldr	r2, [pc, #424]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d802      	bhi.n	8002cbc <HAL_I2C_Init+0xd4>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	e009      	b.n	8002cd0 <HAL_I2C_Init+0xe8>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	4a69      	ldr	r2, [pc, #420]	; (8002e6c <HAL_I2C_Init+0x284>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	3301      	adds	r3, #1
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	495c      	ldr	r1, [pc, #368]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002cec:	428b      	cmp	r3, r1
 8002cee:	d819      	bhi.n	8002d24 <HAL_I2C_Init+0x13c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e59      	subs	r1, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfe:	1c59      	adds	r1, r3, #1
 8002d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d04:	400b      	ands	r3, r1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_I2C_Init+0x138>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e59      	subs	r1, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1e:	e051      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e04f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <HAL_I2C_Init+0x168>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e012      	b.n	8002d76 <HAL_I2C_Init+0x18e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Init+0x196>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e022      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10e      	bne.n	8002da4 <HAL_I2C_Init+0x1bc>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1e58      	subs	r0, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	440b      	add	r3, r1
 8002d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	0099      	lsls	r1, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	6809      	ldr	r1, [r1, #0]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6911      	ldr	r1, [r2, #16]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	000186a0 	.word	0x000186a0
 8002e60:	001e847f 	.word	0x001e847f
 8002e64:	003d08ff 	.word	0x003d08ff
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	10624dd3 	.word	0x10624dd3

08002e70 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d103      	bne.n	8002e8e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  }
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	817b      	strh	r3, [r7, #10]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7fe fd22 	bl	80018f4 <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	f040 80e0 	bne.w	8003080 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2319      	movs	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4970      	ldr	r1, [pc, #448]	; (800308c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f001 ff8e 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0d3      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_I2C_Master_Transmit+0x50>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0cc      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d007      	beq.n	8002f0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f50:	8979      	ldrh	r1, [r7, #10]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f001 fd88 	bl	8004a6c <I2C_MasterRequestWrite>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e08d      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f7c:	e066      	b.n	800304c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f002 f84c 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x188>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f002 f843 	bl	80050b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01a      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d194      	bne.n	8002f7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	00100002 	.word	0x00100002
 8003090:	ffff0000 	.word	0xffff0000

08003094 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	817b      	strh	r3, [r7, #10]
 80030a6:	460b      	mov	r3, r1
 80030a8:	813b      	strh	r3, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030ae:	f7fe fc21 	bl	80018f4 <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b20      	cmp	r3, #32
 80030be:	f040 80d9 	bne.w	8003274 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2319      	movs	r3, #25
 80030c8:	2201      	movs	r2, #1
 80030ca:	496d      	ldr	r1, [pc, #436]	; (8003280 <HAL_I2C_Mem_Write+0x1ec>)
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f001 fe8d 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030d8:	2302      	movs	r3, #2
 80030da:	e0cc      	b.n	8003276 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_Mem_Write+0x56>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e0c5      	b.n	8003276 <HAL_I2C_Mem_Write+0x1e2>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d007      	beq.n	8003110 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2221      	movs	r2, #33	; 0x21
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a3a      	ldr	r2, [r7, #32]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4a4d      	ldr	r2, [pc, #308]	; (8003284 <HAL_I2C_Mem_Write+0x1f0>)
 8003150:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003152:	88f8      	ldrh	r0, [r7, #6]
 8003154:	893a      	ldrh	r2, [r7, #8]
 8003156:	8979      	ldrh	r1, [r7, #10]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4603      	mov	r3, r0
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f001 fd04 	bl	8004b70 <I2C_RequestMemoryWrite>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d052      	beq.n	8003214 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e081      	b.n	8003276 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f001 ff52 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b04      	cmp	r3, #4
 8003188:	d107      	bne.n	800319a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003198:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06b      	b.n	8003276 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	781a      	ldrb	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d11b      	bne.n	8003214 <HAL_I2C_Mem_Write+0x180>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d017      	beq.n	8003214 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1aa      	bne.n	8003172 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f001 ff45 	bl	80050b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	2b04      	cmp	r3, #4
 8003232:	d107      	bne.n	8003244 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003242:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e016      	b.n	8003276 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	00100002 	.word	0x00100002
 8003284:	ffff0000 	.word	0xffff0000

08003288 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d003      	beq.n	80032c0 <HAL_I2C_EV_IRQHandler+0x38>
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	f040 80c1 	bne.w	8003442 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032e0:	d003      	beq.n	80032ea <HAL_I2C_EV_IRQHandler+0x62>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_EV_IRQHandler+0x66>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_I2C_EV_IRQHandler+0x68>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f000 8132 	beq.w	800355a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00c      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x92>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	0a5b      	lsrs	r3, r3, #9
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f001 ff77 	bl	8005200 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fd85 	bl	8003e22 <I2C_Master_SB>
 8003318:	e092      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	08db      	lsrs	r3, r3, #3
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0xb2>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	0a5b      	lsrs	r3, r3, #9
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fdfa 	bl	8003f2c <I2C_Master_ADD10>
 8003338:	e082      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_I2C_EV_IRQHandler+0xd2>
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	0a5b      	lsrs	r3, r3, #9
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fe13 	bl	8003f7e <I2C_Master_ADDR>
 8003358:	e072      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d03b      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	f000 80f3 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	09db      	lsrs	r3, r3, #7
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00f      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	0a9b      	lsrs	r3, r3, #10
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d009      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f9f1 	bl	8003784 <I2C_MasterTransmit_TXE>
 80033a2:	e04d      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80d6 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	0a5b      	lsrs	r3, r3, #9
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80cf 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033c0:	7bbb      	ldrb	r3, [r7, #14]
 80033c2:	2b21      	cmp	r3, #33	; 0x21
 80033c4:	d103      	bne.n	80033ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa78 	bl	80038bc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033cc:	e0c7      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	f040 80c4 	bne.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fae6 	bl	80039a8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033dc:	e0bf      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ec:	f000 80b7 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00f      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x194>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	0a9b      	lsrs	r3, r3, #10
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d009      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x194>
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb5f 	bl	8003ad8 <I2C_MasterReceive_RXNE>
 800341a:	e011      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	089b      	lsrs	r3, r3, #2
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 809a 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 8093 	beq.w	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fc08 	bl	8003c4e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343e:	e08e      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003440:	e08d      	b.n	800355e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	61fb      	str	r3, [r7, #28]
 8003452:	e007      	b.n	8003464 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d012      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x20e>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	0a5b      	lsrs	r3, r3, #9
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800348c:	69b9      	ldr	r1, [r7, #24]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 ffcc 	bl	800442c <I2C_Slave_ADDR>
 8003494:	e066      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f001 f806 	bl	80044c0 <I2C_Slave_STOPF>
 80034b4:	e056      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034b6:	7bbb      	ldrb	r3, [r7, #14]
 80034b8:	2b21      	cmp	r3, #33	; 0x21
 80034ba:	d002      	beq.n	80034c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2b29      	cmp	r3, #41	; 0x29
 80034c0:	d125      	bne.n	800350e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	09db      	lsrs	r3, r3, #7
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00f      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0x266>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	0a9b      	lsrs	r3, r3, #10
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0x266>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fee4 	bl	80042b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034ec:	e039      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d033      	beq.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	0a5b      	lsrs	r3, r3, #9
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d02d      	beq.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 ff11 	bl	800432e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350c:	e029      	b.n	8003562 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00f      	beq.n	800353a <HAL_I2C_EV_IRQHandler+0x2b2>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	0a9b      	lsrs	r3, r3, #10
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 ff1b 	bl	800436e <I2C_SlaveReceive_RXNE>
 8003538:	e014      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00e      	beq.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 ff49 	bl	80043ea <I2C_SlaveReceive_BTF>
 8003558:	e004      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003562:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b08a      	sub	sp, #40	; 0x28
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800358c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0x5e>
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d010      	beq.n	80035c8 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035b6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035c6:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	0a5b      	lsrs	r3, r3, #9
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00e      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0x88>
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f043 0302 	orr.w	r3, r3, #2
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80035f0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	0a9b      	lsrs	r3, r3, #10
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d03f      	beq.n	800367e <HAL_I2C_ER_IRQHandler+0x114>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	0a1b      	lsrs	r3, r3, #8
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d039      	beq.n	800367e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800360a:	7efb      	ldrb	r3, [r7, #27]
 800360c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003624:	7ebb      	ldrb	r3, [r7, #26]
 8003626:	2b20      	cmp	r3, #32
 8003628:	d112      	bne.n	8003650 <HAL_I2C_ER_IRQHandler+0xe6>
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10f      	bne.n	8003650 <HAL_I2C_ER_IRQHandler+0xe6>
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	2b21      	cmp	r3, #33	; 0x21
 8003634:	d008      	beq.n	8003648 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003636:	7cfb      	ldrb	r3, [r7, #19]
 8003638:	2b29      	cmp	r3, #41	; 0x29
 800363a:	d005      	beq.n	8003648 <HAL_I2C_ER_IRQHandler+0xde>
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	2b28      	cmp	r3, #40	; 0x28
 8003640:	d106      	bne.n	8003650 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b21      	cmp	r3, #33	; 0x21
 8003646:	d103      	bne.n	8003650 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f001 f869 	bl	8004720 <I2C_Slave_AF>
 800364e:	e016      	b.n	800367e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003658:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003662:	7efb      	ldrb	r3, [r7, #27]
 8003664:	2b10      	cmp	r3, #16
 8003666:	d002      	beq.n	800366e <HAL_I2C_ER_IRQHandler+0x104>
 8003668:	7efb      	ldrb	r3, [r7, #27]
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d107      	bne.n	800367e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	0adb      	lsrs	r3, r3, #11
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00e      	beq.n	80036a8 <HAL_I2C_ER_IRQHandler+0x13e>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80036a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f001 f8a4 	bl	8004808 <I2C_ITError>
  }
}
 80036c0:	bf00      	nop
 80036c2:	3728      	adds	r7, #40	; 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
 800371c:	4613      	mov	r3, r2
 800371e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr

0800372a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003792:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d150      	bne.n	800384c <I2C_MasterTransmit_TXE+0xc8>
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b21      	cmp	r3, #33	; 0x21
 80037ae:	d14d      	bne.n	800384c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d01d      	beq.n	80037f2 <I2C_MasterTransmit_TXE+0x6e>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d01a      	beq.n	80037f2 <I2C_MasterTransmit_TXE+0x6e>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037c2:	d016      	beq.n	80037f2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037d2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2211      	movs	r2, #17
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff6c 	bl	80036c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f0:	e060      	b.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003800:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d107      	bne.n	800383c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff81 	bl	800373c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800383a:	e03b      	b.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff3f 	bl	80036c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800384a:	e033      	b.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b21      	cmp	r3, #33	; 0x21
 8003850:	d005      	beq.n	800385e <I2C_MasterTransmit_TXE+0xda>
 8003852:	7bbb      	ldrb	r3, [r7, #14]
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d12d      	bne.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b22      	cmp	r3, #34	; 0x22
 800385c:	d12a      	bne.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003876:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003878:	e01c      	b.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d103      	bne.n	800388e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f88e 	bl	80039a8 <I2C_MemoryTransmit_TXE_BTF>
}
 800388c:	e012      	b.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038b2:	e7ff      	b.n	80038b4 <I2C_MasterTransmit_TXE+0x130>
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b21      	cmp	r3, #33	; 0x21
 80038d4:	d164      	bne.n	80039a0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d012      	beq.n	8003906 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003904:	e04c      	b.n	80039a0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b08      	cmp	r3, #8
 800390a:	d01d      	beq.n	8003948 <I2C_MasterTransmit_BTF+0x8c>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b20      	cmp	r3, #32
 8003910:	d01a      	beq.n	8003948 <I2C_MasterTransmit_BTF+0x8c>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003918:	d016      	beq.n	8003948 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003928:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2211      	movs	r2, #17
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fec1 	bl	80036c8 <HAL_I2C_MasterTxCpltCallback>
}
 8003946:	e02b      	b.n	80039a0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003956:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003966:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d107      	bne.n	8003992 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fed6 	bl	800373c <HAL_I2C_MemTxCpltCallback>
}
 8003990:	e006      	b.n	80039a0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fe94 	bl	80036c8 <HAL_I2C_MasterTxCpltCallback>
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d11d      	bne.n	80039fc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10b      	bne.n	80039e0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	1c9a      	adds	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80039de:	e077      	b.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	121b      	asrs	r3, r3, #8
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039fa:	e069      	b.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10b      	bne.n	8003a1c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a1a:	e059      	b.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d152      	bne.n	8003aca <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b22      	cmp	r3, #34	; 0x22
 8003a28:	d10d      	bne.n	8003a46 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a38:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a44:	e044      	b.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d015      	beq.n	8003a7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b21      	cmp	r3, #33	; 0x21
 8003a54:	d112      	bne.n	8003a7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a7a:	e029      	b.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d124      	bne.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b21      	cmp	r3, #33	; 0x21
 8003a8a:	d121      	bne.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a9a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fe3a 	bl	800373c <HAL_I2C_MemTxCpltCallback>
}
 8003ac8:	e002      	b.n	8003ad0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff f9d0 	bl	8002e70 <I2C_Flush_DR>
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b22      	cmp	r3, #34	; 0x22
 8003aea:	f040 80ac 	bne.w	8003c46 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d921      	bls.n	8003b40 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	f040 808c 	bne.w	8003c46 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b3e:	e082      	b.n	8003c46 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d075      	beq.n	8003c34 <I2C_MasterReceive_RXNE+0x15c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d002      	beq.n	8003b54 <I2C_MasterReceive_RXNE+0x7c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d16f      	bne.n	8003c34 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f001 faf3 	bl	8005140 <I2C_WaitOnSTOPRequestThroughIT>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d142      	bne.n	8003be6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b6e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d10a      	bne.n	8003bd0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fdc0 	bl	800374e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bce:	e03a      	b.n	8003c46 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2212      	movs	r2, #18
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fd7b 	bl	80036da <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003be4:	e02f      	b.n	8003c46 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bf4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff fd97 	bl	8003760 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c32:	e008      	b.n	8003c46 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c42:	605a      	str	r2, [r3, #4]
}
 8003c44:	e7ff      	b.n	8003c46 <I2C_MasterReceive_RXNE+0x16e>
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d11b      	bne.n	8003c9e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c74:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c9c:	e0bd      	b.n	8003e1a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d129      	bne.n	8003cfc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d00a      	beq.n	8003cd4 <I2C_MasterReceive_BTF+0x86>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d007      	beq.n	8003cd4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cfa:	e08e      	b.n	8003e1a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d176      	bne.n	8003df4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d002      	beq.n	8003d12 <I2C_MasterReceive_BTF+0xc4>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d108      	bne.n	8003d24 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e019      	b.n	8003d58 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d002      	beq.n	8003d30 <I2C_MasterReceive_BTF+0xe2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d108      	bne.n	8003d42 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e00a      	b.n	8003d58 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d007      	beq.n	8003d58 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003db2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d10a      	bne.n	8003dde <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fcb9 	bl	800374e <HAL_I2C_MemRxCpltCallback>
}
 8003ddc:	e01d      	b.n	8003e1a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2212      	movs	r2, #18
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fc74 	bl	80036da <HAL_I2C_MasterRxCpltCallback>
}
 8003df2:	e012      	b.n	8003e1a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691a      	ldr	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d117      	bne.n	8003e66 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e4e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e50:	e067      	b.n	8003f22 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]
}
 8003e64:	e05d      	b.n	8003f22 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e6e:	d133      	bne.n	8003ed8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b21      	cmp	r3, #33	; 0x21
 8003e7a:	d109      	bne.n	8003e90 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	e008      	b.n	8003ea2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <I2C_Master_SB+0x92>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d108      	bne.n	8003ec6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d032      	beq.n	8003f22 <I2C_Master_SB+0x100>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d02d      	beq.n	8003f22 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ed4:	605a      	str	r2, [r3, #4]
}
 8003ed6:	e024      	b.n	8003f22 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10e      	bne.n	8003efe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	11db      	asrs	r3, r3, #7
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f003 0306 	and.w	r3, r3, #6
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	f063 030f 	orn	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]
}
 8003efc:	e011      	b.n	8003f22 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d10d      	bne.n	8003f22 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	11db      	asrs	r3, r3, #7
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f003 0306 	and.w	r3, r3, #6
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f063 030e 	orn	r3, r3, #14
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	611a      	str	r2, [r3, #16]
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d004      	beq.n	8003f52 <I2C_Master_ADD10+0x26>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00c      	beq.n	8003f74 <I2C_Master_ADD10+0x48>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f72:	605a      	str	r2, [r3, #4]
  }
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b091      	sub	sp, #68	; 0x44
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b22      	cmp	r3, #34	; 0x22
 8003fa6:	f040 8174 	bne.w	8004292 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <I2C_Master_ADDR+0x54>
 8003fb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	d10b      	bne.n	8003fd2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	e16b      	b.n	80042aa <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11d      	bne.n	8004016 <I2C_Master_ADDR+0x98>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fe2:	d118      	bne.n	8004016 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004008:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	651a      	str	r2, [r3, #80]	; 0x50
 8004014:	e149      	b.n	80042aa <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d113      	bne.n	8004048 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004020:	2300      	movs	r3, #0
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e120      	b.n	800428a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	f040 808a 	bne.w	8004168 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405a:	d137      	bne.n	80040cc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800407a:	d113      	bne.n	80040a4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408c:	2300      	movs	r3, #0
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	e0f2      	b.n	800428a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a4:	2300      	movs	r3, #0
 80040a6:	623b      	str	r3, [r7, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e0de      	b.n	800428a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d02e      	beq.n	8004130 <I2C_Master_ADDR+0x1b2>
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d02b      	beq.n	8004130 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040da:	2b12      	cmp	r3, #18
 80040dc:	d102      	bne.n	80040e4 <I2C_Master_ADDR+0x166>
 80040de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d125      	bne.n	8004130 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d00e      	beq.n	8004108 <I2C_Master_ADDR+0x18a>
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d00b      	beq.n	8004108 <I2C_Master_ADDR+0x18a>
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b10      	cmp	r3, #16
 80040f4:	d008      	beq.n	8004108 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e007      	b.n	8004118 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004116:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	e0ac      	b.n	800428a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e090      	b.n	800428a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d158      	bne.n	8004224 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	2b04      	cmp	r3, #4
 8004176:	d021      	beq.n	80041bc <I2C_Master_ADDR+0x23e>
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	2b02      	cmp	r3, #2
 800417c:	d01e      	beq.n	80041bc <I2C_Master_ADDR+0x23e>
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	2b10      	cmp	r3, #16
 8004182:	d01b      	beq.n	80041bc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004192:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e012      	b.n	80041e2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f0:	d14b      	bne.n	800428a <I2C_Master_ADDR+0x30c>
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f8:	d00b      	beq.n	8004212 <I2C_Master_ADDR+0x294>
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d008      	beq.n	8004212 <I2C_Master_ADDR+0x294>
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	2b08      	cmp	r3, #8
 8004204:	d005      	beq.n	8004212 <I2C_Master_ADDR+0x294>
 8004206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004208:	2b10      	cmp	r3, #16
 800420a:	d002      	beq.n	8004212 <I2C_Master_ADDR+0x294>
 800420c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420e:	2b20      	cmp	r3, #32
 8004210:	d13b      	bne.n	800428a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	e032      	b.n	800428a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004232:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004242:	d117      	bne.n	8004274 <I2C_Master_ADDR+0x2f6>
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800424a:	d00b      	beq.n	8004264 <I2C_Master_ADDR+0x2e6>
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	2b01      	cmp	r3, #1
 8004250:	d008      	beq.n	8004264 <I2C_Master_ADDR+0x2e6>
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	2b08      	cmp	r3, #8
 8004256:	d005      	beq.n	8004264 <I2C_Master_ADDR+0x2e6>
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	2b10      	cmp	r3, #16
 800425c:	d002      	beq.n	8004264 <I2C_Master_ADDR+0x2e6>
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	2b20      	cmp	r3, #32
 8004262:	d107      	bne.n	8004274 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004272:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004290:	e00b      	b.n	80042aa <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	68bb      	ldr	r3, [r7, #8]
}
 80042a8:	e7ff      	b.n	80042aa <I2C_Master_ADDR+0x32c>
 80042aa:	bf00      	nop
 80042ac:	3744      	adds	r7, #68	; 0x44
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d02b      	beq.n	8004326 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d114      	bne.n	8004326 <I2C_SlaveTransmit_TXE+0x72>
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b29      	cmp	r3, #41	; 0x29
 8004300:	d111      	bne.n	8004326 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004310:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2221      	movs	r2, #33	; 0x21
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2228      	movs	r2, #40	; 0x28
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff f9e3 	bl	80036ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d011      	beq.n	8004364 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d02c      	beq.n	80043e2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d114      	bne.n	80043e2 <I2C_SlaveReceive_RXNE+0x74>
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b2a      	cmp	r3, #42	; 0x2a
 80043bc:	d111      	bne.n	80043e2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2222      	movs	r2, #34	; 0x22
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2228      	movs	r2, #40	; 0x28
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff f98e 	bl	80036fe <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d012      	beq.n	8004422 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004446:	2b28      	cmp	r3, #40	; 0x28
 8004448:	d127      	bne.n	800449a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004458:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	09db      	lsrs	r3, r3, #7
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	81bb      	strh	r3, [r7, #12]
 800447c:	e002      	b.n	8004484 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800448c:	89ba      	ldrh	r2, [r7, #12]
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff f93c 	bl	8003710 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004498:	e00e      	b.n	80044b8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451c:	d172      	bne.n	8004604 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b22      	cmp	r3, #34	; 0x22
 8004522:	d002      	beq.n	800452a <I2C_Slave_STOPF+0x6a>
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b2a      	cmp	r3, #42	; 0x2a
 8004528:	d135      	bne.n	8004596 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d005      	beq.n	800454e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f043 0204 	orr.w	r2, r3, #4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe f938 	bl	80027d8 <HAL_DMA_GetState>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d049      	beq.n	8004602 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	4a69      	ldr	r2, [pc, #420]	; (8004718 <I2C_Slave_STOPF+0x258>)
 8004574:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd ffae 	bl	80024dc <HAL_DMA_Abort_IT>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d03d      	beq.n	8004602 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004590:	4610      	mov	r0, r2
 8004592:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004594:	e035      	b.n	8004602 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe f902 	bl	80027d8 <HAL_DMA_GetState>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d014      	beq.n	8004604 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	4a4e      	ldr	r2, [pc, #312]	; (8004718 <I2C_Slave_STOPF+0x258>)
 80045e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd ff78 	bl	80024dc <HAL_DMA_Abort_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045fc:	4610      	mov	r0, r2
 80045fe:	4798      	blx	r3
 8004600:	e000      	b.n	8004604 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004602:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d03e      	beq.n	800468c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b04      	cmp	r3, #4
 800461a:	d112      	bne.n	8004642 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d112      	bne.n	8004676 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f043 0204 	orr.w	r2, r3, #4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8b7 	bl	8004808 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800469a:	e039      	b.n	8004710 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b2a      	cmp	r3, #42	; 0x2a
 80046a0:	d109      	bne.n	80046b6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2228      	movs	r2, #40	; 0x28
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff f824 	bl	80036fe <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b28      	cmp	r3, #40	; 0x28
 80046c0:	d111      	bne.n	80046e6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <I2C_Slave_STOPF+0x25c>)
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff f823 	bl	800372a <HAL_I2C_ListenCpltCallback>
}
 80046e4:	e014      	b.n	8004710 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	2b22      	cmp	r3, #34	; 0x22
 80046ec:	d002      	beq.n	80046f4 <I2C_Slave_STOPF+0x234>
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b22      	cmp	r3, #34	; 0x22
 80046f2:	d10d      	bne.n	8004710 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe fff7 	bl	80036fe <HAL_I2C_SlaveRxCpltCallback>
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	08004c9d 	.word	0x08004c9d
 800471c:	ffff0000 	.word	0xffff0000

08004720 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d002      	beq.n	8004742 <I2C_Slave_AF+0x22>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b20      	cmp	r3, #32
 8004740:	d129      	bne.n	8004796 <I2C_Slave_AF+0x76>
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b28      	cmp	r3, #40	; 0x28
 8004746:	d126      	bne.n	8004796 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <I2C_Slave_AF+0xe4>)
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004766:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004776:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe ffcb 	bl	800372a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004794:	e031      	b.n	80047fa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d129      	bne.n	80047f0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a19      	ldr	r2, [pc, #100]	; (8004804 <I2C_Slave_AF+0xe4>)
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2221      	movs	r2, #33	; 0x21
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047c6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047d0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe fb44 	bl	8002e70 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fe ff7f 	bl	80036ec <HAL_I2C_SlaveTxCpltCallback>
}
 80047ee:	e004      	b.n	80047fa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f8:	615a      	str	r2, [r3, #20]
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	ffff0000 	.word	0xffff0000

08004808 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004820:	7bbb      	ldrb	r3, [r7, #14]
 8004822:	2b10      	cmp	r3, #16
 8004824:	d002      	beq.n	800482c <I2C_ITError+0x24>
 8004826:	7bbb      	ldrb	r3, [r7, #14]
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d10a      	bne.n	8004842 <I2C_ITError+0x3a>
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b22      	cmp	r3, #34	; 0x22
 8004830:	d107      	bne.n	8004842 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004840:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004848:	2b28      	cmp	r3, #40	; 0x28
 800484a:	d107      	bne.n	800485c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2228      	movs	r2, #40	; 0x28
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800485a:	e015      	b.n	8004888 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486a:	d00a      	beq.n	8004882 <I2C_ITError+0x7a>
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b60      	cmp	r3, #96	; 0x60
 8004870:	d007      	beq.n	8004882 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004896:	d162      	bne.n	800495e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d020      	beq.n	80048f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ba:	4a6a      	ldr	r2, [pc, #424]	; (8004a64 <I2C_ITError+0x25c>)
 80048bc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fe0a 	bl	80024dc <HAL_DMA_Abort_IT>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8089 	beq.w	80049e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048f2:	4610      	mov	r0, r2
 80048f4:	4798      	blx	r3
 80048f6:	e074      	b.n	80049e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	4a59      	ldr	r2, [pc, #356]	; (8004a64 <I2C_ITError+0x25c>)
 80048fe:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd fde9 	bl	80024dc <HAL_DMA_Abort_IT>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d068      	beq.n	80049e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d10b      	bne.n	8004936 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004958:	4610      	mov	r0, r2
 800495a:	4798      	blx	r3
 800495c:	e041      	b.n	80049e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b60      	cmp	r3, #96	; 0x60
 8004968:	d125      	bne.n	80049b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d10b      	bne.n	800499e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fe fedf 	bl	8003772 <HAL_I2C_AbortCpltCallback>
 80049b4:	e015      	b.n	80049e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d10b      	bne.n	80049dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fe febf 	bl	8003760 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10e      	bne.n	8004a10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d113      	bne.n	8004a5c <I2C_ITError+0x254>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b28      	cmp	r3, #40	; 0x28
 8004a38:	d110      	bne.n	8004a5c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <I2C_ITError+0x260>)
 8004a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fe fe67 	bl	800372a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	08004c9d 	.word	0x08004c9d
 8004a68:	ffff0000 	.word	0xffff0000

08004a6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d006      	beq.n	8004a96 <I2C_MasterRequestWrite+0x2a>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d003      	beq.n	8004a96 <I2C_MasterRequestWrite+0x2a>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a94:	d108      	bne.n	8004aa8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e00b      	b.n	8004ac0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	2b12      	cmp	r3, #18
 8004aae:	d107      	bne.n	8004ac0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f98d 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae6:	d103      	bne.n	8004af0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e035      	b.n	8004b60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004afc:	d108      	bne.n	8004b10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004afe:	897b      	ldrh	r3, [r7, #10]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b0c:	611a      	str	r2, [r3, #16]
 8004b0e:	e01b      	b.n	8004b48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b10:	897b      	ldrh	r3, [r7, #10]
 8004b12:	11db      	asrs	r3, r3, #7
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f003 0306 	and.w	r3, r3, #6
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f063 030f 	orn	r3, r3, #15
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	490e      	ldr	r1, [pc, #56]	; (8004b68 <I2C_MasterRequestWrite+0xfc>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f9d6 	bl	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e010      	b.n	8004b60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b3e:	897b      	ldrh	r3, [r7, #10]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	4907      	ldr	r1, [pc, #28]	; (8004b6c <I2C_MasterRequestWrite+0x100>)
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f9c6 	bl	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e000      	b.n	8004b60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	00010008 	.word	0x00010008
 8004b6c:	00010002 	.word	0x00010002

08004b70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4603      	mov	r3, r0
 8004b80:	817b      	strh	r3, [r7, #10]
 8004b82:	460b      	mov	r3, r1
 8004b84:	813b      	strh	r3, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f920 	bl	8004dec <I2C_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc0:	d103      	bne.n	8004bca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e05f      	b.n	8004c8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bce:	897b      	ldrh	r3, [r7, #10]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	492d      	ldr	r1, [pc, #180]	; (8004c98 <I2C_RequestMemoryWrite+0x128>)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f97b 	bl	8004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e04c      	b.n	8004c8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0c:	6a39      	ldr	r1, [r7, #32]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fa06 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00d      	beq.n	8004c36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d107      	bne.n	8004c32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e02b      	b.n	8004c8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c3c:	893b      	ldrh	r3, [r7, #8]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]
 8004c46:	e021      	b.n	8004c8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c48:	893b      	ldrh	r3, [r7, #8]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c58:	6a39      	ldr	r1, [r7, #32]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f9e0 	bl	8005020 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d107      	bne.n	8004c7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e005      	b.n	8004c8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c82:	893b      	ldrh	r3, [r7, #8]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	00010002 	.word	0x00010002

08004c9c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cb6:	4b4b      	ldr	r3, [pc, #300]	; (8004de4 <I2C_DMAAbort+0x148>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	08db      	lsrs	r3, r3, #3
 8004cbc:	4a4a      	ldr	r2, [pc, #296]	; (8004de8 <I2C_DMAAbort+0x14c>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	0a1a      	lsrs	r2, r3, #8
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00da      	lsls	r2, r3, #3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ce2:	e00a      	b.n	8004cfa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d0ea      	beq.n	8004cd0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	2200      	movs	r2, #0
 8004d08:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	2200      	movs	r2, #0
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d28:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b60      	cmp	r3, #96	; 0x60
 8004d6a:	d10e      	bne.n	8004d8a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f7fe fcf5 	bl	8003772 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d88:	e027      	b.n	8004dda <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d8a:	7cfb      	ldrb	r3, [r7, #19]
 8004d8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d90:	2b28      	cmp	r3, #40	; 0x28
 8004d92:	d117      	bne.n	8004dc4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2228      	movs	r2, #40	; 0x28
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dc2:	e007      	b.n	8004dd4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004dd4:	6978      	ldr	r0, [r7, #20]
 8004dd6:	f7fe fcc3 	bl	8003760 <HAL_I2C_ErrorCallback>
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000000 	.word	0x20000000
 8004de8:	14f8b589 	.word	0x14f8b589

08004dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dfc:	e048      	b.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e04:	d044      	beq.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fc fd75 	bl	80018f4 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d302      	bcc.n	8004e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d139      	bne.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d10d      	bne.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	43da      	mvns	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	e00c      	b.n	8004e5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	43da      	mvns	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d116      	bne.n	8004e90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	f043 0220 	orr.w	r2, r3, #32
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e023      	b.n	8004ed8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	0c1b      	lsrs	r3, r3, #16
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10d      	bne.n	8004eb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	e00c      	b.n	8004ed0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	43da      	mvns	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	79fb      	ldrb	r3, [r7, #7]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d093      	beq.n	8004dfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eee:	e071      	b.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efe:	d123      	bne.n	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	f043 0204 	orr.w	r2, r3, #4
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e067      	b.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d041      	beq.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f50:	f7fc fcd0 	bl	80018f4 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d136      	bne.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10c      	bne.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	43da      	mvns	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	2300      	moveq	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	e00b      	b.n	8004fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	43da      	mvns	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4013      	ands	r3, r2
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf14      	ite	ne
 8004f9c:	2301      	movne	r3, #1
 8004f9e:	2300      	moveq	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d016      	beq.n	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e021      	b.n	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10c      	bne.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	43da      	mvns	r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e00b      	b.n	8005010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f af6d 	bne.w	8004ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800502c:	e034      	b.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f8b8 	bl	80051a4 <I2C_IsAcknowledgeFailed>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e034      	b.n	80050a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d028      	beq.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005046:	f7fc fc55 	bl	80018f4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d11d      	bne.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d016      	beq.n	8005098 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e007      	b.n	80050a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b80      	cmp	r3, #128	; 0x80
 80050a4:	d1c3      	bne.n	800502e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050bc:	e034      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f870 	bl	80051a4 <I2C_IsAcknowledgeFailed>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e034      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d028      	beq.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fc fc0d 	bl	80018f4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11d      	bne.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d016      	beq.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e007      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d1c3      	bne.n	80050be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800514c:	4b13      	ldr	r3, [pc, #76]	; (800519c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	0a1a      	lsrs	r2, r3, #8
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3b01      	subs	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e008      	b.n	8005190 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800518c:	d0e9      	beq.n	8005162 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000000 	.word	0x20000000
 80051a0:	14f8b589 	.word	0x14f8b589

080051a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d11b      	bne.n	80051f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	f043 0204 	orr.w	r2, r3, #4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005210:	d103      	bne.n	800521a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005218:	e007      	b.n	800522a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005222:	d102      	bne.n	800522a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2208      	movs	r2, #8
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e272      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8087 	beq.w	8005362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005254:	4b92      	ldr	r3, [pc, #584]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 030c 	and.w	r3, r3, #12
 800525c:	2b04      	cmp	r3, #4
 800525e:	d00c      	beq.n	800527a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005260:	4b8f      	ldr	r3, [pc, #572]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d112      	bne.n	8005292 <HAL_RCC_OscConfig+0x5e>
 800526c:	4b8c      	ldr	r3, [pc, #560]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005278:	d10b      	bne.n	8005292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527a:	4b89      	ldr	r3, [pc, #548]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d06c      	beq.n	8005360 <HAL_RCC_OscConfig+0x12c>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d168      	bne.n	8005360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e24c      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x76>
 800529c:	4b80      	ldr	r3, [pc, #512]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a7f      	ldr	r2, [pc, #508]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	e02e      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x98>
 80052b2:	4b7b      	ldr	r3, [pc, #492]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a7a      	ldr	r2, [pc, #488]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	4b78      	ldr	r3, [pc, #480]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a77      	ldr	r2, [pc, #476]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e01d      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0xbc>
 80052d6:	4b72      	ldr	r3, [pc, #456]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a71      	ldr	r2, [pc, #452]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4b6f      	ldr	r3, [pc, #444]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a6e      	ldr	r2, [pc, #440]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e00b      	b.n	8005308 <HAL_RCC_OscConfig+0xd4>
 80052f0:	4b6b      	ldr	r3, [pc, #428]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a6a      	ldr	r2, [pc, #424]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4b68      	ldr	r3, [pc, #416]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a67      	ldr	r2, [pc, #412]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d013      	beq.n	8005338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005310:	f7fc faf0 	bl	80018f4 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005318:	f7fc faec 	bl	80018f4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e200      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0xe4>
 8005336:	e014      	b.n	8005362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fc fadc 	bl	80018f4 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005340:	f7fc fad8 	bl	80018f4 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b64      	cmp	r3, #100	; 0x64
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e1ec      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	4b53      	ldr	r3, [pc, #332]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x10c>
 800535e:	e000      	b.n	8005362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d063      	beq.n	8005436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800536e:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800537a:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b08      	cmp	r3, #8
 8005384:	d11c      	bne.n	80053c0 <HAL_RCC_OscConfig+0x18c>
 8005386:	4b46      	ldr	r3, [pc, #280]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d116      	bne.n	80053c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005392:	4b43      	ldr	r3, [pc, #268]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_RCC_OscConfig+0x176>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d001      	beq.n	80053aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e1c0      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053aa:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4939      	ldr	r1, [pc, #228]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053be:	e03a      	b.n	8005436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c8:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <HAL_RCC_OscConfig+0x270>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fc fa91 	bl	80018f4 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d6:	f7fc fa8d 	bl	80018f4 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e1a1      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e8:	4b2d      	ldr	r3, [pc, #180]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f4:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4927      	ldr	r1, [pc, #156]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 8005404:	4313      	orrs	r3, r2
 8005406:	600b      	str	r3, [r1, #0]
 8005408:	e015      	b.n	8005436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540a:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <HAL_RCC_OscConfig+0x270>)
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005410:	f7fc fa70 	bl	80018f4 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005418:	f7fc fa6c 	bl	80018f4 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e180      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542a:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d03a      	beq.n	80054b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d019      	beq.n	800547e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544a:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <HAL_RCC_OscConfig+0x274>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005450:	f7fc fa50 	bl	80018f4 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005458:	f7fc fa4c 	bl	80018f4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e160      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546a:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <HAL_RCC_OscConfig+0x26c>)
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0f0      	beq.n	8005458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005476:	2001      	movs	r0, #1
 8005478:	f000 face 	bl	8005a18 <RCC_Delay>
 800547c:	e01c      	b.n	80054b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <HAL_RCC_OscConfig+0x274>)
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005484:	f7fc fa36 	bl	80018f4 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548a:	e00f      	b.n	80054ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800548c:	f7fc fa32 	bl	80018f4 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d908      	bls.n	80054ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e146      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	42420000 	.word	0x42420000
 80054a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ac:	4b92      	ldr	r3, [pc, #584]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e9      	bne.n	800548c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80a6 	beq.w	8005612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ca:	4b8b      	ldr	r3, [pc, #556]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10d      	bne.n	80054f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	4b88      	ldr	r3, [pc, #544]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4a87      	ldr	r2, [pc, #540]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e0:	61d3      	str	r3, [r2, #28]
 80054e2:	4b85      	ldr	r3, [pc, #532]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b82      	ldr	r3, [pc, #520]	; (80056fc <HAL_RCC_OscConfig+0x4c8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fe:	4b7f      	ldr	r3, [pc, #508]	; (80056fc <HAL_RCC_OscConfig+0x4c8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7e      	ldr	r2, [pc, #504]	; (80056fc <HAL_RCC_OscConfig+0x4c8>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550a:	f7fc f9f3 	bl	80018f4 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7fc f9ef 	bl	80018f4 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b64      	cmp	r3, #100	; 0x64
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e103      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b75      	ldr	r3, [pc, #468]	; (80056fc <HAL_RCC_OscConfig+0x4c8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x312>
 8005538:	4b6f      	ldr	r3, [pc, #444]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	4a6e      	ldr	r2, [pc, #440]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6213      	str	r3, [r2, #32]
 8005544:	e02d      	b.n	80055a2 <HAL_RCC_OscConfig+0x36e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x334>
 800554e:	4b6a      	ldr	r3, [pc, #424]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	4a69      	ldr	r2, [pc, #420]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	6213      	str	r3, [r2, #32]
 800555a:	4b67      	ldr	r3, [pc, #412]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	4a66      	ldr	r2, [pc, #408]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005560:	f023 0304 	bic.w	r3, r3, #4
 8005564:	6213      	str	r3, [r2, #32]
 8005566:	e01c      	b.n	80055a2 <HAL_RCC_OscConfig+0x36e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b05      	cmp	r3, #5
 800556e:	d10c      	bne.n	800558a <HAL_RCC_OscConfig+0x356>
 8005570:	4b61      	ldr	r3, [pc, #388]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	4a60      	ldr	r2, [pc, #384]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005576:	f043 0304 	orr.w	r3, r3, #4
 800557a:	6213      	str	r3, [r2, #32]
 800557c:	4b5e      	ldr	r3, [pc, #376]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4a5d      	ldr	r2, [pc, #372]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	6213      	str	r3, [r2, #32]
 8005588:	e00b      	b.n	80055a2 <HAL_RCC_OscConfig+0x36e>
 800558a:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	4a5a      	ldr	r2, [pc, #360]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	6213      	str	r3, [r2, #32]
 8005596:	4b58      	ldr	r3, [pc, #352]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	4a57      	ldr	r2, [pc, #348]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d015      	beq.n	80055d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055aa:	f7fc f9a3 	bl	80018f4 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f7fc f99f 	bl	80018f4 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e0b1      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c8:	4b4b      	ldr	r3, [pc, #300]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0ee      	beq.n	80055b2 <HAL_RCC_OscConfig+0x37e>
 80055d4:	e014      	b.n	8005600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d6:	f7fc f98d 	bl	80018f4 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055dc:	e00a      	b.n	80055f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055de:	f7fc f989 	bl	80018f4 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e09b      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f4:	4b40      	ldr	r3, [pc, #256]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ee      	bne.n	80055de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005606:	4b3c      	ldr	r3, [pc, #240]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4a3b      	ldr	r2, [pc, #236]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800560c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8087 	beq.w	800572a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800561c:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b08      	cmp	r3, #8
 8005626:	d061      	beq.n	80056ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d146      	bne.n	80056be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005630:	4b33      	ldr	r3, [pc, #204]	; (8005700 <HAL_RCC_OscConfig+0x4cc>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005636:	f7fc f95d 	bl	80018f4 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563e:	f7fc f959 	bl	80018f4 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e06d      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005650:	4b29      	ldr	r3, [pc, #164]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1f0      	bne.n	800563e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005664:	d108      	bne.n	8005678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005666:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4921      	ldr	r1, [pc, #132]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005678:	4b1f      	ldr	r3, [pc, #124]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a19      	ldr	r1, [r3, #32]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	430b      	orrs	r3, r1
 800568a:	491b      	ldr	r1, [pc, #108]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 800568c:	4313      	orrs	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCC_OscConfig+0x4cc>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005696:	f7fc f92d 	bl	80018f4 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7fc f929 	bl	80018f4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e03d      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x46a>
 80056bc:	e035      	b.n	800572a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056be:	4b10      	ldr	r3, [pc, #64]	; (8005700 <HAL_RCC_OscConfig+0x4cc>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fc f916 	bl	80018f4 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fc f912 	bl	80018f4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e026      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_RCC_OscConfig+0x4c4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x498>
 80056ea:	e01e      	b.n	800572a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e019      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
 80056f8:	40021000 	.word	0x40021000
 80056fc:	40007000 	.word	0x40007000
 8005700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005704:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <HAL_RCC_OscConfig+0x500>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	429a      	cmp	r2, r3
 8005716:	d106      	bne.n	8005726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d001      	beq.n	800572a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40021000 	.word	0x40021000

08005738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e0d0      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800574c:	4b6a      	ldr	r3, [pc, #424]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d910      	bls.n	800577c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800575a:	4b67      	ldr	r3, [pc, #412]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 0207 	bic.w	r2, r3, #7
 8005762:	4965      	ldr	r1, [pc, #404]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	4313      	orrs	r3, r2
 8005768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800576a:	4b63      	ldr	r3, [pc, #396]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d001      	beq.n	800577c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0b8      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d020      	beq.n	80057ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005794:	4b59      	ldr	r3, [pc, #356]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a58      	ldr	r2, [pc, #352]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 800579a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800579e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057ac:	4b53      	ldr	r3, [pc, #332]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a52      	ldr	r2, [pc, #328]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80057b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b8:	4b50      	ldr	r3, [pc, #320]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	494d      	ldr	r1, [pc, #308]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d040      	beq.n	8005858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b47      	ldr	r3, [pc, #284]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d115      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e07f      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f6:	4b41      	ldr	r3, [pc, #260]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e073      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005806:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e06b      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005816:	4b39      	ldr	r3, [pc, #228]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f023 0203 	bic.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4936      	ldr	r1, [pc, #216]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005828:	f7fc f864 	bl	80018f4 <HAL_GetTick>
 800582c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	e00a      	b.n	8005846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005830:	f7fc f860 	bl	80018f4 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	; 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e053      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	4b2d      	ldr	r3, [pc, #180]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 020c 	and.w	r2, r3, #12
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	429a      	cmp	r2, r3
 8005856:	d1eb      	bne.n	8005830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005858:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d210      	bcs.n	8005888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f023 0207 	bic.w	r2, r3, #7
 800586e:	4922      	ldr	r1, [pc, #136]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005876:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e032      	b.n	80058ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005894:	4b19      	ldr	r3, [pc, #100]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4916      	ldr	r1, [pc, #88]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058b2:	4b12      	ldr	r3, [pc, #72]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	490e      	ldr	r1, [pc, #56]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058c6:	f000 f821 	bl	800590c <HAL_RCC_GetSysClockFreq>
 80058ca:	4602      	mov	r2, r0
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	490a      	ldr	r1, [pc, #40]	; (8005900 <HAL_RCC_ClockConfig+0x1c8>)
 80058d8:	5ccb      	ldrb	r3, [r1, r3]
 80058da:	fa22 f303 	lsr.w	r3, r2, r3
 80058de:	4a09      	ldr	r2, [pc, #36]	; (8005904 <HAL_RCC_ClockConfig+0x1cc>)
 80058e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058e2:	4b09      	ldr	r3, [pc, #36]	; (8005908 <HAL_RCC_ClockConfig+0x1d0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fb ffc2 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40022000 	.word	0x40022000
 80058fc:	40021000 	.word	0x40021000
 8005900:	08009aa4 	.word	0x08009aa4
 8005904:	20000000 	.word	0x20000000
 8005908:	20000004 	.word	0x20000004

0800590c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005926:	4b1e      	ldr	r3, [pc, #120]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 030c 	and.w	r3, r3, #12
 8005932:	2b04      	cmp	r3, #4
 8005934:	d002      	beq.n	800593c <HAL_RCC_GetSysClockFreq+0x30>
 8005936:	2b08      	cmp	r3, #8
 8005938:	d003      	beq.n	8005942 <HAL_RCC_GetSysClockFreq+0x36>
 800593a:	e027      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800593e:	613b      	str	r3, [r7, #16]
      break;
 8005940:	e027      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	0c9b      	lsrs	r3, r3, #18
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800594c:	5cd3      	ldrb	r3, [r2, r3]
 800594e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d010      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800595a:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	0c5b      	lsrs	r3, r3, #17
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	4a11      	ldr	r2, [pc, #68]	; (80059ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8005966:	5cd3      	ldrb	r3, [r2, r3]
 8005968:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a0d      	ldr	r2, [pc, #52]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800596e:	fb03 f202 	mul.w	r2, r3, r2
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e004      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005980:	fb02 f303 	mul.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	613b      	str	r3, [r7, #16]
      break;
 800598a:	e002      	b.n	8005992 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800598e:	613b      	str	r3, [r7, #16]
      break;
 8005990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005992:	693b      	ldr	r3, [r7, #16]
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40021000 	.word	0x40021000
 80059a4:	007a1200 	.word	0x007a1200
 80059a8:	08009abc 	.word	0x08009abc
 80059ac:	08009acc 	.word	0x08009acc
 80059b0:	003d0900 	.word	0x003d0900

080059b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059b8:	4b02      	ldr	r3, [pc, #8]	; (80059c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80059ba:	681b      	ldr	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr
 80059c4:	20000000 	.word	0x20000000

080059c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059cc:	f7ff fff2 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	; (80059ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	08009ab4 	.word	0x08009ab4

080059f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059f4:	f7ff ffde 	bl	80059b4 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	0adb      	lsrs	r3, r3, #11
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	; (8005a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40021000 	.word	0x40021000
 8005a14:	08009ab4 	.word	0x08009ab4

08005a18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a20:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <RCC_Delay+0x34>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <RCC_Delay+0x38>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0a5b      	lsrs	r3, r3, #9
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a34:	bf00      	nop
  }
  while (Delay --);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1e5a      	subs	r2, r3, #1
 8005a3a:	60fa      	str	r2, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f9      	bne.n	8005a34 <RCC_Delay+0x1c>
}
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr
 8005a4c:	20000000 	.word	0x20000000
 8005a50:	10624dd3 	.word	0x10624dd3

08005a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d07d      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a70:	2300      	movs	r3, #0
 8005a72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a74:	4b4f      	ldr	r3, [pc, #316]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a80:	4b4c      	ldr	r3, [pc, #304]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	4a4b      	ldr	r2, [pc, #300]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	61d3      	str	r3, [r2, #28]
 8005a8c:	4b49      	ldr	r3, [pc, #292]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	4b46      	ldr	r3, [pc, #280]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d118      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005aa8:	4b43      	ldr	r3, [pc, #268]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a42      	ldr	r2, [pc, #264]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab4:	f7fb ff1e 	bl	80018f4 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aba:	e008      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005abc:	f7fb ff1a 	bl	80018f4 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e06d      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ace:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ada:	4b36      	ldr	r3, [pc, #216]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d02e      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d027      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af8:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b02:	4b2e      	ldr	r3, [pc, #184]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b08:	4b2c      	ldr	r3, [pc, #176]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d014      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fb fee9 	bl	80018f4 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b24:	e00a      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f7fb fee5 	bl	80018f4 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d901      	bls.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e036      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ee      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4917      	ldr	r1, [pc, #92]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b60:	4b14      	ldr	r3, [pc, #80]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4a13      	ldr	r2, [pc, #76]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b78:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	490b      	ldr	r1, [pc, #44]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0310 	and.w	r3, r3, #16
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b96:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4904      	ldr	r1, [pc, #16]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	42420440 	.word	0x42420440

08005bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e041      	b.n	8005c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb fc68 	bl	80014bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f000 fa74 	bl	80060ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e03a      	b.n	8005cee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <HAL_TIM_Base_Start_IT+0x98>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00e      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0x58>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d009      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0x58>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <HAL_TIM_Base_Start_IT+0x9c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIM_Base_Start_IT+0x58>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <HAL_TIM_Base_Start_IT+0xa0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d111      	bne.n	8005cdc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b06      	cmp	r3, #6
 8005cc8:	d010      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 0201 	orr.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cda:	e007      	b.n	8005cec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800

08005d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d122      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d11b      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f06f 0202 	mvn.w	r2, #2
 8005d30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9b4 	bl	80060b4 <HAL_TIM_IC_CaptureCallback>
 8005d4c:	e005      	b.n	8005d5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9a7 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f9b6 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d122      	bne.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0204 	mvn.w	r2, #4
 8005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f98a 	bl	80060b4 <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f97d 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f98c 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d122      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d11b      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0208 	mvn.w	r2, #8
 8005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2204      	movs	r2, #4
 8005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f960 	bl	80060b4 <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f953 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f962 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0210 	mvn.w	r2, #16
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2208      	movs	r2, #8
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f936 	bl	80060b4 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f929 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f938 	bl	80060c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d10e      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d107      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0201 	mvn.w	r2, #1
 8005e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fb f87a 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e92:	2b80      	cmp	r3, #128	; 0x80
 8005e94:	d10e      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea0:	2b80      	cmp	r3, #128	; 0x80
 8005ea2:	d107      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa7b 	bl	80063aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d107      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8fc 	bl	80060d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d10e      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d107      	bne.n	8005f0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f06f 0220 	mvn.w	r2, #32
 8005f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa46 	bl	8006398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_ConfigClockSource+0x1c>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e0b4      	b.n	800609a <HAL_TIM_ConfigClockSource+0x186>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f68:	d03e      	beq.n	8005fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6e:	f200 8087 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f76:	f000 8086 	beq.w	8006086 <HAL_TIM_ConfigClockSource+0x172>
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7e:	d87f      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b70      	cmp	r3, #112	; 0x70
 8005f82:	d01a      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0xa6>
 8005f84:	2b70      	cmp	r3, #112	; 0x70
 8005f86:	d87b      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b60      	cmp	r3, #96	; 0x60
 8005f8a:	d050      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x11a>
 8005f8c:	2b60      	cmp	r3, #96	; 0x60
 8005f8e:	d877      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b50      	cmp	r3, #80	; 0x50
 8005f92:	d03c      	beq.n	800600e <HAL_TIM_ConfigClockSource+0xfa>
 8005f94:	2b50      	cmp	r3, #80	; 0x50
 8005f96:	d873      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b40      	cmp	r3, #64	; 0x40
 8005f9a:	d058      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x13a>
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d86f      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b30      	cmp	r3, #48	; 0x30
 8005fa2:	d064      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	2b30      	cmp	r3, #48	; 0x30
 8005fa6:	d86b      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d060      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15a>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d867      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d05c      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15a>
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d05a      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15a>
 8005fb8:	e062      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6899      	ldr	r1, [r3, #8]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f000 f968 	bl	800629e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	609a      	str	r2, [r3, #8]
      break;
 8005fe6:	e04f      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6899      	ldr	r1, [r3, #8]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f000 f951 	bl	800629e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800600a:	609a      	str	r2, [r3, #8]
      break;
 800600c:	e03c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	461a      	mov	r2, r3
 800601c:	f000 f8c8 	bl	80061b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2150      	movs	r1, #80	; 0x50
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f91f 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800602c:	e02c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6859      	ldr	r1, [r3, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	461a      	mov	r2, r3
 800603c:	f000 f8e6 	bl	800620c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2160      	movs	r1, #96	; 0x60
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f90f 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800604c:	e01c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6859      	ldr	r1, [r3, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	461a      	mov	r2, r3
 800605c:	f000 f8a8 	bl	80061b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2140      	movs	r1, #64	; 0x40
 8006066:	4618      	mov	r0, r3
 8006068:	f000 f8ff 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800606c:	e00c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f000 f8f6 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 800607e:	e003      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	e000      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr

080060b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr
	...

080060ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a29      	ldr	r2, [pc, #164]	; (80061a4 <TIM_Base_SetConfig+0xb8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00b      	beq.n	800611c <TIM_Base_SetConfig+0x30>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d007      	beq.n	800611c <TIM_Base_SetConfig+0x30>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <TIM_Base_SetConfig+0xbc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_Base_SetConfig+0x30>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a25      	ldr	r2, [pc, #148]	; (80061ac <TIM_Base_SetConfig+0xc0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d108      	bne.n	800612e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <TIM_Base_SetConfig+0xb8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00b      	beq.n	800614e <TIM_Base_SetConfig+0x62>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613c:	d007      	beq.n	800614e <TIM_Base_SetConfig+0x62>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <TIM_Base_SetConfig+0xbc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_Base_SetConfig+0x62>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a18      	ldr	r2, [pc, #96]	; (80061ac <TIM_Base_SetConfig+0xc0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a07      	ldr	r2, [pc, #28]	; (80061a4 <TIM_Base_SetConfig+0xb8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d103      	bne.n	8006194 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	615a      	str	r2, [r3, #20]
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800

080061b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0201 	bic.w	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 030a 	bic.w	r3, r3, #10
 80061ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	bc80      	pop	{r7}
 800620a:	4770      	bx	lr

0800620c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0210 	bic.w	r2, r3, #16
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	031b      	lsls	r3, r3, #12
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006248:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	621a      	str	r2, [r3, #32]
}
 8006260:	bf00      	nop
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr

0800626a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	f043 0307 	orr.w	r3, r3, #7
 800628c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	609a      	str	r2, [r3, #8]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr

0800629e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800629e:	b480      	push	{r7}
 80062a0:	b087      	sub	sp, #28
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
 80062aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	021a      	lsls	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	609a      	str	r2, [r3, #8]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e046      	b.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a12      	ldr	r2, [pc, #72]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a10      	ldr	r2, [pc, #64]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10c      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800635c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800

08006398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e042      	b.n	8006454 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fb f88e 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2224      	movs	r2, #36	; 0x24
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fc7f 	bl	8006d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b0ba      	sub	sp, #232	; 0xe8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006488:	2300      	movs	r3, #0
 800648a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800649a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_UART_IRQHandler+0x66>
 80064ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fb63 	bl	8006b86 <UART_Receive_IT>
      return;
 80064c0:	e25b      	b.n	800697a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80de 	beq.w	8006688 <HAL_UART_IRQHandler+0x22c>
 80064cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d106      	bne.n	80064e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80d1 	beq.w	8006688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <HAL_UART_IRQHandler+0xae>
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006502:	f043 0201 	orr.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800650a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <HAL_UART_IRQHandler+0xd2>
 8006516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	f043 0202 	orr.w	r2, r3, #2
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_UART_IRQHandler+0xf6>
 800653a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d011      	beq.n	8006582 <HAL_UART_IRQHandler+0x126>
 800655e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006562:	f003 0320 	and.w	r3, r3, #32
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f043 0208 	orr.w	r2, r3, #8
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 81f2 	beq.w	8006970 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_UART_IRQHandler+0x14e>
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d002      	beq.n	80065aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 faee 	bl	8006b86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <HAL_UART_IRQHandler+0x17a>
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d04f      	beq.n	8006676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f9f8 	bl	80069cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d041      	beq.n	800666e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3314      	adds	r3, #20
 80065f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006616:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800661a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800662e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1d9      	bne.n	80065ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006642:	4a7e      	ldr	r2, [pc, #504]	; (800683c <HAL_UART_IRQHandler+0x3e0>)
 8006644:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664a:	4618      	mov	r0, r3
 800664c:	f7fb ff46 	bl	80024dc <HAL_DMA_Abort_IT>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006660:	4610      	mov	r0, r2
 8006662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	e00e      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f99c 	bl	80069a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	e00a      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f998 	bl	80069a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	e006      	b.n	8006684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f994 	bl	80069a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006682:	e175      	b.n	8006970 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	bf00      	nop
    return;
 8006686:	e173      	b.n	8006970 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 814f 	bne.w	8006930 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006696:	f003 0310 	and.w	r3, r3, #16
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8148 	beq.w	8006930 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8141 	beq.w	8006930 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80b6 	beq.w	8006840 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 8145 	beq.w	8006974 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066f2:	429a      	cmp	r2, r3
 80066f4:	f080 813e 	bcs.w	8006974 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b20      	cmp	r3, #32
 8006708:	f000 8088 	beq.w	800681c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006726:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800672a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	330c      	adds	r3, #12
 8006734:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006738:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800673c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006744:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006750:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1d9      	bne.n	800670c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3314      	adds	r3, #20
 800675e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006762:	e853 3f00 	ldrex	r3, [r3]
 8006766:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006768:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800677c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006780:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006784:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800678e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e1      	bne.n	8006758 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3314      	adds	r3, #20
 800679a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3314      	adds	r3, #20
 80067b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e3      	bne.n	8006794 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	330c      	adds	r3, #12
 80067e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ec:	f023 0310 	bic.w	r3, r3, #16
 80067f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006800:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006804:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800680c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e3      	bne.n	80067da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	4618      	mov	r0, r3
 8006818:	f7fb fe24 	bl	8002464 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800682a:	b29b      	uxth	r3, r3
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	b29b      	uxth	r3, r3
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f8bf 	bl	80069b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006838:	e09c      	b.n	8006974 <HAL_UART_IRQHandler+0x518>
 800683a:	bf00      	nop
 800683c:	08006a91 	.word	0x08006a91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006848:	b29b      	uxth	r3, r3
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 808e 	beq.w	8006978 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800685c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8089 	beq.w	8006978 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	330c      	adds	r3, #12
 800686c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800687c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	330c      	adds	r3, #12
 8006886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800688a:	647a      	str	r2, [r7, #68]	; 0x44
 800688c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e3      	bne.n	8006866 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3314      	adds	r3, #20
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	623b      	str	r3, [r7, #32]
   return(result);
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3314      	adds	r3, #20
 80068be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068c2:	633a      	str	r2, [r7, #48]	; 0x30
 80068c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e3      	bne.n	800689e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0310 	bic.w	r3, r3, #16
 80068fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006908:	61fa      	str	r2, [r7, #28]
 800690a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	69b9      	ldr	r1, [r7, #24]
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	617b      	str	r3, [r7, #20]
   return(result);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e3      	bne.n	80068e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006922:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f844 	bl	80069b6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800692e:	e023      	b.n	8006978 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006938:	2b00      	cmp	r3, #0
 800693a:	d009      	beq.n	8006950 <HAL_UART_IRQHandler+0x4f4>
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f8b5 	bl	8006ab8 <UART_Transmit_IT>
    return;
 800694e:	e014      	b.n	800697a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <HAL_UART_IRQHandler+0x51e>
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f8f4 	bl	8006b56 <UART_EndTransmit_IT>
    return;
 800696e:	e004      	b.n	800697a <HAL_UART_IRQHandler+0x51e>
    return;
 8006970:	bf00      	nop
 8006972:	e002      	b.n	800697a <HAL_UART_IRQHandler+0x51e>
      return;
 8006974:	bf00      	nop
 8006976:	e000      	b.n	800697a <HAL_UART_IRQHandler+0x51e>
      return;
 8006978:	bf00      	nop
  }
}
 800697a:	37e8      	adds	r7, #232	; 0xe8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b095      	sub	sp, #84	; 0x54
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069de:	e853 3f00 	ldrex	r3, [r3]
 80069e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069f4:	643a      	str	r2, [r7, #64]	; 0x40
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e5      	bne.n	80069d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3314      	adds	r3, #20
 8006a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3314      	adds	r3, #20
 8006a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e5      	bne.n	8006a08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d119      	bne.n	8006a78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	e853 3f00 	ldrex	r3, [r3]
 8006a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 0310 	bic.w	r3, r3, #16
 8006a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a64:	61ba      	str	r2, [r7, #24]
 8006a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	6979      	ldr	r1, [r7, #20]
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	613b      	str	r3, [r7, #16]
   return(result);
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e5      	bne.n	8006a44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a86:	bf00      	nop
 8006a88:	3754      	adds	r7, #84	; 0x54
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f7ff ff7a 	bl	80069a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b21      	cmp	r3, #33	; 0x21
 8006aca:	d13e      	bne.n	8006b4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad4:	d114      	bne.n	8006b00 <UART_Transmit_IT+0x48>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d110      	bne.n	8006b00 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	1c9a      	adds	r2, r3, #2
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]
 8006afe:	e008      	b.n	8006b12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	1c59      	adds	r1, r3, #1
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6211      	str	r1, [r2, #32]
 8006b0a:	781a      	ldrb	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4619      	mov	r1, r3
 8006b20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10f      	bne.n	8006b46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68da      	ldr	r2, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e000      	b.n	8006b4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr

08006b56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff02 	bl	8006980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b08c      	sub	sp, #48	; 0x30
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b22      	cmp	r3, #34	; 0x22
 8006b98:	f040 80ae 	bne.w	8006cf8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba4:	d117      	bne.n	8006bd6 <UART_Receive_IT+0x50>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d113      	bne.n	8006bd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	1c9a      	adds	r2, r3, #2
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8006bd4:	e026      	b.n	8006c24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be8:	d007      	beq.n	8006bfa <UART_Receive_IT+0x74>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <UART_Receive_IT+0x82>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	e008      	b.n	8006c1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4619      	mov	r1, r3
 8006c32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d15d      	bne.n	8006cf4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0220 	bic.w	r2, r2, #32
 8006c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d135      	bne.n	8006cea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f023 0310 	bic.w	r3, r3, #16
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca4:	623a      	str	r2, [r7, #32]
 8006ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	69f9      	ldr	r1, [r7, #28]
 8006caa:	6a3a      	ldr	r2, [r7, #32]
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e5      	bne.n	8006c84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0310 	and.w	r3, r3, #16
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d10a      	bne.n	8006cdc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff fe67 	bl	80069b6 <HAL_UARTEx_RxEventCallback>
 8006ce8:	e002      	b.n	8006cf0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fe51 	bl	8006992 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e002      	b.n	8006cfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	e000      	b.n	8006cfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
  }
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3730      	adds	r7, #48	; 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006d3e:	f023 030c 	bic.w	r3, r3, #12
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6812      	ldr	r2, [r2, #0]
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a2c      	ldr	r2, [pc, #176]	; (8006e18 <UART_SetConfig+0x114>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d103      	bne.n	8006d74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d6c:	f7fe fe40 	bl	80059f0 <HAL_RCC_GetPCLK2Freq>
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	e002      	b.n	8006d7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d74:	f7fe fe28 	bl	80059c8 <HAL_RCC_GetPCLK1Freq>
 8006d78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009a      	lsls	r2, r3, #2
 8006d84:	441a      	add	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	4a22      	ldr	r2, [pc, #136]	; (8006e1c <UART_SetConfig+0x118>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	0119      	lsls	r1, r3, #4
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009a      	lsls	r2, r3, #2
 8006da4:	441a      	add	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8006db0:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <UART_SetConfig+0x118>)
 8006db2:	fba3 0302 	umull	r0, r3, r3, r2
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2064      	movs	r0, #100	; 0x64
 8006dba:	fb00 f303 	mul.w	r3, r0, r3
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	3332      	adds	r3, #50	; 0x32
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <UART_SetConfig+0x118>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd0:	4419      	add	r1, r3
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009a      	lsls	r2, r3, #2
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006de8:	4b0c      	ldr	r3, [pc, #48]	; (8006e1c <UART_SetConfig+0x118>)
 8006dea:	fba3 0302 	umull	r0, r3, r3, r2
 8006dee:	095b      	lsrs	r3, r3, #5
 8006df0:	2064      	movs	r0, #100	; 0x64
 8006df2:	fb00 f303 	mul.w	r3, r0, r3
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	3332      	adds	r3, #50	; 0x32
 8006dfc:	4a07      	ldr	r2, [pc, #28]	; (8006e1c <UART_SetConfig+0x118>)
 8006dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	f003 020f 	and.w	r2, r3, #15
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40013800 	.word	0x40013800
 8006e1c:	51eb851f 	.word	0x51eb851f

08006e20 <__errno>:
 8006e20:	4b01      	ldr	r3, [pc, #4]	; (8006e28 <__errno+0x8>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	2000000c 	.word	0x2000000c

08006e2c <__libc_init_array>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	2600      	movs	r6, #0
 8006e30:	4d0c      	ldr	r5, [pc, #48]	; (8006e64 <__libc_init_array+0x38>)
 8006e32:	4c0d      	ldr	r4, [pc, #52]	; (8006e68 <__libc_init_array+0x3c>)
 8006e34:	1b64      	subs	r4, r4, r5
 8006e36:	10a4      	asrs	r4, r4, #2
 8006e38:	42a6      	cmp	r6, r4
 8006e3a:	d109      	bne.n	8006e50 <__libc_init_array+0x24>
 8006e3c:	f002 fd30 	bl	80098a0 <_init>
 8006e40:	2600      	movs	r6, #0
 8006e42:	4d0a      	ldr	r5, [pc, #40]	; (8006e6c <__libc_init_array+0x40>)
 8006e44:	4c0a      	ldr	r4, [pc, #40]	; (8006e70 <__libc_init_array+0x44>)
 8006e46:	1b64      	subs	r4, r4, r5
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	d105      	bne.n	8006e5a <__libc_init_array+0x2e>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e54:	4798      	blx	r3
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7ee      	b.n	8006e38 <__libc_init_array+0xc>
 8006e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5e:	4798      	blx	r3
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7f2      	b.n	8006e4a <__libc_init_array+0x1e>
 8006e64:	08009eac 	.word	0x08009eac
 8006e68:	08009eac 	.word	0x08009eac
 8006e6c:	08009eac 	.word	0x08009eac
 8006e70:	08009eb0 	.word	0x08009eb0

08006e74 <memset>:
 8006e74:	4603      	mov	r3, r0
 8006e76:	4402      	add	r2, r0
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d100      	bne.n	8006e7e <memset+0xa>
 8006e7c:	4770      	bx	lr
 8006e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e82:	e7f9      	b.n	8006e78 <memset+0x4>

08006e84 <__cvt>:
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e8a:	461f      	mov	r7, r3
 8006e8c:	bfbb      	ittet	lt
 8006e8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006e92:	461f      	movlt	r7, r3
 8006e94:	2300      	movge	r3, #0
 8006e96:	232d      	movlt	r3, #45	; 0x2d
 8006e98:	b088      	sub	sp, #32
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ea0:	7013      	strb	r3, [r2, #0]
 8006ea2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006ea4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006ea8:	f023 0820 	bic.w	r8, r3, #32
 8006eac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006eb0:	d005      	beq.n	8006ebe <__cvt+0x3a>
 8006eb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006eb6:	d100      	bne.n	8006eba <__cvt+0x36>
 8006eb8:	3501      	adds	r5, #1
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e000      	b.n	8006ec0 <__cvt+0x3c>
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	aa07      	add	r2, sp, #28
 8006ec2:	9204      	str	r2, [sp, #16]
 8006ec4:	aa06      	add	r2, sp, #24
 8006ec6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006eca:	e9cd 3500 	strd	r3, r5, [sp]
 8006ece:	4622      	mov	r2, r4
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	f000 fcc5 	bl	8007860 <_dtoa_r>
 8006ed6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006eda:	4606      	mov	r6, r0
 8006edc:	d102      	bne.n	8006ee4 <__cvt+0x60>
 8006ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ee0:	07db      	lsls	r3, r3, #31
 8006ee2:	d522      	bpl.n	8006f2a <__cvt+0xa6>
 8006ee4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ee8:	eb06 0905 	add.w	r9, r6, r5
 8006eec:	d110      	bne.n	8006f10 <__cvt+0x8c>
 8006eee:	7833      	ldrb	r3, [r6, #0]
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	d10a      	bne.n	8006f0a <__cvt+0x86>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 fd54 	bl	80009a8 <__aeabi_dcmpeq>
 8006f00:	b918      	cbnz	r0, 8006f0a <__cvt+0x86>
 8006f02:	f1c5 0501 	rsb	r5, r5, #1
 8006f06:	f8ca 5000 	str.w	r5, [sl]
 8006f0a:	f8da 3000 	ldr.w	r3, [sl]
 8006f0e:	4499      	add	r9, r3
 8006f10:	2200      	movs	r2, #0
 8006f12:	2300      	movs	r3, #0
 8006f14:	4620      	mov	r0, r4
 8006f16:	4639      	mov	r1, r7
 8006f18:	f7f9 fd46 	bl	80009a8 <__aeabi_dcmpeq>
 8006f1c:	b108      	cbz	r0, 8006f22 <__cvt+0x9e>
 8006f1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f22:	2230      	movs	r2, #48	; 0x30
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	454b      	cmp	r3, r9
 8006f28:	d307      	bcc.n	8006f3a <__cvt+0xb6>
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	9b07      	ldr	r3, [sp, #28]
 8006f2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f30:	1b9b      	subs	r3, r3, r6
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	b008      	add	sp, #32
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	9107      	str	r1, [sp, #28]
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	e7f0      	b.n	8006f24 <__cvt+0xa0>

08006f42 <__exponent>:
 8006f42:	4603      	mov	r3, r0
 8006f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f46:	2900      	cmp	r1, #0
 8006f48:	f803 2b02 	strb.w	r2, [r3], #2
 8006f4c:	bfb6      	itet	lt
 8006f4e:	222d      	movlt	r2, #45	; 0x2d
 8006f50:	222b      	movge	r2, #43	; 0x2b
 8006f52:	4249      	neglt	r1, r1
 8006f54:	2909      	cmp	r1, #9
 8006f56:	7042      	strb	r2, [r0, #1]
 8006f58:	dd2b      	ble.n	8006fb2 <__exponent+0x70>
 8006f5a:	f10d 0407 	add.w	r4, sp, #7
 8006f5e:	46a4      	mov	ip, r4
 8006f60:	270a      	movs	r7, #10
 8006f62:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f66:	460a      	mov	r2, r1
 8006f68:	46a6      	mov	lr, r4
 8006f6a:	fb07 1516 	mls	r5, r7, r6, r1
 8006f6e:	2a63      	cmp	r2, #99	; 0x63
 8006f70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006f74:	4631      	mov	r1, r6
 8006f76:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f7e:	dcf0      	bgt.n	8006f62 <__exponent+0x20>
 8006f80:	3130      	adds	r1, #48	; 0x30
 8006f82:	f1ae 0502 	sub.w	r5, lr, #2
 8006f86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	1c44      	adds	r4, r0, #1
 8006f8e:	4561      	cmp	r1, ip
 8006f90:	d30a      	bcc.n	8006fa8 <__exponent+0x66>
 8006f92:	f10d 0209 	add.w	r2, sp, #9
 8006f96:	eba2 020e 	sub.w	r2, r2, lr
 8006f9a:	4565      	cmp	r5, ip
 8006f9c:	bf88      	it	hi
 8006f9e:	2200      	movhi	r2, #0
 8006fa0:	4413      	add	r3, r2
 8006fa2:	1a18      	subs	r0, r3, r0
 8006fa4:	b003      	add	sp, #12
 8006fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fb0:	e7ed      	b.n	8006f8e <__exponent+0x4c>
 8006fb2:	2330      	movs	r3, #48	; 0x30
 8006fb4:	3130      	adds	r1, #48	; 0x30
 8006fb6:	7083      	strb	r3, [r0, #2]
 8006fb8:	70c1      	strb	r1, [r0, #3]
 8006fba:	1d03      	adds	r3, r0, #4
 8006fbc:	e7f1      	b.n	8006fa2 <__exponent+0x60>
	...

08006fc0 <_printf_float>:
 8006fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	b091      	sub	sp, #68	; 0x44
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006fcc:	4616      	mov	r6, r2
 8006fce:	461f      	mov	r7, r3
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	f001 fa33 	bl	800843c <_localeconv_r>
 8006fd6:	6803      	ldr	r3, [r0, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	9309      	str	r3, [sp, #36]	; 0x24
 8006fdc:	f7f9 f8b8 	bl	8000150 <strlen>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8006fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fe8:	900a      	str	r0, [sp, #40]	; 0x28
 8006fea:	3307      	adds	r3, #7
 8006fec:	f023 0307 	bic.w	r3, r3, #7
 8006ff0:	f103 0208 	add.w	r2, r3, #8
 8006ff4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ff8:	f8d4 b000 	ldr.w	fp, [r4]
 8006ffc:	f8c8 2000 	str.w	r2, [r8]
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007008:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800700c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007010:	930b      	str	r3, [sp, #44]	; 0x2c
 8007012:	f04f 32ff 	mov.w	r2, #4294967295
 8007016:	4640      	mov	r0, r8
 8007018:	4b9c      	ldr	r3, [pc, #624]	; (800728c <_printf_float+0x2cc>)
 800701a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800701c:	f7f9 fcf6 	bl	8000a0c <__aeabi_dcmpun>
 8007020:	bb70      	cbnz	r0, 8007080 <_printf_float+0xc0>
 8007022:	f04f 32ff 	mov.w	r2, #4294967295
 8007026:	4640      	mov	r0, r8
 8007028:	4b98      	ldr	r3, [pc, #608]	; (800728c <_printf_float+0x2cc>)
 800702a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800702c:	f7f9 fcd0 	bl	80009d0 <__aeabi_dcmple>
 8007030:	bb30      	cbnz	r0, 8007080 <_printf_float+0xc0>
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	4640      	mov	r0, r8
 8007038:	4651      	mov	r1, sl
 800703a:	f7f9 fcbf 	bl	80009bc <__aeabi_dcmplt>
 800703e:	b110      	cbz	r0, 8007046 <_printf_float+0x86>
 8007040:	232d      	movs	r3, #45	; 0x2d
 8007042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007046:	4b92      	ldr	r3, [pc, #584]	; (8007290 <_printf_float+0x2d0>)
 8007048:	4892      	ldr	r0, [pc, #584]	; (8007294 <_printf_float+0x2d4>)
 800704a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800704e:	bf94      	ite	ls
 8007050:	4698      	movls	r8, r3
 8007052:	4680      	movhi	r8, r0
 8007054:	2303      	movs	r3, #3
 8007056:	f04f 0a00 	mov.w	sl, #0
 800705a:	6123      	str	r3, [r4, #16]
 800705c:	f02b 0304 	bic.w	r3, fp, #4
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	4633      	mov	r3, r6
 8007064:	4621      	mov	r1, r4
 8007066:	4628      	mov	r0, r5
 8007068:	9700      	str	r7, [sp, #0]
 800706a:	aa0f      	add	r2, sp, #60	; 0x3c
 800706c:	f000 f9d4 	bl	8007418 <_printf_common>
 8007070:	3001      	adds	r0, #1
 8007072:	f040 8090 	bne.w	8007196 <_printf_float+0x1d6>
 8007076:	f04f 30ff 	mov.w	r0, #4294967295
 800707a:	b011      	add	sp, #68	; 0x44
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007080:	4642      	mov	r2, r8
 8007082:	4653      	mov	r3, sl
 8007084:	4640      	mov	r0, r8
 8007086:	4651      	mov	r1, sl
 8007088:	f7f9 fcc0 	bl	8000a0c <__aeabi_dcmpun>
 800708c:	b148      	cbz	r0, 80070a2 <_printf_float+0xe2>
 800708e:	f1ba 0f00 	cmp.w	sl, #0
 8007092:	bfb8      	it	lt
 8007094:	232d      	movlt	r3, #45	; 0x2d
 8007096:	4880      	ldr	r0, [pc, #512]	; (8007298 <_printf_float+0x2d8>)
 8007098:	bfb8      	it	lt
 800709a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800709e:	4b7f      	ldr	r3, [pc, #508]	; (800729c <_printf_float+0x2dc>)
 80070a0:	e7d3      	b.n	800704a <_printf_float+0x8a>
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	d142      	bne.n	8007132 <_printf_float+0x172>
 80070ac:	2306      	movs	r3, #6
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	9206      	str	r2, [sp, #24]
 80070b4:	aa0e      	add	r2, sp, #56	; 0x38
 80070b6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80070ba:	aa0d      	add	r2, sp, #52	; 0x34
 80070bc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80070c0:	9203      	str	r2, [sp, #12]
 80070c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80070c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	6863      	ldr	r3, [r4, #4]
 80070ce:	4642      	mov	r2, r8
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	4628      	mov	r0, r5
 80070d4:	4653      	mov	r3, sl
 80070d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80070d8:	f7ff fed4 	bl	8006e84 <__cvt>
 80070dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070de:	4680      	mov	r8, r0
 80070e0:	2947      	cmp	r1, #71	; 0x47
 80070e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80070e4:	d108      	bne.n	80070f8 <_printf_float+0x138>
 80070e6:	1cc8      	adds	r0, r1, #3
 80070e8:	db02      	blt.n	80070f0 <_printf_float+0x130>
 80070ea:	6863      	ldr	r3, [r4, #4]
 80070ec:	4299      	cmp	r1, r3
 80070ee:	dd40      	ble.n	8007172 <_printf_float+0x1b2>
 80070f0:	f1a9 0902 	sub.w	r9, r9, #2
 80070f4:	fa5f f989 	uxtb.w	r9, r9
 80070f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070fc:	d81f      	bhi.n	800713e <_printf_float+0x17e>
 80070fe:	464a      	mov	r2, r9
 8007100:	3901      	subs	r1, #1
 8007102:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007106:	910d      	str	r1, [sp, #52]	; 0x34
 8007108:	f7ff ff1b 	bl	8006f42 <__exponent>
 800710c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800710e:	4682      	mov	sl, r0
 8007110:	1813      	adds	r3, r2, r0
 8007112:	2a01      	cmp	r2, #1
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	dc02      	bgt.n	800711e <_printf_float+0x15e>
 8007118:	6822      	ldr	r2, [r4, #0]
 800711a:	07d2      	lsls	r2, r2, #31
 800711c:	d501      	bpl.n	8007122 <_printf_float+0x162>
 800711e:	3301      	adds	r3, #1
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007126:	2b00      	cmp	r3, #0
 8007128:	d09b      	beq.n	8007062 <_printf_float+0xa2>
 800712a:	232d      	movs	r3, #45	; 0x2d
 800712c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007130:	e797      	b.n	8007062 <_printf_float+0xa2>
 8007132:	2947      	cmp	r1, #71	; 0x47
 8007134:	d1bc      	bne.n	80070b0 <_printf_float+0xf0>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1ba      	bne.n	80070b0 <_printf_float+0xf0>
 800713a:	2301      	movs	r3, #1
 800713c:	e7b7      	b.n	80070ae <_printf_float+0xee>
 800713e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007142:	d118      	bne.n	8007176 <_printf_float+0x1b6>
 8007144:	2900      	cmp	r1, #0
 8007146:	6863      	ldr	r3, [r4, #4]
 8007148:	dd0b      	ble.n	8007162 <_printf_float+0x1a2>
 800714a:	6121      	str	r1, [r4, #16]
 800714c:	b913      	cbnz	r3, 8007154 <_printf_float+0x194>
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	07d0      	lsls	r0, r2, #31
 8007152:	d502      	bpl.n	800715a <_printf_float+0x19a>
 8007154:	3301      	adds	r3, #1
 8007156:	440b      	add	r3, r1
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	f04f 0a00 	mov.w	sl, #0
 800715e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007160:	e7df      	b.n	8007122 <_printf_float+0x162>
 8007162:	b913      	cbnz	r3, 800716a <_printf_float+0x1aa>
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	07d2      	lsls	r2, r2, #31
 8007168:	d501      	bpl.n	800716e <_printf_float+0x1ae>
 800716a:	3302      	adds	r3, #2
 800716c:	e7f4      	b.n	8007158 <_printf_float+0x198>
 800716e:	2301      	movs	r3, #1
 8007170:	e7f2      	b.n	8007158 <_printf_float+0x198>
 8007172:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007178:	4299      	cmp	r1, r3
 800717a:	db05      	blt.n	8007188 <_printf_float+0x1c8>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	6121      	str	r1, [r4, #16]
 8007180:	07d8      	lsls	r0, r3, #31
 8007182:	d5ea      	bpl.n	800715a <_printf_float+0x19a>
 8007184:	1c4b      	adds	r3, r1, #1
 8007186:	e7e7      	b.n	8007158 <_printf_float+0x198>
 8007188:	2900      	cmp	r1, #0
 800718a:	bfcc      	ite	gt
 800718c:	2201      	movgt	r2, #1
 800718e:	f1c1 0202 	rsble	r2, r1, #2
 8007192:	4413      	add	r3, r2
 8007194:	e7e0      	b.n	8007158 <_printf_float+0x198>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	055a      	lsls	r2, r3, #21
 800719a:	d407      	bmi.n	80071ac <_printf_float+0x1ec>
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	4642      	mov	r2, r8
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	d12b      	bne.n	8007202 <_printf_float+0x242>
 80071aa:	e764      	b.n	8007076 <_printf_float+0xb6>
 80071ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80071b0:	f240 80dd 	bls.w	800736e <_printf_float+0x3ae>
 80071b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	f7f9 fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d033      	beq.n	800722c <_printf_float+0x26c>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	4a35      	ldr	r2, [pc, #212]	; (80072a0 <_printf_float+0x2e0>)
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	f43f af51 	beq.w	8007076 <_printf_float+0xb6>
 80071d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071d8:	429a      	cmp	r2, r3
 80071da:	db02      	blt.n	80071e2 <_printf_float+0x222>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	07d8      	lsls	r0, r3, #31
 80071e0:	d50f      	bpl.n	8007202 <_printf_float+0x242>
 80071e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	f43f af42 	beq.w	8007076 <_printf_float+0xb6>
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	f104 091a 	add.w	r9, r4, #26
 80071fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4543      	cmp	r3, r8
 8007200:	dc09      	bgt.n	8007216 <_printf_float+0x256>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	079b      	lsls	r3, r3, #30
 8007206:	f100 8102 	bmi.w	800740e <_printf_float+0x44e>
 800720a:	68e0      	ldr	r0, [r4, #12]
 800720c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800720e:	4298      	cmp	r0, r3
 8007210:	bfb8      	it	lt
 8007212:	4618      	movlt	r0, r3
 8007214:	e731      	b.n	800707a <_printf_float+0xba>
 8007216:	2301      	movs	r3, #1
 8007218:	464a      	mov	r2, r9
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	f43f af28 	beq.w	8007076 <_printf_float+0xb6>
 8007226:	f108 0801 	add.w	r8, r8, #1
 800722a:	e7e6      	b.n	80071fa <_printf_float+0x23a>
 800722c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800722e:	2b00      	cmp	r3, #0
 8007230:	dc38      	bgt.n	80072a4 <_printf_float+0x2e4>
 8007232:	2301      	movs	r3, #1
 8007234:	4631      	mov	r1, r6
 8007236:	4628      	mov	r0, r5
 8007238:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <_printf_float+0x2e0>)
 800723a:	47b8      	blx	r7
 800723c:	3001      	adds	r0, #1
 800723e:	f43f af1a 	beq.w	8007076 <_printf_float+0xb6>
 8007242:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007246:	4313      	orrs	r3, r2
 8007248:	d102      	bne.n	8007250 <_printf_float+0x290>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	07d9      	lsls	r1, r3, #31
 800724e:	d5d8      	bpl.n	8007202 <_printf_float+0x242>
 8007250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007254:	4631      	mov	r1, r6
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	f43f af0b 	beq.w	8007076 <_printf_float+0xb6>
 8007260:	f04f 0900 	mov.w	r9, #0
 8007264:	f104 0a1a 	add.w	sl, r4, #26
 8007268:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800726a:	425b      	negs	r3, r3
 800726c:	454b      	cmp	r3, r9
 800726e:	dc01      	bgt.n	8007274 <_printf_float+0x2b4>
 8007270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007272:	e794      	b.n	800719e <_printf_float+0x1de>
 8007274:	2301      	movs	r3, #1
 8007276:	4652      	mov	r2, sl
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f aef9 	beq.w	8007076 <_printf_float+0xb6>
 8007284:	f109 0901 	add.w	r9, r9, #1
 8007288:	e7ee      	b.n	8007268 <_printf_float+0x2a8>
 800728a:	bf00      	nop
 800728c:	7fefffff 	.word	0x7fefffff
 8007290:	08009ad4 	.word	0x08009ad4
 8007294:	08009ad8 	.word	0x08009ad8
 8007298:	08009ae0 	.word	0x08009ae0
 800729c:	08009adc 	.word	0x08009adc
 80072a0:	08009ae4 	.word	0x08009ae4
 80072a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072a8:	429a      	cmp	r2, r3
 80072aa:	bfa8      	it	ge
 80072ac:	461a      	movge	r2, r3
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	4691      	mov	r9, r2
 80072b2:	dc37      	bgt.n	8007324 <_printf_float+0x364>
 80072b4:	f04f 0b00 	mov.w	fp, #0
 80072b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072bc:	f104 021a 	add.w	r2, r4, #26
 80072c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80072c4:	ebaa 0309 	sub.w	r3, sl, r9
 80072c8:	455b      	cmp	r3, fp
 80072ca:	dc33      	bgt.n	8007334 <_printf_float+0x374>
 80072cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072d0:	429a      	cmp	r2, r3
 80072d2:	db3b      	blt.n	800734c <_printf_float+0x38c>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	07da      	lsls	r2, r3, #31
 80072d8:	d438      	bmi.n	800734c <_printf_float+0x38c>
 80072da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80072de:	eba3 020a 	sub.w	r2, r3, sl
 80072e2:	eba3 0901 	sub.w	r9, r3, r1
 80072e6:	4591      	cmp	r9, r2
 80072e8:	bfa8      	it	ge
 80072ea:	4691      	movge	r9, r2
 80072ec:	f1b9 0f00 	cmp.w	r9, #0
 80072f0:	dc34      	bgt.n	800735c <_printf_float+0x39c>
 80072f2:	f04f 0800 	mov.w	r8, #0
 80072f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072fa:	f104 0a1a 	add.w	sl, r4, #26
 80072fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	eba3 0309 	sub.w	r3, r3, r9
 8007308:	4543      	cmp	r3, r8
 800730a:	f77f af7a 	ble.w	8007202 <_printf_float+0x242>
 800730e:	2301      	movs	r3, #1
 8007310:	4652      	mov	r2, sl
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	f43f aeac 	beq.w	8007076 <_printf_float+0xb6>
 800731e:	f108 0801 	add.w	r8, r8, #1
 8007322:	e7ec      	b.n	80072fe <_printf_float+0x33e>
 8007324:	4613      	mov	r3, r2
 8007326:	4631      	mov	r1, r6
 8007328:	4642      	mov	r2, r8
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	d1c0      	bne.n	80072b4 <_printf_float+0x2f4>
 8007332:	e6a0      	b.n	8007076 <_printf_float+0xb6>
 8007334:	2301      	movs	r3, #1
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	920b      	str	r2, [sp, #44]	; 0x2c
 800733c:	47b8      	blx	r7
 800733e:	3001      	adds	r0, #1
 8007340:	f43f ae99 	beq.w	8007076 <_printf_float+0xb6>
 8007344:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007346:	f10b 0b01 	add.w	fp, fp, #1
 800734a:	e7b9      	b.n	80072c0 <_printf_float+0x300>
 800734c:	4631      	mov	r1, r6
 800734e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	d1bf      	bne.n	80072da <_printf_float+0x31a>
 800735a:	e68c      	b.n	8007076 <_printf_float+0xb6>
 800735c:	464b      	mov	r3, r9
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	eb08 020a 	add.w	r2, r8, sl
 8007366:	47b8      	blx	r7
 8007368:	3001      	adds	r0, #1
 800736a:	d1c2      	bne.n	80072f2 <_printf_float+0x332>
 800736c:	e683      	b.n	8007076 <_printf_float+0xb6>
 800736e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007370:	2a01      	cmp	r2, #1
 8007372:	dc01      	bgt.n	8007378 <_printf_float+0x3b8>
 8007374:	07db      	lsls	r3, r3, #31
 8007376:	d537      	bpl.n	80073e8 <_printf_float+0x428>
 8007378:	2301      	movs	r3, #1
 800737a:	4642      	mov	r2, r8
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f ae77 	beq.w	8007076 <_printf_float+0xb6>
 8007388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	f43f ae6f 	beq.w	8007076 <_printf_float+0xb6>
 8007398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800739c:	2200      	movs	r2, #0
 800739e:	2300      	movs	r3, #0
 80073a0:	f7f9 fb02 	bl	80009a8 <__aeabi_dcmpeq>
 80073a4:	b9d8      	cbnz	r0, 80073de <_printf_float+0x41e>
 80073a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a8:	f108 0201 	add.w	r2, r8, #1
 80073ac:	3b01      	subs	r3, #1
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	d10e      	bne.n	80073d6 <_printf_float+0x416>
 80073b8:	e65d      	b.n	8007076 <_printf_float+0xb6>
 80073ba:	2301      	movs	r3, #1
 80073bc:	464a      	mov	r2, r9
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f ae56 	beq.w	8007076 <_printf_float+0xb6>
 80073ca:	f108 0801 	add.w	r8, r8, #1
 80073ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073d0:	3b01      	subs	r3, #1
 80073d2:	4543      	cmp	r3, r8
 80073d4:	dcf1      	bgt.n	80073ba <_printf_float+0x3fa>
 80073d6:	4653      	mov	r3, sl
 80073d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073dc:	e6e0      	b.n	80071a0 <_printf_float+0x1e0>
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	f104 091a 	add.w	r9, r4, #26
 80073e6:	e7f2      	b.n	80073ce <_printf_float+0x40e>
 80073e8:	2301      	movs	r3, #1
 80073ea:	4642      	mov	r2, r8
 80073ec:	e7df      	b.n	80073ae <_printf_float+0x3ee>
 80073ee:	2301      	movs	r3, #1
 80073f0:	464a      	mov	r2, r9
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f ae3c 	beq.w	8007076 <_printf_float+0xb6>
 80073fe:	f108 0801 	add.w	r8, r8, #1
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007406:	1a5b      	subs	r3, r3, r1
 8007408:	4543      	cmp	r3, r8
 800740a:	dcf0      	bgt.n	80073ee <_printf_float+0x42e>
 800740c:	e6fd      	b.n	800720a <_printf_float+0x24a>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	f104 0919 	add.w	r9, r4, #25
 8007416:	e7f4      	b.n	8007402 <_printf_float+0x442>

08007418 <_printf_common>:
 8007418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800741c:	4616      	mov	r6, r2
 800741e:	4699      	mov	r9, r3
 8007420:	688a      	ldr	r2, [r1, #8]
 8007422:	690b      	ldr	r3, [r1, #16]
 8007424:	4607      	mov	r7, r0
 8007426:	4293      	cmp	r3, r2
 8007428:	bfb8      	it	lt
 800742a:	4613      	movlt	r3, r2
 800742c:	6033      	str	r3, [r6, #0]
 800742e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007432:	460c      	mov	r4, r1
 8007434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007438:	b10a      	cbz	r2, 800743e <_printf_common+0x26>
 800743a:	3301      	adds	r3, #1
 800743c:	6033      	str	r3, [r6, #0]
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	0699      	lsls	r1, r3, #26
 8007442:	bf42      	ittt	mi
 8007444:	6833      	ldrmi	r3, [r6, #0]
 8007446:	3302      	addmi	r3, #2
 8007448:	6033      	strmi	r3, [r6, #0]
 800744a:	6825      	ldr	r5, [r4, #0]
 800744c:	f015 0506 	ands.w	r5, r5, #6
 8007450:	d106      	bne.n	8007460 <_printf_common+0x48>
 8007452:	f104 0a19 	add.w	sl, r4, #25
 8007456:	68e3      	ldr	r3, [r4, #12]
 8007458:	6832      	ldr	r2, [r6, #0]
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	42ab      	cmp	r3, r5
 800745e:	dc28      	bgt.n	80074b2 <_printf_common+0x9a>
 8007460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007464:	1e13      	subs	r3, r2, #0
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	bf18      	it	ne
 800746a:	2301      	movne	r3, #1
 800746c:	0692      	lsls	r2, r2, #26
 800746e:	d42d      	bmi.n	80074cc <_printf_common+0xb4>
 8007470:	4649      	mov	r1, r9
 8007472:	4638      	mov	r0, r7
 8007474:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007478:	47c0      	blx	r8
 800747a:	3001      	adds	r0, #1
 800747c:	d020      	beq.n	80074c0 <_printf_common+0xa8>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	68e5      	ldr	r5, [r4, #12]
 8007482:	f003 0306 	and.w	r3, r3, #6
 8007486:	2b04      	cmp	r3, #4
 8007488:	bf18      	it	ne
 800748a:	2500      	movne	r5, #0
 800748c:	6832      	ldr	r2, [r6, #0]
 800748e:	f04f 0600 	mov.w	r6, #0
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	bf08      	it	eq
 8007496:	1aad      	subeq	r5, r5, r2
 8007498:	6922      	ldr	r2, [r4, #16]
 800749a:	bf08      	it	eq
 800749c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bfc4      	itt	gt
 80074a4:	1a9b      	subgt	r3, r3, r2
 80074a6:	18ed      	addgt	r5, r5, r3
 80074a8:	341a      	adds	r4, #26
 80074aa:	42b5      	cmp	r5, r6
 80074ac:	d11a      	bne.n	80074e4 <_printf_common+0xcc>
 80074ae:	2000      	movs	r0, #0
 80074b0:	e008      	b.n	80074c4 <_printf_common+0xac>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4652      	mov	r2, sl
 80074b6:	4649      	mov	r1, r9
 80074b8:	4638      	mov	r0, r7
 80074ba:	47c0      	blx	r8
 80074bc:	3001      	adds	r0, #1
 80074be:	d103      	bne.n	80074c8 <_printf_common+0xb0>
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c8:	3501      	adds	r5, #1
 80074ca:	e7c4      	b.n	8007456 <_printf_common+0x3e>
 80074cc:	2030      	movs	r0, #48	; 0x30
 80074ce:	18e1      	adds	r1, r4, r3
 80074d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074da:	4422      	add	r2, r4
 80074dc:	3302      	adds	r3, #2
 80074de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074e2:	e7c5      	b.n	8007470 <_printf_common+0x58>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4622      	mov	r2, r4
 80074e8:	4649      	mov	r1, r9
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c0      	blx	r8
 80074ee:	3001      	adds	r0, #1
 80074f0:	d0e6      	beq.n	80074c0 <_printf_common+0xa8>
 80074f2:	3601      	adds	r6, #1
 80074f4:	e7d9      	b.n	80074aa <_printf_common+0x92>
	...

080074f8 <_printf_i>:
 80074f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	7e0f      	ldrb	r7, [r1, #24]
 80074fe:	4691      	mov	r9, r2
 8007500:	2f78      	cmp	r7, #120	; 0x78
 8007502:	4680      	mov	r8, r0
 8007504:	460c      	mov	r4, r1
 8007506:	469a      	mov	sl, r3
 8007508:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800750a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800750e:	d807      	bhi.n	8007520 <_printf_i+0x28>
 8007510:	2f62      	cmp	r7, #98	; 0x62
 8007512:	d80a      	bhi.n	800752a <_printf_i+0x32>
 8007514:	2f00      	cmp	r7, #0
 8007516:	f000 80d9 	beq.w	80076cc <_printf_i+0x1d4>
 800751a:	2f58      	cmp	r7, #88	; 0x58
 800751c:	f000 80a4 	beq.w	8007668 <_printf_i+0x170>
 8007520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007524:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007528:	e03a      	b.n	80075a0 <_printf_i+0xa8>
 800752a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800752e:	2b15      	cmp	r3, #21
 8007530:	d8f6      	bhi.n	8007520 <_printf_i+0x28>
 8007532:	a101      	add	r1, pc, #4	; (adr r1, 8007538 <_printf_i+0x40>)
 8007534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007538:	08007591 	.word	0x08007591
 800753c:	080075a5 	.word	0x080075a5
 8007540:	08007521 	.word	0x08007521
 8007544:	08007521 	.word	0x08007521
 8007548:	08007521 	.word	0x08007521
 800754c:	08007521 	.word	0x08007521
 8007550:	080075a5 	.word	0x080075a5
 8007554:	08007521 	.word	0x08007521
 8007558:	08007521 	.word	0x08007521
 800755c:	08007521 	.word	0x08007521
 8007560:	08007521 	.word	0x08007521
 8007564:	080076b3 	.word	0x080076b3
 8007568:	080075d5 	.word	0x080075d5
 800756c:	08007695 	.word	0x08007695
 8007570:	08007521 	.word	0x08007521
 8007574:	08007521 	.word	0x08007521
 8007578:	080076d5 	.word	0x080076d5
 800757c:	08007521 	.word	0x08007521
 8007580:	080075d5 	.word	0x080075d5
 8007584:	08007521 	.word	0x08007521
 8007588:	08007521 	.word	0x08007521
 800758c:	0800769d 	.word	0x0800769d
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	1d1a      	adds	r2, r3, #4
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	602a      	str	r2, [r5, #0]
 8007598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800759c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075a0:	2301      	movs	r3, #1
 80075a2:	e0a4      	b.n	80076ee <_printf_i+0x1f6>
 80075a4:	6820      	ldr	r0, [r4, #0]
 80075a6:	6829      	ldr	r1, [r5, #0]
 80075a8:	0606      	lsls	r6, r0, #24
 80075aa:	f101 0304 	add.w	r3, r1, #4
 80075ae:	d50a      	bpl.n	80075c6 <_printf_i+0xce>
 80075b0:	680e      	ldr	r6, [r1, #0]
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	2e00      	cmp	r6, #0
 80075b6:	da03      	bge.n	80075c0 <_printf_i+0xc8>
 80075b8:	232d      	movs	r3, #45	; 0x2d
 80075ba:	4276      	negs	r6, r6
 80075bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c0:	230a      	movs	r3, #10
 80075c2:	485e      	ldr	r0, [pc, #376]	; (800773c <_printf_i+0x244>)
 80075c4:	e019      	b.n	80075fa <_printf_i+0x102>
 80075c6:	680e      	ldr	r6, [r1, #0]
 80075c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	bf18      	it	ne
 80075d0:	b236      	sxthne	r6, r6
 80075d2:	e7ef      	b.n	80075b4 <_printf_i+0xbc>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	1d19      	adds	r1, r3, #4
 80075da:	6029      	str	r1, [r5, #0]
 80075dc:	0601      	lsls	r1, r0, #24
 80075de:	d501      	bpl.n	80075e4 <_printf_i+0xec>
 80075e0:	681e      	ldr	r6, [r3, #0]
 80075e2:	e002      	b.n	80075ea <_printf_i+0xf2>
 80075e4:	0646      	lsls	r6, r0, #25
 80075e6:	d5fb      	bpl.n	80075e0 <_printf_i+0xe8>
 80075e8:	881e      	ldrh	r6, [r3, #0]
 80075ea:	2f6f      	cmp	r7, #111	; 0x6f
 80075ec:	bf0c      	ite	eq
 80075ee:	2308      	moveq	r3, #8
 80075f0:	230a      	movne	r3, #10
 80075f2:	4852      	ldr	r0, [pc, #328]	; (800773c <_printf_i+0x244>)
 80075f4:	2100      	movs	r1, #0
 80075f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075fa:	6865      	ldr	r5, [r4, #4]
 80075fc:	2d00      	cmp	r5, #0
 80075fe:	bfa8      	it	ge
 8007600:	6821      	ldrge	r1, [r4, #0]
 8007602:	60a5      	str	r5, [r4, #8]
 8007604:	bfa4      	itt	ge
 8007606:	f021 0104 	bicge.w	r1, r1, #4
 800760a:	6021      	strge	r1, [r4, #0]
 800760c:	b90e      	cbnz	r6, 8007612 <_printf_i+0x11a>
 800760e:	2d00      	cmp	r5, #0
 8007610:	d04d      	beq.n	80076ae <_printf_i+0x1b6>
 8007612:	4615      	mov	r5, r2
 8007614:	fbb6 f1f3 	udiv	r1, r6, r3
 8007618:	fb03 6711 	mls	r7, r3, r1, r6
 800761c:	5dc7      	ldrb	r7, [r0, r7]
 800761e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007622:	4637      	mov	r7, r6
 8007624:	42bb      	cmp	r3, r7
 8007626:	460e      	mov	r6, r1
 8007628:	d9f4      	bls.n	8007614 <_printf_i+0x11c>
 800762a:	2b08      	cmp	r3, #8
 800762c:	d10b      	bne.n	8007646 <_printf_i+0x14e>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	07de      	lsls	r6, r3, #31
 8007632:	d508      	bpl.n	8007646 <_printf_i+0x14e>
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	6861      	ldr	r1, [r4, #4]
 8007638:	4299      	cmp	r1, r3
 800763a:	bfde      	ittt	le
 800763c:	2330      	movle	r3, #48	; 0x30
 800763e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007642:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007646:	1b52      	subs	r2, r2, r5
 8007648:	6122      	str	r2, [r4, #16]
 800764a:	464b      	mov	r3, r9
 800764c:	4621      	mov	r1, r4
 800764e:	4640      	mov	r0, r8
 8007650:	f8cd a000 	str.w	sl, [sp]
 8007654:	aa03      	add	r2, sp, #12
 8007656:	f7ff fedf 	bl	8007418 <_printf_common>
 800765a:	3001      	adds	r0, #1
 800765c:	d14c      	bne.n	80076f8 <_printf_i+0x200>
 800765e:	f04f 30ff 	mov.w	r0, #4294967295
 8007662:	b004      	add	sp, #16
 8007664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007668:	4834      	ldr	r0, [pc, #208]	; (800773c <_printf_i+0x244>)
 800766a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800766e:	6829      	ldr	r1, [r5, #0]
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	f851 6b04 	ldr.w	r6, [r1], #4
 8007676:	6029      	str	r1, [r5, #0]
 8007678:	061d      	lsls	r5, r3, #24
 800767a:	d514      	bpl.n	80076a6 <_printf_i+0x1ae>
 800767c:	07df      	lsls	r7, r3, #31
 800767e:	bf44      	itt	mi
 8007680:	f043 0320 	orrmi.w	r3, r3, #32
 8007684:	6023      	strmi	r3, [r4, #0]
 8007686:	b91e      	cbnz	r6, 8007690 <_printf_i+0x198>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	f023 0320 	bic.w	r3, r3, #32
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	2310      	movs	r3, #16
 8007692:	e7af      	b.n	80075f4 <_printf_i+0xfc>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	f043 0320 	orr.w	r3, r3, #32
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	2378      	movs	r3, #120	; 0x78
 800769e:	4828      	ldr	r0, [pc, #160]	; (8007740 <_printf_i+0x248>)
 80076a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076a4:	e7e3      	b.n	800766e <_printf_i+0x176>
 80076a6:	0659      	lsls	r1, r3, #25
 80076a8:	bf48      	it	mi
 80076aa:	b2b6      	uxthmi	r6, r6
 80076ac:	e7e6      	b.n	800767c <_printf_i+0x184>
 80076ae:	4615      	mov	r5, r2
 80076b0:	e7bb      	b.n	800762a <_printf_i+0x132>
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	6826      	ldr	r6, [r4, #0]
 80076b6:	1d18      	adds	r0, r3, #4
 80076b8:	6961      	ldr	r1, [r4, #20]
 80076ba:	6028      	str	r0, [r5, #0]
 80076bc:	0635      	lsls	r5, r6, #24
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	d501      	bpl.n	80076c6 <_printf_i+0x1ce>
 80076c2:	6019      	str	r1, [r3, #0]
 80076c4:	e002      	b.n	80076cc <_printf_i+0x1d4>
 80076c6:	0670      	lsls	r0, r6, #25
 80076c8:	d5fb      	bpl.n	80076c2 <_printf_i+0x1ca>
 80076ca:	8019      	strh	r1, [r3, #0]
 80076cc:	2300      	movs	r3, #0
 80076ce:	4615      	mov	r5, r2
 80076d0:	6123      	str	r3, [r4, #16]
 80076d2:	e7ba      	b.n	800764a <_printf_i+0x152>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	2100      	movs	r1, #0
 80076d8:	1d1a      	adds	r2, r3, #4
 80076da:	602a      	str	r2, [r5, #0]
 80076dc:	681d      	ldr	r5, [r3, #0]
 80076de:	6862      	ldr	r2, [r4, #4]
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 feb7 	bl	8008454 <memchr>
 80076e6:	b108      	cbz	r0, 80076ec <_printf_i+0x1f4>
 80076e8:	1b40      	subs	r0, r0, r5
 80076ea:	6060      	str	r0, [r4, #4]
 80076ec:	6863      	ldr	r3, [r4, #4]
 80076ee:	6123      	str	r3, [r4, #16]
 80076f0:	2300      	movs	r3, #0
 80076f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f6:	e7a8      	b.n	800764a <_printf_i+0x152>
 80076f8:	462a      	mov	r2, r5
 80076fa:	4649      	mov	r1, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	47d0      	blx	sl
 8007702:	3001      	adds	r0, #1
 8007704:	d0ab      	beq.n	800765e <_printf_i+0x166>
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	079b      	lsls	r3, r3, #30
 800770a:	d413      	bmi.n	8007734 <_printf_i+0x23c>
 800770c:	68e0      	ldr	r0, [r4, #12]
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	4298      	cmp	r0, r3
 8007712:	bfb8      	it	lt
 8007714:	4618      	movlt	r0, r3
 8007716:	e7a4      	b.n	8007662 <_printf_i+0x16a>
 8007718:	2301      	movs	r3, #1
 800771a:	4632      	mov	r2, r6
 800771c:	4649      	mov	r1, r9
 800771e:	4640      	mov	r0, r8
 8007720:	47d0      	blx	sl
 8007722:	3001      	adds	r0, #1
 8007724:	d09b      	beq.n	800765e <_printf_i+0x166>
 8007726:	3501      	adds	r5, #1
 8007728:	68e3      	ldr	r3, [r4, #12]
 800772a:	9903      	ldr	r1, [sp, #12]
 800772c:	1a5b      	subs	r3, r3, r1
 800772e:	42ab      	cmp	r3, r5
 8007730:	dcf2      	bgt.n	8007718 <_printf_i+0x220>
 8007732:	e7eb      	b.n	800770c <_printf_i+0x214>
 8007734:	2500      	movs	r5, #0
 8007736:	f104 0619 	add.w	r6, r4, #25
 800773a:	e7f5      	b.n	8007728 <_printf_i+0x230>
 800773c:	08009ae6 	.word	0x08009ae6
 8007740:	08009af7 	.word	0x08009af7

08007744 <quorem>:
 8007744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	6903      	ldr	r3, [r0, #16]
 800774a:	690c      	ldr	r4, [r1, #16]
 800774c:	4607      	mov	r7, r0
 800774e:	42a3      	cmp	r3, r4
 8007750:	f2c0 8082 	blt.w	8007858 <quorem+0x114>
 8007754:	3c01      	subs	r4, #1
 8007756:	f100 0514 	add.w	r5, r0, #20
 800775a:	f101 0814 	add.w	r8, r1, #20
 800775e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007768:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800776c:	3301      	adds	r3, #1
 800776e:	429a      	cmp	r2, r3
 8007770:	fbb2 f6f3 	udiv	r6, r2, r3
 8007774:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007778:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800777c:	d331      	bcc.n	80077e2 <quorem+0x9e>
 800777e:	f04f 0e00 	mov.w	lr, #0
 8007782:	4640      	mov	r0, r8
 8007784:	46ac      	mov	ip, r5
 8007786:	46f2      	mov	sl, lr
 8007788:	f850 2b04 	ldr.w	r2, [r0], #4
 800778c:	b293      	uxth	r3, r2
 800778e:	fb06 e303 	mla	r3, r6, r3, lr
 8007792:	0c12      	lsrs	r2, r2, #16
 8007794:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007798:	b29b      	uxth	r3, r3
 800779a:	fb06 e202 	mla	r2, r6, r2, lr
 800779e:	ebaa 0303 	sub.w	r3, sl, r3
 80077a2:	f8dc a000 	ldr.w	sl, [ip]
 80077a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077aa:	fa1f fa8a 	uxth.w	sl, sl
 80077ae:	4453      	add	r3, sl
 80077b0:	f8dc a000 	ldr.w	sl, [ip]
 80077b4:	b292      	uxth	r2, r2
 80077b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80077ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077be:	b29b      	uxth	r3, r3
 80077c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077c4:	4581      	cmp	r9, r0
 80077c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077ca:	f84c 3b04 	str.w	r3, [ip], #4
 80077ce:	d2db      	bcs.n	8007788 <quorem+0x44>
 80077d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80077d4:	b92b      	cbnz	r3, 80077e2 <quorem+0x9e>
 80077d6:	9b01      	ldr	r3, [sp, #4]
 80077d8:	3b04      	subs	r3, #4
 80077da:	429d      	cmp	r5, r3
 80077dc:	461a      	mov	r2, r3
 80077de:	d32f      	bcc.n	8007840 <quorem+0xfc>
 80077e0:	613c      	str	r4, [r7, #16]
 80077e2:	4638      	mov	r0, r7
 80077e4:	f001 f8d0 	bl	8008988 <__mcmp>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	db25      	blt.n	8007838 <quorem+0xf4>
 80077ec:	4628      	mov	r0, r5
 80077ee:	f04f 0c00 	mov.w	ip, #0
 80077f2:	3601      	adds	r6, #1
 80077f4:	f858 1b04 	ldr.w	r1, [r8], #4
 80077f8:	f8d0 e000 	ldr.w	lr, [r0]
 80077fc:	b28b      	uxth	r3, r1
 80077fe:	ebac 0303 	sub.w	r3, ip, r3
 8007802:	fa1f f28e 	uxth.w	r2, lr
 8007806:	4413      	add	r3, r2
 8007808:	0c0a      	lsrs	r2, r1, #16
 800780a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800780e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007812:	b29b      	uxth	r3, r3
 8007814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007818:	45c1      	cmp	r9, r8
 800781a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800781e:	f840 3b04 	str.w	r3, [r0], #4
 8007822:	d2e7      	bcs.n	80077f4 <quorem+0xb0>
 8007824:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800782c:	b922      	cbnz	r2, 8007838 <quorem+0xf4>
 800782e:	3b04      	subs	r3, #4
 8007830:	429d      	cmp	r5, r3
 8007832:	461a      	mov	r2, r3
 8007834:	d30a      	bcc.n	800784c <quorem+0x108>
 8007836:	613c      	str	r4, [r7, #16]
 8007838:	4630      	mov	r0, r6
 800783a:	b003      	add	sp, #12
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	3b04      	subs	r3, #4
 8007844:	2a00      	cmp	r2, #0
 8007846:	d1cb      	bne.n	80077e0 <quorem+0x9c>
 8007848:	3c01      	subs	r4, #1
 800784a:	e7c6      	b.n	80077da <quorem+0x96>
 800784c:	6812      	ldr	r2, [r2, #0]
 800784e:	3b04      	subs	r3, #4
 8007850:	2a00      	cmp	r2, #0
 8007852:	d1f0      	bne.n	8007836 <quorem+0xf2>
 8007854:	3c01      	subs	r4, #1
 8007856:	e7eb      	b.n	8007830 <quorem+0xec>
 8007858:	2000      	movs	r0, #0
 800785a:	e7ee      	b.n	800783a <quorem+0xf6>
 800785c:	0000      	movs	r0, r0
	...

08007860 <_dtoa_r>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	4616      	mov	r6, r2
 8007866:	461f      	mov	r7, r3
 8007868:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800786a:	b099      	sub	sp, #100	; 0x64
 800786c:	4605      	mov	r5, r0
 800786e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007872:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007876:	b974      	cbnz	r4, 8007896 <_dtoa_r+0x36>
 8007878:	2010      	movs	r0, #16
 800787a:	f000 fde3 	bl	8008444 <malloc>
 800787e:	4602      	mov	r2, r0
 8007880:	6268      	str	r0, [r5, #36]	; 0x24
 8007882:	b920      	cbnz	r0, 800788e <_dtoa_r+0x2e>
 8007884:	21ea      	movs	r1, #234	; 0xea
 8007886:	4ba8      	ldr	r3, [pc, #672]	; (8007b28 <_dtoa_r+0x2c8>)
 8007888:	48a8      	ldr	r0, [pc, #672]	; (8007b2c <_dtoa_r+0x2cc>)
 800788a:	f001 fa81 	bl	8008d90 <__assert_func>
 800788e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007892:	6004      	str	r4, [r0, #0]
 8007894:	60c4      	str	r4, [r0, #12]
 8007896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007898:	6819      	ldr	r1, [r3, #0]
 800789a:	b151      	cbz	r1, 80078b2 <_dtoa_r+0x52>
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	2301      	movs	r3, #1
 80078a0:	4093      	lsls	r3, r2
 80078a2:	604a      	str	r2, [r1, #4]
 80078a4:	608b      	str	r3, [r1, #8]
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fe30 	bl	800850c <_Bfree>
 80078ac:	2200      	movs	r2, #0
 80078ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	1e3b      	subs	r3, r7, #0
 80078b4:	bfaf      	iteee	ge
 80078b6:	2300      	movge	r3, #0
 80078b8:	2201      	movlt	r2, #1
 80078ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078be:	9305      	strlt	r3, [sp, #20]
 80078c0:	bfa8      	it	ge
 80078c2:	f8c8 3000 	strge.w	r3, [r8]
 80078c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80078ca:	4b99      	ldr	r3, [pc, #612]	; (8007b30 <_dtoa_r+0x2d0>)
 80078cc:	bfb8      	it	lt
 80078ce:	f8c8 2000 	strlt.w	r2, [r8]
 80078d2:	ea33 0309 	bics.w	r3, r3, r9
 80078d6:	d119      	bne.n	800790c <_dtoa_r+0xac>
 80078d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80078dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078e4:	4333      	orrs	r3, r6
 80078e6:	f000 857f 	beq.w	80083e8 <_dtoa_r+0xb88>
 80078ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078ec:	b953      	cbnz	r3, 8007904 <_dtoa_r+0xa4>
 80078ee:	4b91      	ldr	r3, [pc, #580]	; (8007b34 <_dtoa_r+0x2d4>)
 80078f0:	e022      	b.n	8007938 <_dtoa_r+0xd8>
 80078f2:	4b91      	ldr	r3, [pc, #580]	; (8007b38 <_dtoa_r+0x2d8>)
 80078f4:	9303      	str	r3, [sp, #12]
 80078f6:	3308      	adds	r3, #8
 80078f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	9803      	ldr	r0, [sp, #12]
 80078fe:	b019      	add	sp, #100	; 0x64
 8007900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007904:	4b8b      	ldr	r3, [pc, #556]	; (8007b34 <_dtoa_r+0x2d4>)
 8007906:	9303      	str	r3, [sp, #12]
 8007908:	3303      	adds	r3, #3
 800790a:	e7f5      	b.n	80078f8 <_dtoa_r+0x98>
 800790c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007910:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007918:	2200      	movs	r2, #0
 800791a:	2300      	movs	r3, #0
 800791c:	f7f9 f844 	bl	80009a8 <__aeabi_dcmpeq>
 8007920:	4680      	mov	r8, r0
 8007922:	b158      	cbz	r0, 800793c <_dtoa_r+0xdc>
 8007924:	2301      	movs	r3, #1
 8007926:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800792c:	2b00      	cmp	r3, #0
 800792e:	f000 8558 	beq.w	80083e2 <_dtoa_r+0xb82>
 8007932:	4882      	ldr	r0, [pc, #520]	; (8007b3c <_dtoa_r+0x2dc>)
 8007934:	6018      	str	r0, [r3, #0]
 8007936:	1e43      	subs	r3, r0, #1
 8007938:	9303      	str	r3, [sp, #12]
 800793a:	e7df      	b.n	80078fc <_dtoa_r+0x9c>
 800793c:	ab16      	add	r3, sp, #88	; 0x58
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	ab17      	add	r3, sp, #92	; 0x5c
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	4628      	mov	r0, r5
 8007946:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800794a:	f001 f8c5 	bl	8008ad8 <__d2b>
 800794e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007952:	4683      	mov	fp, r0
 8007954:	2c00      	cmp	r4, #0
 8007956:	d07f      	beq.n	8007a58 <_dtoa_r+0x1f8>
 8007958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800795c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800795e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007966:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800796a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800796e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007972:	2200      	movs	r2, #0
 8007974:	4b72      	ldr	r3, [pc, #456]	; (8007b40 <_dtoa_r+0x2e0>)
 8007976:	f7f8 fbf7 	bl	8000168 <__aeabi_dsub>
 800797a:	a365      	add	r3, pc, #404	; (adr r3, 8007b10 <_dtoa_r+0x2b0>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f7f8 fdaa 	bl	80004d8 <__aeabi_dmul>
 8007984:	a364      	add	r3, pc, #400	; (adr r3, 8007b18 <_dtoa_r+0x2b8>)
 8007986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798a:	f7f8 fbef 	bl	800016c <__adddf3>
 800798e:	4606      	mov	r6, r0
 8007990:	4620      	mov	r0, r4
 8007992:	460f      	mov	r7, r1
 8007994:	f7f8 fd36 	bl	8000404 <__aeabi_i2d>
 8007998:	a361      	add	r3, pc, #388	; (adr r3, 8007b20 <_dtoa_r+0x2c0>)
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fd9b 	bl	80004d8 <__aeabi_dmul>
 80079a2:	4602      	mov	r2, r0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4630      	mov	r0, r6
 80079a8:	4639      	mov	r1, r7
 80079aa:	f7f8 fbdf 	bl	800016c <__adddf3>
 80079ae:	4606      	mov	r6, r0
 80079b0:	460f      	mov	r7, r1
 80079b2:	f7f9 f841 	bl	8000a38 <__aeabi_d2iz>
 80079b6:	2200      	movs	r2, #0
 80079b8:	4682      	mov	sl, r0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f8 fffc 	bl	80009bc <__aeabi_dcmplt>
 80079c4:	b148      	cbz	r0, 80079da <_dtoa_r+0x17a>
 80079c6:	4650      	mov	r0, sl
 80079c8:	f7f8 fd1c 	bl	8000404 <__aeabi_i2d>
 80079cc:	4632      	mov	r2, r6
 80079ce:	463b      	mov	r3, r7
 80079d0:	f7f8 ffea 	bl	80009a8 <__aeabi_dcmpeq>
 80079d4:	b908      	cbnz	r0, 80079da <_dtoa_r+0x17a>
 80079d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079da:	f1ba 0f16 	cmp.w	sl, #22
 80079de:	d858      	bhi.n	8007a92 <_dtoa_r+0x232>
 80079e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079e4:	4b57      	ldr	r3, [pc, #348]	; (8007b44 <_dtoa_r+0x2e4>)
 80079e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 ffe5 	bl	80009bc <__aeabi_dcmplt>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d04f      	beq.n	8007a96 <_dtoa_r+0x236>
 80079f6:	2300      	movs	r3, #0
 80079f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80079fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a00:	1b1c      	subs	r4, r3, r4
 8007a02:	1e63      	subs	r3, r4, #1
 8007a04:	9309      	str	r3, [sp, #36]	; 0x24
 8007a06:	bf49      	itett	mi
 8007a08:	f1c4 0301 	rsbmi	r3, r4, #1
 8007a0c:	2300      	movpl	r3, #0
 8007a0e:	9306      	strmi	r3, [sp, #24]
 8007a10:	2300      	movmi	r3, #0
 8007a12:	bf54      	ite	pl
 8007a14:	9306      	strpl	r3, [sp, #24]
 8007a16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007a18:	f1ba 0f00 	cmp.w	sl, #0
 8007a1c:	db3d      	blt.n	8007a9a <_dtoa_r+0x23a>
 8007a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007a24:	4453      	add	r3, sl
 8007a26:	9309      	str	r3, [sp, #36]	; 0x24
 8007a28:	2300      	movs	r3, #0
 8007a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	f200 808c 	bhi.w	8007b4c <_dtoa_r+0x2ec>
 8007a34:	2b05      	cmp	r3, #5
 8007a36:	bfc4      	itt	gt
 8007a38:	3b04      	subgt	r3, #4
 8007a3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a3e:	bfc8      	it	gt
 8007a40:	2400      	movgt	r4, #0
 8007a42:	f1a3 0302 	sub.w	r3, r3, #2
 8007a46:	bfd8      	it	le
 8007a48:	2401      	movle	r4, #1
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	f200 808a 	bhi.w	8007b64 <_dtoa_r+0x304>
 8007a50:	e8df f003 	tbb	[pc, r3]
 8007a54:	5b4d4f2d 	.word	0x5b4d4f2d
 8007a58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007a5c:	441c      	add	r4, r3
 8007a5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007a62:	2b20      	cmp	r3, #32
 8007a64:	bfc3      	ittte	gt
 8007a66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007a6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a72:	f1c3 0320 	rsble	r3, r3, #32
 8007a76:	bfc6      	itte	gt
 8007a78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a7c:	4318      	orrgt	r0, r3
 8007a7e:	fa06 f003 	lslle.w	r0, r6, r3
 8007a82:	f7f8 fcaf 	bl	80003e4 <__aeabi_ui2d>
 8007a86:	2301      	movs	r3, #1
 8007a88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007a8c:	3c01      	subs	r4, #1
 8007a8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a90:	e76f      	b.n	8007972 <_dtoa_r+0x112>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e7b2      	b.n	80079fc <_dtoa_r+0x19c>
 8007a96:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a98:	e7b1      	b.n	80079fe <_dtoa_r+0x19e>
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	eba3 030a 	sub.w	r3, r3, sl
 8007aa0:	9306      	str	r3, [sp, #24]
 8007aa2:	f1ca 0300 	rsb	r3, sl, #0
 8007aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8007aac:	e7be      	b.n	8007a2c <_dtoa_r+0x1cc>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ab2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dc58      	bgt.n	8007b6a <_dtoa_r+0x30a>
 8007ab8:	f04f 0901 	mov.w	r9, #1
 8007abc:	464b      	mov	r3, r9
 8007abe:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ac2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007aca:	6042      	str	r2, [r0, #4]
 8007acc:	2204      	movs	r2, #4
 8007ace:	f102 0614 	add.w	r6, r2, #20
 8007ad2:	429e      	cmp	r6, r3
 8007ad4:	6841      	ldr	r1, [r0, #4]
 8007ad6:	d94e      	bls.n	8007b76 <_dtoa_r+0x316>
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f000 fcd7 	bl	800848c <_Balloc>
 8007ade:	9003      	str	r0, [sp, #12]
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d14c      	bne.n	8007b7e <_dtoa_r+0x31e>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007aea:	4b17      	ldr	r3, [pc, #92]	; (8007b48 <_dtoa_r+0x2e8>)
 8007aec:	e6cc      	b.n	8007888 <_dtoa_r+0x28>
 8007aee:	2301      	movs	r3, #1
 8007af0:	e7de      	b.n	8007ab0 <_dtoa_r+0x250>
 8007af2:	2300      	movs	r3, #0
 8007af4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007af6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007af8:	eb0a 0903 	add.w	r9, sl, r3
 8007afc:	f109 0301 	add.w	r3, r9, #1
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	9308      	str	r3, [sp, #32]
 8007b04:	bfb8      	it	lt
 8007b06:	2301      	movlt	r3, #1
 8007b08:	e7dd      	b.n	8007ac6 <_dtoa_r+0x266>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7f2      	b.n	8007af4 <_dtoa_r+0x294>
 8007b0e:	bf00      	nop
 8007b10:	636f4361 	.word	0x636f4361
 8007b14:	3fd287a7 	.word	0x3fd287a7
 8007b18:	8b60c8b3 	.word	0x8b60c8b3
 8007b1c:	3fc68a28 	.word	0x3fc68a28
 8007b20:	509f79fb 	.word	0x509f79fb
 8007b24:	3fd34413 	.word	0x3fd34413
 8007b28:	08009b15 	.word	0x08009b15
 8007b2c:	08009b2c 	.word	0x08009b2c
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	08009b11 	.word	0x08009b11
 8007b38:	08009b08 	.word	0x08009b08
 8007b3c:	08009ae5 	.word	0x08009ae5
 8007b40:	3ff80000 	.word	0x3ff80000
 8007b44:	08009c20 	.word	0x08009c20
 8007b48:	08009b87 	.word	0x08009b87
 8007b4c:	2401      	movs	r4, #1
 8007b4e:	2300      	movs	r3, #0
 8007b50:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b52:	9322      	str	r3, [sp, #136]	; 0x88
 8007b54:	f04f 39ff 	mov.w	r9, #4294967295
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2312      	movs	r3, #18
 8007b5c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007b60:	9223      	str	r2, [sp, #140]	; 0x8c
 8007b62:	e7b0      	b.n	8007ac6 <_dtoa_r+0x266>
 8007b64:	2301      	movs	r3, #1
 8007b66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b68:	e7f4      	b.n	8007b54 <_dtoa_r+0x2f4>
 8007b6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007b6e:	464b      	mov	r3, r9
 8007b70:	f8cd 9020 	str.w	r9, [sp, #32]
 8007b74:	e7a7      	b.n	8007ac6 <_dtoa_r+0x266>
 8007b76:	3101      	adds	r1, #1
 8007b78:	6041      	str	r1, [r0, #4]
 8007b7a:	0052      	lsls	r2, r2, #1
 8007b7c:	e7a7      	b.n	8007ace <_dtoa_r+0x26e>
 8007b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b80:	9a03      	ldr	r2, [sp, #12]
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	9b08      	ldr	r3, [sp, #32]
 8007b86:	2b0e      	cmp	r3, #14
 8007b88:	f200 80a8 	bhi.w	8007cdc <_dtoa_r+0x47c>
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	f000 80a5 	beq.w	8007cdc <_dtoa_r+0x47c>
 8007b92:	f1ba 0f00 	cmp.w	sl, #0
 8007b96:	dd34      	ble.n	8007c02 <_dtoa_r+0x3a2>
 8007b98:	4a9a      	ldr	r2, [pc, #616]	; (8007e04 <_dtoa_r+0x5a4>)
 8007b9a:	f00a 030f 	and.w	r3, sl, #15
 8007b9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ba2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007ba6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007baa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007bae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007bb2:	d016      	beq.n	8007be2 <_dtoa_r+0x382>
 8007bb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bb8:	4b93      	ldr	r3, [pc, #588]	; (8007e08 <_dtoa_r+0x5a8>)
 8007bba:	2703      	movs	r7, #3
 8007bbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bc0:	f7f8 fdb4 	bl	800072c <__aeabi_ddiv>
 8007bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bc8:	f004 040f 	and.w	r4, r4, #15
 8007bcc:	4e8e      	ldr	r6, [pc, #568]	; (8007e08 <_dtoa_r+0x5a8>)
 8007bce:	b954      	cbnz	r4, 8007be6 <_dtoa_r+0x386>
 8007bd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bd8:	f7f8 fda8 	bl	800072c <__aeabi_ddiv>
 8007bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007be0:	e029      	b.n	8007c36 <_dtoa_r+0x3d6>
 8007be2:	2702      	movs	r7, #2
 8007be4:	e7f2      	b.n	8007bcc <_dtoa_r+0x36c>
 8007be6:	07e1      	lsls	r1, r4, #31
 8007be8:	d508      	bpl.n	8007bfc <_dtoa_r+0x39c>
 8007bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bf2:	f7f8 fc71 	bl	80004d8 <__aeabi_dmul>
 8007bf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bfa:	3701      	adds	r7, #1
 8007bfc:	1064      	asrs	r4, r4, #1
 8007bfe:	3608      	adds	r6, #8
 8007c00:	e7e5      	b.n	8007bce <_dtoa_r+0x36e>
 8007c02:	f000 80a5 	beq.w	8007d50 <_dtoa_r+0x4f0>
 8007c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c0a:	f1ca 0400 	rsb	r4, sl, #0
 8007c0e:	4b7d      	ldr	r3, [pc, #500]	; (8007e04 <_dtoa_r+0x5a4>)
 8007c10:	f004 020f 	and.w	r2, r4, #15
 8007c14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 fc5c 	bl	80004d8 <__aeabi_dmul>
 8007c20:	2702      	movs	r7, #2
 8007c22:	2300      	movs	r3, #0
 8007c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c28:	4e77      	ldr	r6, [pc, #476]	; (8007e08 <_dtoa_r+0x5a8>)
 8007c2a:	1124      	asrs	r4, r4, #4
 8007c2c:	2c00      	cmp	r4, #0
 8007c2e:	f040 8084 	bne.w	8007d3a <_dtoa_r+0x4da>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1d2      	bne.n	8007bdc <_dtoa_r+0x37c>
 8007c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 808b 	beq.w	8007d54 <_dtoa_r+0x4f4>
 8007c3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007c42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007c46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4b6f      	ldr	r3, [pc, #444]	; (8007e0c <_dtoa_r+0x5ac>)
 8007c4e:	f7f8 feb5 	bl	80009bc <__aeabi_dcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d07e      	beq.n	8007d54 <_dtoa_r+0x4f4>
 8007c56:	9b08      	ldr	r3, [sp, #32]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d07b      	beq.n	8007d54 <_dtoa_r+0x4f4>
 8007c5c:	f1b9 0f00 	cmp.w	r9, #0
 8007c60:	dd38      	ble.n	8007cd4 <_dtoa_r+0x474>
 8007c62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c66:	2200      	movs	r2, #0
 8007c68:	4b69      	ldr	r3, [pc, #420]	; (8007e10 <_dtoa_r+0x5b0>)
 8007c6a:	f7f8 fc35 	bl	80004d8 <__aeabi_dmul>
 8007c6e:	464c      	mov	r4, r9
 8007c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c74:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007c78:	3701      	adds	r7, #1
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f7f8 fbc2 	bl	8000404 <__aeabi_i2d>
 8007c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c84:	f7f8 fc28 	bl	80004d8 <__aeabi_dmul>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4b62      	ldr	r3, [pc, #392]	; (8007e14 <_dtoa_r+0x5b4>)
 8007c8c:	f7f8 fa6e 	bl	800016c <__adddf3>
 8007c90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007c94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c98:	9611      	str	r6, [sp, #68]	; 0x44
 8007c9a:	2c00      	cmp	r4, #0
 8007c9c:	d15d      	bne.n	8007d5a <_dtoa_r+0x4fa>
 8007c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4b5c      	ldr	r3, [pc, #368]	; (8007e18 <_dtoa_r+0x5b8>)
 8007ca6:	f7f8 fa5f 	bl	8000168 <__aeabi_dsub>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cb2:	4633      	mov	r3, r6
 8007cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cb6:	f7f8 fe9f 	bl	80009f8 <__aeabi_dcmpgt>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f040 829c 	bne.w	80081f8 <_dtoa_r+0x998>
 8007cc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cc6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007cca:	f7f8 fe77 	bl	80009bc <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f040 8290 	bne.w	80081f4 <_dtoa_r+0x994>
 8007cd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007cd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f2c0 8152 	blt.w	8007f88 <_dtoa_r+0x728>
 8007ce4:	f1ba 0f0e 	cmp.w	sl, #14
 8007ce8:	f300 814e 	bgt.w	8007f88 <_dtoa_r+0x728>
 8007cec:	4b45      	ldr	r3, [pc, #276]	; (8007e04 <_dtoa_r+0x5a4>)
 8007cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007cf6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007cfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f280 80db 	bge.w	8007eb8 <_dtoa_r+0x658>
 8007d02:	9b08      	ldr	r3, [sp, #32]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f300 80d7 	bgt.w	8007eb8 <_dtoa_r+0x658>
 8007d0a:	f040 8272 	bne.w	80081f2 <_dtoa_r+0x992>
 8007d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d12:	2200      	movs	r2, #0
 8007d14:	4b40      	ldr	r3, [pc, #256]	; (8007e18 <_dtoa_r+0x5b8>)
 8007d16:	f7f8 fbdf 	bl	80004d8 <__aeabi_dmul>
 8007d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d1e:	f7f8 fe61 	bl	80009e4 <__aeabi_dcmpge>
 8007d22:	9c08      	ldr	r4, [sp, #32]
 8007d24:	4626      	mov	r6, r4
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f040 8248 	bne.w	80081bc <_dtoa_r+0x95c>
 8007d2c:	2331      	movs	r3, #49	; 0x31
 8007d2e:	9f03      	ldr	r7, [sp, #12]
 8007d30:	f10a 0a01 	add.w	sl, sl, #1
 8007d34:	f807 3b01 	strb.w	r3, [r7], #1
 8007d38:	e244      	b.n	80081c4 <_dtoa_r+0x964>
 8007d3a:	07e2      	lsls	r2, r4, #31
 8007d3c:	d505      	bpl.n	8007d4a <_dtoa_r+0x4ea>
 8007d3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d42:	f7f8 fbc9 	bl	80004d8 <__aeabi_dmul>
 8007d46:	2301      	movs	r3, #1
 8007d48:	3701      	adds	r7, #1
 8007d4a:	1064      	asrs	r4, r4, #1
 8007d4c:	3608      	adds	r6, #8
 8007d4e:	e76d      	b.n	8007c2c <_dtoa_r+0x3cc>
 8007d50:	2702      	movs	r7, #2
 8007d52:	e770      	b.n	8007c36 <_dtoa_r+0x3d6>
 8007d54:	46d0      	mov	r8, sl
 8007d56:	9c08      	ldr	r4, [sp, #32]
 8007d58:	e78f      	b.n	8007c7a <_dtoa_r+0x41a>
 8007d5a:	9903      	ldr	r1, [sp, #12]
 8007d5c:	4b29      	ldr	r3, [pc, #164]	; (8007e04 <_dtoa_r+0x5a4>)
 8007d5e:	4421      	add	r1, r4
 8007d60:	9112      	str	r1, [sp, #72]	; 0x48
 8007d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007d6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d70:	2900      	cmp	r1, #0
 8007d72:	d055      	beq.n	8007e20 <_dtoa_r+0x5c0>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4929      	ldr	r1, [pc, #164]	; (8007e1c <_dtoa_r+0x5bc>)
 8007d78:	f7f8 fcd8 	bl	800072c <__aeabi_ddiv>
 8007d7c:	463b      	mov	r3, r7
 8007d7e:	4632      	mov	r2, r6
 8007d80:	f7f8 f9f2 	bl	8000168 <__aeabi_dsub>
 8007d84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d88:	9f03      	ldr	r7, [sp, #12]
 8007d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d8e:	f7f8 fe53 	bl	8000a38 <__aeabi_d2iz>
 8007d92:	4604      	mov	r4, r0
 8007d94:	f7f8 fb36 	bl	8000404 <__aeabi_i2d>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007da0:	f7f8 f9e2 	bl	8000168 <__aeabi_dsub>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	3430      	adds	r4, #48	; 0x30
 8007daa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007db2:	f807 4b01 	strb.w	r4, [r7], #1
 8007db6:	f7f8 fe01 	bl	80009bc <__aeabi_dcmplt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d174      	bne.n	8007ea8 <_dtoa_r+0x648>
 8007dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	4911      	ldr	r1, [pc, #68]	; (8007e0c <_dtoa_r+0x5ac>)
 8007dc6:	f7f8 f9cf 	bl	8000168 <__aeabi_dsub>
 8007dca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dce:	f7f8 fdf5 	bl	80009bc <__aeabi_dcmplt>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	f040 80b7 	bne.w	8007f46 <_dtoa_r+0x6e6>
 8007dd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dda:	429f      	cmp	r7, r3
 8007ddc:	f43f af7a 	beq.w	8007cd4 <_dtoa_r+0x474>
 8007de0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007de4:	2200      	movs	r2, #0
 8007de6:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <_dtoa_r+0x5b0>)
 8007de8:	f7f8 fb76 	bl	80004d8 <__aeabi_dmul>
 8007dec:	2200      	movs	r2, #0
 8007dee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007df6:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <_dtoa_r+0x5b0>)
 8007df8:	f7f8 fb6e 	bl	80004d8 <__aeabi_dmul>
 8007dfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e00:	e7c3      	b.n	8007d8a <_dtoa_r+0x52a>
 8007e02:	bf00      	nop
 8007e04:	08009c20 	.word	0x08009c20
 8007e08:	08009bf8 	.word	0x08009bf8
 8007e0c:	3ff00000 	.word	0x3ff00000
 8007e10:	40240000 	.word	0x40240000
 8007e14:	401c0000 	.word	0x401c0000
 8007e18:	40140000 	.word	0x40140000
 8007e1c:	3fe00000 	.word	0x3fe00000
 8007e20:	4630      	mov	r0, r6
 8007e22:	4639      	mov	r1, r7
 8007e24:	f7f8 fb58 	bl	80004d8 <__aeabi_dmul>
 8007e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e2e:	9c03      	ldr	r4, [sp, #12]
 8007e30:	9314      	str	r3, [sp, #80]	; 0x50
 8007e32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e36:	f7f8 fdff 	bl	8000a38 <__aeabi_d2iz>
 8007e3a:	9015      	str	r0, [sp, #84]	; 0x54
 8007e3c:	f7f8 fae2 	bl	8000404 <__aeabi_i2d>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e48:	f7f8 f98e 	bl	8000168 <__aeabi_dsub>
 8007e4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e4e:	4606      	mov	r6, r0
 8007e50:	3330      	adds	r3, #48	; 0x30
 8007e52:	f804 3b01 	strb.w	r3, [r4], #1
 8007e56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e58:	460f      	mov	r7, r1
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	d124      	bne.n	8007eac <_dtoa_r+0x64c>
 8007e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e66:	4bb0      	ldr	r3, [pc, #704]	; (8008128 <_dtoa_r+0x8c8>)
 8007e68:	f7f8 f980 	bl	800016c <__adddf3>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fdc0 	bl	80009f8 <__aeabi_dcmpgt>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d163      	bne.n	8007f44 <_dtoa_r+0x6e4>
 8007e7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e80:	2000      	movs	r0, #0
 8007e82:	49a9      	ldr	r1, [pc, #676]	; (8008128 <_dtoa_r+0x8c8>)
 8007e84:	f7f8 f970 	bl	8000168 <__aeabi_dsub>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fd94 	bl	80009bc <__aeabi_dcmplt>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	f43f af1d 	beq.w	8007cd4 <_dtoa_r+0x474>
 8007e9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e9c:	1e7b      	subs	r3, r7, #1
 8007e9e:	9314      	str	r3, [sp, #80]	; 0x50
 8007ea0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007ea4:	2b30      	cmp	r3, #48	; 0x30
 8007ea6:	d0f8      	beq.n	8007e9a <_dtoa_r+0x63a>
 8007ea8:	46c2      	mov	sl, r8
 8007eaa:	e03b      	b.n	8007f24 <_dtoa_r+0x6c4>
 8007eac:	4b9f      	ldr	r3, [pc, #636]	; (800812c <_dtoa_r+0x8cc>)
 8007eae:	f7f8 fb13 	bl	80004d8 <__aeabi_dmul>
 8007eb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eb6:	e7bc      	b.n	8007e32 <_dtoa_r+0x5d2>
 8007eb8:	9f03      	ldr	r7, [sp, #12]
 8007eba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007ebe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 fc31 	bl	800072c <__aeabi_ddiv>
 8007eca:	f7f8 fdb5 	bl	8000a38 <__aeabi_d2iz>
 8007ece:	4604      	mov	r4, r0
 8007ed0:	f7f8 fa98 	bl	8000404 <__aeabi_i2d>
 8007ed4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ed8:	f7f8 fafe 	bl	80004d8 <__aeabi_dmul>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 f940 	bl	8000168 <__aeabi_dsub>
 8007ee8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007eec:	f807 6b01 	strb.w	r6, [r7], #1
 8007ef0:	9e03      	ldr	r6, [sp, #12]
 8007ef2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007ef6:	1bbe      	subs	r6, r7, r6
 8007ef8:	45b4      	cmp	ip, r6
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	d136      	bne.n	8007f6e <_dtoa_r+0x70e>
 8007f00:	f7f8 f934 	bl	800016c <__adddf3>
 8007f04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f08:	4680      	mov	r8, r0
 8007f0a:	4689      	mov	r9, r1
 8007f0c:	f7f8 fd74 	bl	80009f8 <__aeabi_dcmpgt>
 8007f10:	bb58      	cbnz	r0, 8007f6a <_dtoa_r+0x70a>
 8007f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f16:	4640      	mov	r0, r8
 8007f18:	4649      	mov	r1, r9
 8007f1a:	f7f8 fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8007f1e:	b108      	cbz	r0, 8007f24 <_dtoa_r+0x6c4>
 8007f20:	07e1      	lsls	r1, r4, #31
 8007f22:	d422      	bmi.n	8007f6a <_dtoa_r+0x70a>
 8007f24:	4628      	mov	r0, r5
 8007f26:	4659      	mov	r1, fp
 8007f28:	f000 faf0 	bl	800850c <_Bfree>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	703b      	strb	r3, [r7, #0]
 8007f30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007f32:	f10a 0001 	add.w	r0, sl, #1
 8007f36:	6018      	str	r0, [r3, #0]
 8007f38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f43f acde 	beq.w	80078fc <_dtoa_r+0x9c>
 8007f40:	601f      	str	r7, [r3, #0]
 8007f42:	e4db      	b.n	80078fc <_dtoa_r+0x9c>
 8007f44:	4627      	mov	r7, r4
 8007f46:	463b      	mov	r3, r7
 8007f48:	461f      	mov	r7, r3
 8007f4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f4e:	2a39      	cmp	r2, #57	; 0x39
 8007f50:	d107      	bne.n	8007f62 <_dtoa_r+0x702>
 8007f52:	9a03      	ldr	r2, [sp, #12]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d1f7      	bne.n	8007f48 <_dtoa_r+0x6e8>
 8007f58:	2230      	movs	r2, #48	; 0x30
 8007f5a:	9903      	ldr	r1, [sp, #12]
 8007f5c:	f108 0801 	add.w	r8, r8, #1
 8007f60:	700a      	strb	r2, [r1, #0]
 8007f62:	781a      	ldrb	r2, [r3, #0]
 8007f64:	3201      	adds	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e79e      	b.n	8007ea8 <_dtoa_r+0x648>
 8007f6a:	46d0      	mov	r8, sl
 8007f6c:	e7eb      	b.n	8007f46 <_dtoa_r+0x6e6>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4b6e      	ldr	r3, [pc, #440]	; (800812c <_dtoa_r+0x8cc>)
 8007f72:	f7f8 fab1 	bl	80004d8 <__aeabi_dmul>
 8007f76:	2200      	movs	r2, #0
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	f7f8 fd13 	bl	80009a8 <__aeabi_dcmpeq>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d09b      	beq.n	8007ebe <_dtoa_r+0x65e>
 8007f86:	e7cd      	b.n	8007f24 <_dtoa_r+0x6c4>
 8007f88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	f000 80d0 	beq.w	8008130 <_dtoa_r+0x8d0>
 8007f90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f92:	2a01      	cmp	r2, #1
 8007f94:	f300 80ae 	bgt.w	80080f4 <_dtoa_r+0x894>
 8007f98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f9a:	2a00      	cmp	r2, #0
 8007f9c:	f000 80a6 	beq.w	80080ec <_dtoa_r+0x88c>
 8007fa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007fa6:	9f06      	ldr	r7, [sp, #24]
 8007fa8:	9a06      	ldr	r2, [sp, #24]
 8007faa:	2101      	movs	r1, #1
 8007fac:	441a      	add	r2, r3
 8007fae:	9206      	str	r2, [sp, #24]
 8007fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	441a      	add	r2, r3
 8007fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb8:	f000 fb5e 	bl	8008678 <__i2b>
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	2f00      	cmp	r7, #0
 8007fc0:	dd0c      	ble.n	8007fdc <_dtoa_r+0x77c>
 8007fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dd09      	ble.n	8007fdc <_dtoa_r+0x77c>
 8007fc8:	42bb      	cmp	r3, r7
 8007fca:	bfa8      	it	ge
 8007fcc:	463b      	movge	r3, r7
 8007fce:	9a06      	ldr	r2, [sp, #24]
 8007fd0:	1aff      	subs	r7, r7, r3
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	9206      	str	r2, [sp, #24]
 8007fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	9309      	str	r3, [sp, #36]	; 0x24
 8007fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fde:	b1f3      	cbz	r3, 800801e <_dtoa_r+0x7be>
 8007fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f000 80a8 	beq.w	8008138 <_dtoa_r+0x8d8>
 8007fe8:	2c00      	cmp	r4, #0
 8007fea:	dd10      	ble.n	800800e <_dtoa_r+0x7ae>
 8007fec:	4631      	mov	r1, r6
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f000 fbff 	bl	80087f4 <__pow5mult>
 8007ff6:	465a      	mov	r2, fp
 8007ff8:	4601      	mov	r1, r0
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 fb51 	bl	80086a4 <__multiply>
 8008002:	4680      	mov	r8, r0
 8008004:	4659      	mov	r1, fp
 8008006:	4628      	mov	r0, r5
 8008008:	f000 fa80 	bl	800850c <_Bfree>
 800800c:	46c3      	mov	fp, r8
 800800e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008010:	1b1a      	subs	r2, r3, r4
 8008012:	d004      	beq.n	800801e <_dtoa_r+0x7be>
 8008014:	4659      	mov	r1, fp
 8008016:	4628      	mov	r0, r5
 8008018:	f000 fbec 	bl	80087f4 <__pow5mult>
 800801c:	4683      	mov	fp, r0
 800801e:	2101      	movs	r1, #1
 8008020:	4628      	mov	r0, r5
 8008022:	f000 fb29 	bl	8008678 <__i2b>
 8008026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008028:	4604      	mov	r4, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	f340 8086 	ble.w	800813c <_dtoa_r+0x8dc>
 8008030:	461a      	mov	r2, r3
 8008032:	4601      	mov	r1, r0
 8008034:	4628      	mov	r0, r5
 8008036:	f000 fbdd 	bl	80087f4 <__pow5mult>
 800803a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800803c:	4604      	mov	r4, r0
 800803e:	2b01      	cmp	r3, #1
 8008040:	dd7f      	ble.n	8008142 <_dtoa_r+0x8e2>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800804c:	6918      	ldr	r0, [r3, #16]
 800804e:	f000 fac5 	bl	80085dc <__hi0bits>
 8008052:	f1c0 0020 	rsb	r0, r0, #32
 8008056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008058:	4418      	add	r0, r3
 800805a:	f010 001f 	ands.w	r0, r0, #31
 800805e:	f000 8092 	beq.w	8008186 <_dtoa_r+0x926>
 8008062:	f1c0 0320 	rsb	r3, r0, #32
 8008066:	2b04      	cmp	r3, #4
 8008068:	f340 808a 	ble.w	8008180 <_dtoa_r+0x920>
 800806c:	f1c0 001c 	rsb	r0, r0, #28
 8008070:	9b06      	ldr	r3, [sp, #24]
 8008072:	4407      	add	r7, r0
 8008074:	4403      	add	r3, r0
 8008076:	9306      	str	r3, [sp, #24]
 8008078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807a:	4403      	add	r3, r0
 800807c:	9309      	str	r3, [sp, #36]	; 0x24
 800807e:	9b06      	ldr	r3, [sp, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dd05      	ble.n	8008090 <_dtoa_r+0x830>
 8008084:	4659      	mov	r1, fp
 8008086:	461a      	mov	r2, r3
 8008088:	4628      	mov	r0, r5
 800808a:	f000 fc0d 	bl	80088a8 <__lshift>
 800808e:	4683      	mov	fp, r0
 8008090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd05      	ble.n	80080a2 <_dtoa_r+0x842>
 8008096:	4621      	mov	r1, r4
 8008098:	461a      	mov	r2, r3
 800809a:	4628      	mov	r0, r5
 800809c:	f000 fc04 	bl	80088a8 <__lshift>
 80080a0:	4604      	mov	r4, r0
 80080a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d070      	beq.n	800818a <_dtoa_r+0x92a>
 80080a8:	4621      	mov	r1, r4
 80080aa:	4658      	mov	r0, fp
 80080ac:	f000 fc6c 	bl	8008988 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	da6a      	bge.n	800818a <_dtoa_r+0x92a>
 80080b4:	2300      	movs	r3, #0
 80080b6:	4659      	mov	r1, fp
 80080b8:	220a      	movs	r2, #10
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 fa48 	bl	8008550 <__multadd>
 80080c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080c2:	4683      	mov	fp, r0
 80080c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8194 	beq.w	80083f6 <_dtoa_r+0xb96>
 80080ce:	4631      	mov	r1, r6
 80080d0:	2300      	movs	r3, #0
 80080d2:	220a      	movs	r2, #10
 80080d4:	4628      	mov	r0, r5
 80080d6:	f000 fa3b 	bl	8008550 <__multadd>
 80080da:	f1b9 0f00 	cmp.w	r9, #0
 80080de:	4606      	mov	r6, r0
 80080e0:	f300 8093 	bgt.w	800820a <_dtoa_r+0x9aa>
 80080e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	dc57      	bgt.n	800819a <_dtoa_r+0x93a>
 80080ea:	e08e      	b.n	800820a <_dtoa_r+0x9aa>
 80080ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080f2:	e757      	b.n	8007fa4 <_dtoa_r+0x744>
 80080f4:	9b08      	ldr	r3, [sp, #32]
 80080f6:	1e5c      	subs	r4, r3, #1
 80080f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fa:	42a3      	cmp	r3, r4
 80080fc:	bfb7      	itett	lt
 80080fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008100:	1b1c      	subge	r4, r3, r4
 8008102:	1ae2      	sublt	r2, r4, r3
 8008104:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008106:	bfbe      	ittt	lt
 8008108:	940a      	strlt	r4, [sp, #40]	; 0x28
 800810a:	189b      	addlt	r3, r3, r2
 800810c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800810e:	9b08      	ldr	r3, [sp, #32]
 8008110:	bfb8      	it	lt
 8008112:	2400      	movlt	r4, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	bfbb      	ittet	lt
 8008118:	9b06      	ldrlt	r3, [sp, #24]
 800811a:	9a08      	ldrlt	r2, [sp, #32]
 800811c:	9f06      	ldrge	r7, [sp, #24]
 800811e:	1a9f      	sublt	r7, r3, r2
 8008120:	bfac      	ite	ge
 8008122:	9b08      	ldrge	r3, [sp, #32]
 8008124:	2300      	movlt	r3, #0
 8008126:	e73f      	b.n	8007fa8 <_dtoa_r+0x748>
 8008128:	3fe00000 	.word	0x3fe00000
 800812c:	40240000 	.word	0x40240000
 8008130:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008132:	9f06      	ldr	r7, [sp, #24]
 8008134:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008136:	e742      	b.n	8007fbe <_dtoa_r+0x75e>
 8008138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800813a:	e76b      	b.n	8008014 <_dtoa_r+0x7b4>
 800813c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800813e:	2b01      	cmp	r3, #1
 8008140:	dc19      	bgt.n	8008176 <_dtoa_r+0x916>
 8008142:	9b04      	ldr	r3, [sp, #16]
 8008144:	b9bb      	cbnz	r3, 8008176 <_dtoa_r+0x916>
 8008146:	9b05      	ldr	r3, [sp, #20]
 8008148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800814c:	b99b      	cbnz	r3, 8008176 <_dtoa_r+0x916>
 800814e:	9b05      	ldr	r3, [sp, #20]
 8008150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008154:	0d1b      	lsrs	r3, r3, #20
 8008156:	051b      	lsls	r3, r3, #20
 8008158:	b183      	cbz	r3, 800817c <_dtoa_r+0x91c>
 800815a:	f04f 0801 	mov.w	r8, #1
 800815e:	9b06      	ldr	r3, [sp, #24]
 8008160:	3301      	adds	r3, #1
 8008162:	9306      	str	r3, [sp, #24]
 8008164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008166:	3301      	adds	r3, #1
 8008168:	9309      	str	r3, [sp, #36]	; 0x24
 800816a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800816c:	2b00      	cmp	r3, #0
 800816e:	f47f af6a 	bne.w	8008046 <_dtoa_r+0x7e6>
 8008172:	2001      	movs	r0, #1
 8008174:	e76f      	b.n	8008056 <_dtoa_r+0x7f6>
 8008176:	f04f 0800 	mov.w	r8, #0
 800817a:	e7f6      	b.n	800816a <_dtoa_r+0x90a>
 800817c:	4698      	mov	r8, r3
 800817e:	e7f4      	b.n	800816a <_dtoa_r+0x90a>
 8008180:	f43f af7d 	beq.w	800807e <_dtoa_r+0x81e>
 8008184:	4618      	mov	r0, r3
 8008186:	301c      	adds	r0, #28
 8008188:	e772      	b.n	8008070 <_dtoa_r+0x810>
 800818a:	9b08      	ldr	r3, [sp, #32]
 800818c:	2b00      	cmp	r3, #0
 800818e:	dc36      	bgt.n	80081fe <_dtoa_r+0x99e>
 8008190:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008192:	2b02      	cmp	r3, #2
 8008194:	dd33      	ble.n	80081fe <_dtoa_r+0x99e>
 8008196:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800819a:	f1b9 0f00 	cmp.w	r9, #0
 800819e:	d10d      	bne.n	80081bc <_dtoa_r+0x95c>
 80081a0:	4621      	mov	r1, r4
 80081a2:	464b      	mov	r3, r9
 80081a4:	2205      	movs	r2, #5
 80081a6:	4628      	mov	r0, r5
 80081a8:	f000 f9d2 	bl	8008550 <__multadd>
 80081ac:	4601      	mov	r1, r0
 80081ae:	4604      	mov	r4, r0
 80081b0:	4658      	mov	r0, fp
 80081b2:	f000 fbe9 	bl	8008988 <__mcmp>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f73f adb8 	bgt.w	8007d2c <_dtoa_r+0x4cc>
 80081bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081be:	9f03      	ldr	r7, [sp, #12]
 80081c0:	ea6f 0a03 	mvn.w	sl, r3
 80081c4:	f04f 0800 	mov.w	r8, #0
 80081c8:	4621      	mov	r1, r4
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 f99e 	bl	800850c <_Bfree>
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	f43f aea7 	beq.w	8007f24 <_dtoa_r+0x6c4>
 80081d6:	f1b8 0f00 	cmp.w	r8, #0
 80081da:	d005      	beq.n	80081e8 <_dtoa_r+0x988>
 80081dc:	45b0      	cmp	r8, r6
 80081de:	d003      	beq.n	80081e8 <_dtoa_r+0x988>
 80081e0:	4641      	mov	r1, r8
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f992 	bl	800850c <_Bfree>
 80081e8:	4631      	mov	r1, r6
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f98e 	bl	800850c <_Bfree>
 80081f0:	e698      	b.n	8007f24 <_dtoa_r+0x6c4>
 80081f2:	2400      	movs	r4, #0
 80081f4:	4626      	mov	r6, r4
 80081f6:	e7e1      	b.n	80081bc <_dtoa_r+0x95c>
 80081f8:	46c2      	mov	sl, r8
 80081fa:	4626      	mov	r6, r4
 80081fc:	e596      	b.n	8007d2c <_dtoa_r+0x4cc>
 80081fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008200:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80fd 	beq.w	8008404 <_dtoa_r+0xba4>
 800820a:	2f00      	cmp	r7, #0
 800820c:	dd05      	ble.n	800821a <_dtoa_r+0x9ba>
 800820e:	4631      	mov	r1, r6
 8008210:	463a      	mov	r2, r7
 8008212:	4628      	mov	r0, r5
 8008214:	f000 fb48 	bl	80088a8 <__lshift>
 8008218:	4606      	mov	r6, r0
 800821a:	f1b8 0f00 	cmp.w	r8, #0
 800821e:	d05c      	beq.n	80082da <_dtoa_r+0xa7a>
 8008220:	4628      	mov	r0, r5
 8008222:	6871      	ldr	r1, [r6, #4]
 8008224:	f000 f932 	bl	800848c <_Balloc>
 8008228:	4607      	mov	r7, r0
 800822a:	b928      	cbnz	r0, 8008238 <_dtoa_r+0x9d8>
 800822c:	4602      	mov	r2, r0
 800822e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008232:	4b7f      	ldr	r3, [pc, #508]	; (8008430 <_dtoa_r+0xbd0>)
 8008234:	f7ff bb28 	b.w	8007888 <_dtoa_r+0x28>
 8008238:	6932      	ldr	r2, [r6, #16]
 800823a:	f106 010c 	add.w	r1, r6, #12
 800823e:	3202      	adds	r2, #2
 8008240:	0092      	lsls	r2, r2, #2
 8008242:	300c      	adds	r0, #12
 8008244:	f000 f914 	bl	8008470 <memcpy>
 8008248:	2201      	movs	r2, #1
 800824a:	4639      	mov	r1, r7
 800824c:	4628      	mov	r0, r5
 800824e:	f000 fb2b 	bl	80088a8 <__lshift>
 8008252:	46b0      	mov	r8, r6
 8008254:	4606      	mov	r6, r0
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	3301      	adds	r3, #1
 800825a:	9308      	str	r3, [sp, #32]
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	444b      	add	r3, r9
 8008260:	930a      	str	r3, [sp, #40]	; 0x28
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	9b08      	ldr	r3, [sp, #32]
 800826c:	4621      	mov	r1, r4
 800826e:	3b01      	subs	r3, #1
 8008270:	4658      	mov	r0, fp
 8008272:	9304      	str	r3, [sp, #16]
 8008274:	f7ff fa66 	bl	8007744 <quorem>
 8008278:	4603      	mov	r3, r0
 800827a:	4641      	mov	r1, r8
 800827c:	3330      	adds	r3, #48	; 0x30
 800827e:	9006      	str	r0, [sp, #24]
 8008280:	4658      	mov	r0, fp
 8008282:	930b      	str	r3, [sp, #44]	; 0x2c
 8008284:	f000 fb80 	bl	8008988 <__mcmp>
 8008288:	4632      	mov	r2, r6
 800828a:	4681      	mov	r9, r0
 800828c:	4621      	mov	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f000 fb96 	bl	80089c0 <__mdiff>
 8008294:	68c2      	ldr	r2, [r0, #12]
 8008296:	4607      	mov	r7, r0
 8008298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829a:	bb02      	cbnz	r2, 80082de <_dtoa_r+0xa7e>
 800829c:	4601      	mov	r1, r0
 800829e:	4658      	mov	r0, fp
 80082a0:	f000 fb72 	bl	8008988 <__mcmp>
 80082a4:	4602      	mov	r2, r0
 80082a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082a8:	4639      	mov	r1, r7
 80082aa:	4628      	mov	r0, r5
 80082ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80082b0:	f000 f92c 	bl	800850c <_Bfree>
 80082b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082b8:	9f08      	ldr	r7, [sp, #32]
 80082ba:	ea43 0102 	orr.w	r1, r3, r2
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	430b      	orrs	r3, r1
 80082c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c4:	d10d      	bne.n	80082e2 <_dtoa_r+0xa82>
 80082c6:	2b39      	cmp	r3, #57	; 0x39
 80082c8:	d029      	beq.n	800831e <_dtoa_r+0xabe>
 80082ca:	f1b9 0f00 	cmp.w	r9, #0
 80082ce:	dd01      	ble.n	80082d4 <_dtoa_r+0xa74>
 80082d0:	9b06      	ldr	r3, [sp, #24]
 80082d2:	3331      	adds	r3, #49	; 0x31
 80082d4:	9a04      	ldr	r2, [sp, #16]
 80082d6:	7013      	strb	r3, [r2, #0]
 80082d8:	e776      	b.n	80081c8 <_dtoa_r+0x968>
 80082da:	4630      	mov	r0, r6
 80082dc:	e7b9      	b.n	8008252 <_dtoa_r+0x9f2>
 80082de:	2201      	movs	r2, #1
 80082e0:	e7e2      	b.n	80082a8 <_dtoa_r+0xa48>
 80082e2:	f1b9 0f00 	cmp.w	r9, #0
 80082e6:	db06      	blt.n	80082f6 <_dtoa_r+0xa96>
 80082e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80082ea:	ea41 0909 	orr.w	r9, r1, r9
 80082ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082f0:	ea59 0101 	orrs.w	r1, r9, r1
 80082f4:	d120      	bne.n	8008338 <_dtoa_r+0xad8>
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	ddec      	ble.n	80082d4 <_dtoa_r+0xa74>
 80082fa:	4659      	mov	r1, fp
 80082fc:	2201      	movs	r2, #1
 80082fe:	4628      	mov	r0, r5
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	f000 fad1 	bl	80088a8 <__lshift>
 8008306:	4621      	mov	r1, r4
 8008308:	4683      	mov	fp, r0
 800830a:	f000 fb3d 	bl	8008988 <__mcmp>
 800830e:	2800      	cmp	r0, #0
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	dc02      	bgt.n	800831a <_dtoa_r+0xaba>
 8008314:	d1de      	bne.n	80082d4 <_dtoa_r+0xa74>
 8008316:	07da      	lsls	r2, r3, #31
 8008318:	d5dc      	bpl.n	80082d4 <_dtoa_r+0xa74>
 800831a:	2b39      	cmp	r3, #57	; 0x39
 800831c:	d1d8      	bne.n	80082d0 <_dtoa_r+0xa70>
 800831e:	2339      	movs	r3, #57	; 0x39
 8008320:	9a04      	ldr	r2, [sp, #16]
 8008322:	7013      	strb	r3, [r2, #0]
 8008324:	463b      	mov	r3, r7
 8008326:	461f      	mov	r7, r3
 8008328:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800832c:	3b01      	subs	r3, #1
 800832e:	2a39      	cmp	r2, #57	; 0x39
 8008330:	d050      	beq.n	80083d4 <_dtoa_r+0xb74>
 8008332:	3201      	adds	r2, #1
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	e747      	b.n	80081c8 <_dtoa_r+0x968>
 8008338:	2a00      	cmp	r2, #0
 800833a:	dd03      	ble.n	8008344 <_dtoa_r+0xae4>
 800833c:	2b39      	cmp	r3, #57	; 0x39
 800833e:	d0ee      	beq.n	800831e <_dtoa_r+0xabe>
 8008340:	3301      	adds	r3, #1
 8008342:	e7c7      	b.n	80082d4 <_dtoa_r+0xa74>
 8008344:	9a08      	ldr	r2, [sp, #32]
 8008346:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008348:	f802 3c01 	strb.w	r3, [r2, #-1]
 800834c:	428a      	cmp	r2, r1
 800834e:	d02a      	beq.n	80083a6 <_dtoa_r+0xb46>
 8008350:	4659      	mov	r1, fp
 8008352:	2300      	movs	r3, #0
 8008354:	220a      	movs	r2, #10
 8008356:	4628      	mov	r0, r5
 8008358:	f000 f8fa 	bl	8008550 <__multadd>
 800835c:	45b0      	cmp	r8, r6
 800835e:	4683      	mov	fp, r0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	f04f 020a 	mov.w	r2, #10
 8008368:	4641      	mov	r1, r8
 800836a:	4628      	mov	r0, r5
 800836c:	d107      	bne.n	800837e <_dtoa_r+0xb1e>
 800836e:	f000 f8ef 	bl	8008550 <__multadd>
 8008372:	4680      	mov	r8, r0
 8008374:	4606      	mov	r6, r0
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	3301      	adds	r3, #1
 800837a:	9308      	str	r3, [sp, #32]
 800837c:	e775      	b.n	800826a <_dtoa_r+0xa0a>
 800837e:	f000 f8e7 	bl	8008550 <__multadd>
 8008382:	4631      	mov	r1, r6
 8008384:	4680      	mov	r8, r0
 8008386:	2300      	movs	r3, #0
 8008388:	220a      	movs	r2, #10
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f8e0 	bl	8008550 <__multadd>
 8008390:	4606      	mov	r6, r0
 8008392:	e7f0      	b.n	8008376 <_dtoa_r+0xb16>
 8008394:	f1b9 0f00 	cmp.w	r9, #0
 8008398:	bfcc      	ite	gt
 800839a:	464f      	movgt	r7, r9
 800839c:	2701      	movle	r7, #1
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	4417      	add	r7, r2
 80083a6:	4659      	mov	r1, fp
 80083a8:	2201      	movs	r2, #1
 80083aa:	4628      	mov	r0, r5
 80083ac:	9308      	str	r3, [sp, #32]
 80083ae:	f000 fa7b 	bl	80088a8 <__lshift>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4683      	mov	fp, r0
 80083b6:	f000 fae7 	bl	8008988 <__mcmp>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dcb2      	bgt.n	8008324 <_dtoa_r+0xac4>
 80083be:	d102      	bne.n	80083c6 <_dtoa_r+0xb66>
 80083c0:	9b08      	ldr	r3, [sp, #32]
 80083c2:	07db      	lsls	r3, r3, #31
 80083c4:	d4ae      	bmi.n	8008324 <_dtoa_r+0xac4>
 80083c6:	463b      	mov	r3, r7
 80083c8:	461f      	mov	r7, r3
 80083ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083ce:	2a30      	cmp	r2, #48	; 0x30
 80083d0:	d0fa      	beq.n	80083c8 <_dtoa_r+0xb68>
 80083d2:	e6f9      	b.n	80081c8 <_dtoa_r+0x968>
 80083d4:	9a03      	ldr	r2, [sp, #12]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d1a5      	bne.n	8008326 <_dtoa_r+0xac6>
 80083da:	2331      	movs	r3, #49	; 0x31
 80083dc:	f10a 0a01 	add.w	sl, sl, #1
 80083e0:	e779      	b.n	80082d6 <_dtoa_r+0xa76>
 80083e2:	4b14      	ldr	r3, [pc, #80]	; (8008434 <_dtoa_r+0xbd4>)
 80083e4:	f7ff baa8 	b.w	8007938 <_dtoa_r+0xd8>
 80083e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f47f aa81 	bne.w	80078f2 <_dtoa_r+0x92>
 80083f0:	4b11      	ldr	r3, [pc, #68]	; (8008438 <_dtoa_r+0xbd8>)
 80083f2:	f7ff baa1 	b.w	8007938 <_dtoa_r+0xd8>
 80083f6:	f1b9 0f00 	cmp.w	r9, #0
 80083fa:	dc03      	bgt.n	8008404 <_dtoa_r+0xba4>
 80083fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083fe:	2b02      	cmp	r3, #2
 8008400:	f73f aecb 	bgt.w	800819a <_dtoa_r+0x93a>
 8008404:	9f03      	ldr	r7, [sp, #12]
 8008406:	4621      	mov	r1, r4
 8008408:	4658      	mov	r0, fp
 800840a:	f7ff f99b 	bl	8007744 <quorem>
 800840e:	9a03      	ldr	r2, [sp, #12]
 8008410:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008414:	f807 3b01 	strb.w	r3, [r7], #1
 8008418:	1aba      	subs	r2, r7, r2
 800841a:	4591      	cmp	r9, r2
 800841c:	ddba      	ble.n	8008394 <_dtoa_r+0xb34>
 800841e:	4659      	mov	r1, fp
 8008420:	2300      	movs	r3, #0
 8008422:	220a      	movs	r2, #10
 8008424:	4628      	mov	r0, r5
 8008426:	f000 f893 	bl	8008550 <__multadd>
 800842a:	4683      	mov	fp, r0
 800842c:	e7eb      	b.n	8008406 <_dtoa_r+0xba6>
 800842e:	bf00      	nop
 8008430:	08009b87 	.word	0x08009b87
 8008434:	08009ae4 	.word	0x08009ae4
 8008438:	08009b08 	.word	0x08009b08

0800843c <_localeconv_r>:
 800843c:	4800      	ldr	r0, [pc, #0]	; (8008440 <_localeconv_r+0x4>)
 800843e:	4770      	bx	lr
 8008440:	20000160 	.word	0x20000160

08008444 <malloc>:
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <malloc+0xc>)
 8008446:	4601      	mov	r1, r0
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	f000 bc1d 	b.w	8008c88 <_malloc_r>
 800844e:	bf00      	nop
 8008450:	2000000c 	.word	0x2000000c

08008454 <memchr>:
 8008454:	4603      	mov	r3, r0
 8008456:	b510      	push	{r4, lr}
 8008458:	b2c9      	uxtb	r1, r1
 800845a:	4402      	add	r2, r0
 800845c:	4293      	cmp	r3, r2
 800845e:	4618      	mov	r0, r3
 8008460:	d101      	bne.n	8008466 <memchr+0x12>
 8008462:	2000      	movs	r0, #0
 8008464:	e003      	b.n	800846e <memchr+0x1a>
 8008466:	7804      	ldrb	r4, [r0, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	428c      	cmp	r4, r1
 800846c:	d1f6      	bne.n	800845c <memchr+0x8>
 800846e:	bd10      	pop	{r4, pc}

08008470 <memcpy>:
 8008470:	440a      	add	r2, r1
 8008472:	4291      	cmp	r1, r2
 8008474:	f100 33ff 	add.w	r3, r0, #4294967295
 8008478:	d100      	bne.n	800847c <memcpy+0xc>
 800847a:	4770      	bx	lr
 800847c:	b510      	push	{r4, lr}
 800847e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008482:	4291      	cmp	r1, r2
 8008484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008488:	d1f9      	bne.n	800847e <memcpy+0xe>
 800848a:	bd10      	pop	{r4, pc}

0800848c <_Balloc>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008490:	4604      	mov	r4, r0
 8008492:	460d      	mov	r5, r1
 8008494:	b976      	cbnz	r6, 80084b4 <_Balloc+0x28>
 8008496:	2010      	movs	r0, #16
 8008498:	f7ff ffd4 	bl	8008444 <malloc>
 800849c:	4602      	mov	r2, r0
 800849e:	6260      	str	r0, [r4, #36]	; 0x24
 80084a0:	b920      	cbnz	r0, 80084ac <_Balloc+0x20>
 80084a2:	2166      	movs	r1, #102	; 0x66
 80084a4:	4b17      	ldr	r3, [pc, #92]	; (8008504 <_Balloc+0x78>)
 80084a6:	4818      	ldr	r0, [pc, #96]	; (8008508 <_Balloc+0x7c>)
 80084a8:	f000 fc72 	bl	8008d90 <__assert_func>
 80084ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084b0:	6006      	str	r6, [r0, #0]
 80084b2:	60c6      	str	r6, [r0, #12]
 80084b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084b6:	68f3      	ldr	r3, [r6, #12]
 80084b8:	b183      	cbz	r3, 80084dc <_Balloc+0x50>
 80084ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084c2:	b9b8      	cbnz	r0, 80084f4 <_Balloc+0x68>
 80084c4:	2101      	movs	r1, #1
 80084c6:	fa01 f605 	lsl.w	r6, r1, r5
 80084ca:	1d72      	adds	r2, r6, #5
 80084cc:	4620      	mov	r0, r4
 80084ce:	0092      	lsls	r2, r2, #2
 80084d0:	f000 fb5e 	bl	8008b90 <_calloc_r>
 80084d4:	b160      	cbz	r0, 80084f0 <_Balloc+0x64>
 80084d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084da:	e00e      	b.n	80084fa <_Balloc+0x6e>
 80084dc:	2221      	movs	r2, #33	; 0x21
 80084de:	2104      	movs	r1, #4
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fb55 	bl	8008b90 <_calloc_r>
 80084e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e8:	60f0      	str	r0, [r6, #12]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e4      	bne.n	80084ba <_Balloc+0x2e>
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	6802      	ldr	r2, [r0, #0]
 80084f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084fa:	2300      	movs	r3, #0
 80084fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008500:	e7f7      	b.n	80084f2 <_Balloc+0x66>
 8008502:	bf00      	nop
 8008504:	08009b15 	.word	0x08009b15
 8008508:	08009b98 	.word	0x08009b98

0800850c <_Bfree>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008510:	4605      	mov	r5, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b976      	cbnz	r6, 8008534 <_Bfree+0x28>
 8008516:	2010      	movs	r0, #16
 8008518:	f7ff ff94 	bl	8008444 <malloc>
 800851c:	4602      	mov	r2, r0
 800851e:	6268      	str	r0, [r5, #36]	; 0x24
 8008520:	b920      	cbnz	r0, 800852c <_Bfree+0x20>
 8008522:	218a      	movs	r1, #138	; 0x8a
 8008524:	4b08      	ldr	r3, [pc, #32]	; (8008548 <_Bfree+0x3c>)
 8008526:	4809      	ldr	r0, [pc, #36]	; (800854c <_Bfree+0x40>)
 8008528:	f000 fc32 	bl	8008d90 <__assert_func>
 800852c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008530:	6006      	str	r6, [r0, #0]
 8008532:	60c6      	str	r6, [r0, #12]
 8008534:	b13c      	cbz	r4, 8008546 <_Bfree+0x3a>
 8008536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008538:	6862      	ldr	r2, [r4, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008540:	6021      	str	r1, [r4, #0]
 8008542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	08009b15 	.word	0x08009b15
 800854c:	08009b98 	.word	0x08009b98

08008550 <__multadd>:
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008554:	4607      	mov	r7, r0
 8008556:	460c      	mov	r4, r1
 8008558:	461e      	mov	r6, r3
 800855a:	2000      	movs	r0, #0
 800855c:	690d      	ldr	r5, [r1, #16]
 800855e:	f101 0c14 	add.w	ip, r1, #20
 8008562:	f8dc 3000 	ldr.w	r3, [ip]
 8008566:	3001      	adds	r0, #1
 8008568:	b299      	uxth	r1, r3
 800856a:	fb02 6101 	mla	r1, r2, r1, r6
 800856e:	0c1e      	lsrs	r6, r3, #16
 8008570:	0c0b      	lsrs	r3, r1, #16
 8008572:	fb02 3306 	mla	r3, r2, r6, r3
 8008576:	b289      	uxth	r1, r1
 8008578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800857c:	4285      	cmp	r5, r0
 800857e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008582:	f84c 1b04 	str.w	r1, [ip], #4
 8008586:	dcec      	bgt.n	8008562 <__multadd+0x12>
 8008588:	b30e      	cbz	r6, 80085ce <__multadd+0x7e>
 800858a:	68a3      	ldr	r3, [r4, #8]
 800858c:	42ab      	cmp	r3, r5
 800858e:	dc19      	bgt.n	80085c4 <__multadd+0x74>
 8008590:	6861      	ldr	r1, [r4, #4]
 8008592:	4638      	mov	r0, r7
 8008594:	3101      	adds	r1, #1
 8008596:	f7ff ff79 	bl	800848c <_Balloc>
 800859a:	4680      	mov	r8, r0
 800859c:	b928      	cbnz	r0, 80085aa <__multadd+0x5a>
 800859e:	4602      	mov	r2, r0
 80085a0:	21b5      	movs	r1, #181	; 0xb5
 80085a2:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <__multadd+0x84>)
 80085a4:	480c      	ldr	r0, [pc, #48]	; (80085d8 <__multadd+0x88>)
 80085a6:	f000 fbf3 	bl	8008d90 <__assert_func>
 80085aa:	6922      	ldr	r2, [r4, #16]
 80085ac:	f104 010c 	add.w	r1, r4, #12
 80085b0:	3202      	adds	r2, #2
 80085b2:	0092      	lsls	r2, r2, #2
 80085b4:	300c      	adds	r0, #12
 80085b6:	f7ff ff5b 	bl	8008470 <memcpy>
 80085ba:	4621      	mov	r1, r4
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff ffa5 	bl	800850c <_Bfree>
 80085c2:	4644      	mov	r4, r8
 80085c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085c8:	3501      	adds	r5, #1
 80085ca:	615e      	str	r6, [r3, #20]
 80085cc:	6125      	str	r5, [r4, #16]
 80085ce:	4620      	mov	r0, r4
 80085d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d4:	08009b87 	.word	0x08009b87
 80085d8:	08009b98 	.word	0x08009b98

080085dc <__hi0bits>:
 80085dc:	0c02      	lsrs	r2, r0, #16
 80085de:	0412      	lsls	r2, r2, #16
 80085e0:	4603      	mov	r3, r0
 80085e2:	b9ca      	cbnz	r2, 8008618 <__hi0bits+0x3c>
 80085e4:	0403      	lsls	r3, r0, #16
 80085e6:	2010      	movs	r0, #16
 80085e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80085ec:	bf04      	itt	eq
 80085ee:	021b      	lsleq	r3, r3, #8
 80085f0:	3008      	addeq	r0, #8
 80085f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80085f6:	bf04      	itt	eq
 80085f8:	011b      	lsleq	r3, r3, #4
 80085fa:	3004      	addeq	r0, #4
 80085fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008600:	bf04      	itt	eq
 8008602:	009b      	lsleq	r3, r3, #2
 8008604:	3002      	addeq	r0, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	db05      	blt.n	8008616 <__hi0bits+0x3a>
 800860a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800860e:	f100 0001 	add.w	r0, r0, #1
 8008612:	bf08      	it	eq
 8008614:	2020      	moveq	r0, #32
 8008616:	4770      	bx	lr
 8008618:	2000      	movs	r0, #0
 800861a:	e7e5      	b.n	80085e8 <__hi0bits+0xc>

0800861c <__lo0bits>:
 800861c:	6803      	ldr	r3, [r0, #0]
 800861e:	4602      	mov	r2, r0
 8008620:	f013 0007 	ands.w	r0, r3, #7
 8008624:	d00b      	beq.n	800863e <__lo0bits+0x22>
 8008626:	07d9      	lsls	r1, r3, #31
 8008628:	d421      	bmi.n	800866e <__lo0bits+0x52>
 800862a:	0798      	lsls	r0, r3, #30
 800862c:	bf49      	itett	mi
 800862e:	085b      	lsrmi	r3, r3, #1
 8008630:	089b      	lsrpl	r3, r3, #2
 8008632:	2001      	movmi	r0, #1
 8008634:	6013      	strmi	r3, [r2, #0]
 8008636:	bf5c      	itt	pl
 8008638:	2002      	movpl	r0, #2
 800863a:	6013      	strpl	r3, [r2, #0]
 800863c:	4770      	bx	lr
 800863e:	b299      	uxth	r1, r3
 8008640:	b909      	cbnz	r1, 8008646 <__lo0bits+0x2a>
 8008642:	2010      	movs	r0, #16
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	b2d9      	uxtb	r1, r3
 8008648:	b909      	cbnz	r1, 800864e <__lo0bits+0x32>
 800864a:	3008      	adds	r0, #8
 800864c:	0a1b      	lsrs	r3, r3, #8
 800864e:	0719      	lsls	r1, r3, #28
 8008650:	bf04      	itt	eq
 8008652:	091b      	lsreq	r3, r3, #4
 8008654:	3004      	addeq	r0, #4
 8008656:	0799      	lsls	r1, r3, #30
 8008658:	bf04      	itt	eq
 800865a:	089b      	lsreq	r3, r3, #2
 800865c:	3002      	addeq	r0, #2
 800865e:	07d9      	lsls	r1, r3, #31
 8008660:	d403      	bmi.n	800866a <__lo0bits+0x4e>
 8008662:	085b      	lsrs	r3, r3, #1
 8008664:	f100 0001 	add.w	r0, r0, #1
 8008668:	d003      	beq.n	8008672 <__lo0bits+0x56>
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	4770      	bx	lr
 800866e:	2000      	movs	r0, #0
 8008670:	4770      	bx	lr
 8008672:	2020      	movs	r0, #32
 8008674:	4770      	bx	lr
	...

08008678 <__i2b>:
 8008678:	b510      	push	{r4, lr}
 800867a:	460c      	mov	r4, r1
 800867c:	2101      	movs	r1, #1
 800867e:	f7ff ff05 	bl	800848c <_Balloc>
 8008682:	4602      	mov	r2, r0
 8008684:	b928      	cbnz	r0, 8008692 <__i2b+0x1a>
 8008686:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800868a:	4b04      	ldr	r3, [pc, #16]	; (800869c <__i2b+0x24>)
 800868c:	4804      	ldr	r0, [pc, #16]	; (80086a0 <__i2b+0x28>)
 800868e:	f000 fb7f 	bl	8008d90 <__assert_func>
 8008692:	2301      	movs	r3, #1
 8008694:	6144      	str	r4, [r0, #20]
 8008696:	6103      	str	r3, [r0, #16]
 8008698:	bd10      	pop	{r4, pc}
 800869a:	bf00      	nop
 800869c:	08009b87 	.word	0x08009b87
 80086a0:	08009b98 	.word	0x08009b98

080086a4 <__multiply>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	4691      	mov	r9, r2
 80086aa:	690a      	ldr	r2, [r1, #16]
 80086ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086b0:	460c      	mov	r4, r1
 80086b2:	429a      	cmp	r2, r3
 80086b4:	bfbe      	ittt	lt
 80086b6:	460b      	movlt	r3, r1
 80086b8:	464c      	movlt	r4, r9
 80086ba:	4699      	movlt	r9, r3
 80086bc:	6927      	ldr	r7, [r4, #16]
 80086be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	6861      	ldr	r1, [r4, #4]
 80086c6:	eb07 060a 	add.w	r6, r7, sl
 80086ca:	42b3      	cmp	r3, r6
 80086cc:	b085      	sub	sp, #20
 80086ce:	bfb8      	it	lt
 80086d0:	3101      	addlt	r1, #1
 80086d2:	f7ff fedb 	bl	800848c <_Balloc>
 80086d6:	b930      	cbnz	r0, 80086e6 <__multiply+0x42>
 80086d8:	4602      	mov	r2, r0
 80086da:	f240 115d 	movw	r1, #349	; 0x15d
 80086de:	4b43      	ldr	r3, [pc, #268]	; (80087ec <__multiply+0x148>)
 80086e0:	4843      	ldr	r0, [pc, #268]	; (80087f0 <__multiply+0x14c>)
 80086e2:	f000 fb55 	bl	8008d90 <__assert_func>
 80086e6:	f100 0514 	add.w	r5, r0, #20
 80086ea:	462b      	mov	r3, r5
 80086ec:	2200      	movs	r2, #0
 80086ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086f2:	4543      	cmp	r3, r8
 80086f4:	d321      	bcc.n	800873a <__multiply+0x96>
 80086f6:	f104 0314 	add.w	r3, r4, #20
 80086fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086fe:	f109 0314 	add.w	r3, r9, #20
 8008702:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008706:	9202      	str	r2, [sp, #8]
 8008708:	1b3a      	subs	r2, r7, r4
 800870a:	3a15      	subs	r2, #21
 800870c:	f022 0203 	bic.w	r2, r2, #3
 8008710:	3204      	adds	r2, #4
 8008712:	f104 0115 	add.w	r1, r4, #21
 8008716:	428f      	cmp	r7, r1
 8008718:	bf38      	it	cc
 800871a:	2204      	movcc	r2, #4
 800871c:	9201      	str	r2, [sp, #4]
 800871e:	9a02      	ldr	r2, [sp, #8]
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	429a      	cmp	r2, r3
 8008724:	d80c      	bhi.n	8008740 <__multiply+0x9c>
 8008726:	2e00      	cmp	r6, #0
 8008728:	dd03      	ble.n	8008732 <__multiply+0x8e>
 800872a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800872e:	2b00      	cmp	r3, #0
 8008730:	d059      	beq.n	80087e6 <__multiply+0x142>
 8008732:	6106      	str	r6, [r0, #16]
 8008734:	b005      	add	sp, #20
 8008736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873a:	f843 2b04 	str.w	r2, [r3], #4
 800873e:	e7d8      	b.n	80086f2 <__multiply+0x4e>
 8008740:	f8b3 a000 	ldrh.w	sl, [r3]
 8008744:	f1ba 0f00 	cmp.w	sl, #0
 8008748:	d023      	beq.n	8008792 <__multiply+0xee>
 800874a:	46a9      	mov	r9, r5
 800874c:	f04f 0c00 	mov.w	ip, #0
 8008750:	f104 0e14 	add.w	lr, r4, #20
 8008754:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008758:	f8d9 1000 	ldr.w	r1, [r9]
 800875c:	fa1f fb82 	uxth.w	fp, r2
 8008760:	b289      	uxth	r1, r1
 8008762:	fb0a 110b 	mla	r1, sl, fp, r1
 8008766:	4461      	add	r1, ip
 8008768:	f8d9 c000 	ldr.w	ip, [r9]
 800876c:	0c12      	lsrs	r2, r2, #16
 800876e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008772:	fb0a c202 	mla	r2, sl, r2, ip
 8008776:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800877a:	b289      	uxth	r1, r1
 800877c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008780:	4577      	cmp	r7, lr
 8008782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008786:	f849 1b04 	str.w	r1, [r9], #4
 800878a:	d8e3      	bhi.n	8008754 <__multiply+0xb0>
 800878c:	9a01      	ldr	r2, [sp, #4]
 800878e:	f845 c002 	str.w	ip, [r5, r2]
 8008792:	9a03      	ldr	r2, [sp, #12]
 8008794:	3304      	adds	r3, #4
 8008796:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800879a:	f1b9 0f00 	cmp.w	r9, #0
 800879e:	d020      	beq.n	80087e2 <__multiply+0x13e>
 80087a0:	46ae      	mov	lr, r5
 80087a2:	f04f 0a00 	mov.w	sl, #0
 80087a6:	6829      	ldr	r1, [r5, #0]
 80087a8:	f104 0c14 	add.w	ip, r4, #20
 80087ac:	f8bc b000 	ldrh.w	fp, [ip]
 80087b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087b4:	b289      	uxth	r1, r1
 80087b6:	fb09 220b 	mla	r2, r9, fp, r2
 80087ba:	4492      	add	sl, r2
 80087bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087c0:	f84e 1b04 	str.w	r1, [lr], #4
 80087c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087c8:	f8be 1000 	ldrh.w	r1, [lr]
 80087cc:	0c12      	lsrs	r2, r2, #16
 80087ce:	fb09 1102 	mla	r1, r9, r2, r1
 80087d2:	4567      	cmp	r7, ip
 80087d4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087dc:	d8e6      	bhi.n	80087ac <__multiply+0x108>
 80087de:	9a01      	ldr	r2, [sp, #4]
 80087e0:	50a9      	str	r1, [r5, r2]
 80087e2:	3504      	adds	r5, #4
 80087e4:	e79b      	b.n	800871e <__multiply+0x7a>
 80087e6:	3e01      	subs	r6, #1
 80087e8:	e79d      	b.n	8008726 <__multiply+0x82>
 80087ea:	bf00      	nop
 80087ec:	08009b87 	.word	0x08009b87
 80087f0:	08009b98 	.word	0x08009b98

080087f4 <__pow5mult>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	4615      	mov	r5, r2
 80087fa:	f012 0203 	ands.w	r2, r2, #3
 80087fe:	4606      	mov	r6, r0
 8008800:	460f      	mov	r7, r1
 8008802:	d007      	beq.n	8008814 <__pow5mult+0x20>
 8008804:	4c25      	ldr	r4, [pc, #148]	; (800889c <__pow5mult+0xa8>)
 8008806:	3a01      	subs	r2, #1
 8008808:	2300      	movs	r3, #0
 800880a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800880e:	f7ff fe9f 	bl	8008550 <__multadd>
 8008812:	4607      	mov	r7, r0
 8008814:	10ad      	asrs	r5, r5, #2
 8008816:	d03d      	beq.n	8008894 <__pow5mult+0xa0>
 8008818:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800881a:	b97c      	cbnz	r4, 800883c <__pow5mult+0x48>
 800881c:	2010      	movs	r0, #16
 800881e:	f7ff fe11 	bl	8008444 <malloc>
 8008822:	4602      	mov	r2, r0
 8008824:	6270      	str	r0, [r6, #36]	; 0x24
 8008826:	b928      	cbnz	r0, 8008834 <__pow5mult+0x40>
 8008828:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800882c:	4b1c      	ldr	r3, [pc, #112]	; (80088a0 <__pow5mult+0xac>)
 800882e:	481d      	ldr	r0, [pc, #116]	; (80088a4 <__pow5mult+0xb0>)
 8008830:	f000 faae 	bl	8008d90 <__assert_func>
 8008834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008838:	6004      	str	r4, [r0, #0]
 800883a:	60c4      	str	r4, [r0, #12]
 800883c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008844:	b94c      	cbnz	r4, 800885a <__pow5mult+0x66>
 8008846:	f240 2171 	movw	r1, #625	; 0x271
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff ff14 	bl	8008678 <__i2b>
 8008850:	2300      	movs	r3, #0
 8008852:	4604      	mov	r4, r0
 8008854:	f8c8 0008 	str.w	r0, [r8, #8]
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	07eb      	lsls	r3, r5, #31
 8008860:	d50a      	bpl.n	8008878 <__pow5mult+0x84>
 8008862:	4639      	mov	r1, r7
 8008864:	4622      	mov	r2, r4
 8008866:	4630      	mov	r0, r6
 8008868:	f7ff ff1c 	bl	80086a4 <__multiply>
 800886c:	4680      	mov	r8, r0
 800886e:	4639      	mov	r1, r7
 8008870:	4630      	mov	r0, r6
 8008872:	f7ff fe4b 	bl	800850c <_Bfree>
 8008876:	4647      	mov	r7, r8
 8008878:	106d      	asrs	r5, r5, #1
 800887a:	d00b      	beq.n	8008894 <__pow5mult+0xa0>
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	b938      	cbnz	r0, 8008890 <__pow5mult+0x9c>
 8008880:	4622      	mov	r2, r4
 8008882:	4621      	mov	r1, r4
 8008884:	4630      	mov	r0, r6
 8008886:	f7ff ff0d 	bl	80086a4 <__multiply>
 800888a:	6020      	str	r0, [r4, #0]
 800888c:	f8c0 9000 	str.w	r9, [r0]
 8008890:	4604      	mov	r4, r0
 8008892:	e7e4      	b.n	800885e <__pow5mult+0x6a>
 8008894:	4638      	mov	r0, r7
 8008896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889a:	bf00      	nop
 800889c:	08009ce8 	.word	0x08009ce8
 80088a0:	08009b15 	.word	0x08009b15
 80088a4:	08009b98 	.word	0x08009b98

080088a8 <__lshift>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	4607      	mov	r7, r0
 80088b0:	4691      	mov	r9, r2
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	6849      	ldr	r1, [r1, #4]
 80088b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088ba:	68a3      	ldr	r3, [r4, #8]
 80088bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088c0:	f108 0601 	add.w	r6, r8, #1
 80088c4:	42b3      	cmp	r3, r6
 80088c6:	db0b      	blt.n	80088e0 <__lshift+0x38>
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff fddf 	bl	800848c <_Balloc>
 80088ce:	4605      	mov	r5, r0
 80088d0:	b948      	cbnz	r0, 80088e6 <__lshift+0x3e>
 80088d2:	4602      	mov	r2, r0
 80088d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088d8:	4b29      	ldr	r3, [pc, #164]	; (8008980 <__lshift+0xd8>)
 80088da:	482a      	ldr	r0, [pc, #168]	; (8008984 <__lshift+0xdc>)
 80088dc:	f000 fa58 	bl	8008d90 <__assert_func>
 80088e0:	3101      	adds	r1, #1
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	e7ee      	b.n	80088c4 <__lshift+0x1c>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f100 0114 	add.w	r1, r0, #20
 80088ec:	f100 0210 	add.w	r2, r0, #16
 80088f0:	4618      	mov	r0, r3
 80088f2:	4553      	cmp	r3, sl
 80088f4:	db37      	blt.n	8008966 <__lshift+0xbe>
 80088f6:	6920      	ldr	r0, [r4, #16]
 80088f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088fc:	f104 0314 	add.w	r3, r4, #20
 8008900:	f019 091f 	ands.w	r9, r9, #31
 8008904:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800890c:	d02f      	beq.n	800896e <__lshift+0xc6>
 800890e:	468a      	mov	sl, r1
 8008910:	f04f 0c00 	mov.w	ip, #0
 8008914:	f1c9 0e20 	rsb	lr, r9, #32
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	fa02 f209 	lsl.w	r2, r2, r9
 800891e:	ea42 020c 	orr.w	r2, r2, ip
 8008922:	f84a 2b04 	str.w	r2, [sl], #4
 8008926:	f853 2b04 	ldr.w	r2, [r3], #4
 800892a:	4298      	cmp	r0, r3
 800892c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008930:	d8f2      	bhi.n	8008918 <__lshift+0x70>
 8008932:	1b03      	subs	r3, r0, r4
 8008934:	3b15      	subs	r3, #21
 8008936:	f023 0303 	bic.w	r3, r3, #3
 800893a:	3304      	adds	r3, #4
 800893c:	f104 0215 	add.w	r2, r4, #21
 8008940:	4290      	cmp	r0, r2
 8008942:	bf38      	it	cc
 8008944:	2304      	movcc	r3, #4
 8008946:	f841 c003 	str.w	ip, [r1, r3]
 800894a:	f1bc 0f00 	cmp.w	ip, #0
 800894e:	d001      	beq.n	8008954 <__lshift+0xac>
 8008950:	f108 0602 	add.w	r6, r8, #2
 8008954:	3e01      	subs	r6, #1
 8008956:	4638      	mov	r0, r7
 8008958:	4621      	mov	r1, r4
 800895a:	612e      	str	r6, [r5, #16]
 800895c:	f7ff fdd6 	bl	800850c <_Bfree>
 8008960:	4628      	mov	r0, r5
 8008962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008966:	f842 0f04 	str.w	r0, [r2, #4]!
 800896a:	3301      	adds	r3, #1
 800896c:	e7c1      	b.n	80088f2 <__lshift+0x4a>
 800896e:	3904      	subs	r1, #4
 8008970:	f853 2b04 	ldr.w	r2, [r3], #4
 8008974:	4298      	cmp	r0, r3
 8008976:	f841 2f04 	str.w	r2, [r1, #4]!
 800897a:	d8f9      	bhi.n	8008970 <__lshift+0xc8>
 800897c:	e7ea      	b.n	8008954 <__lshift+0xac>
 800897e:	bf00      	nop
 8008980:	08009b87 	.word	0x08009b87
 8008984:	08009b98 	.word	0x08009b98

08008988 <__mcmp>:
 8008988:	4603      	mov	r3, r0
 800898a:	690a      	ldr	r2, [r1, #16]
 800898c:	6900      	ldr	r0, [r0, #16]
 800898e:	b530      	push	{r4, r5, lr}
 8008990:	1a80      	subs	r0, r0, r2
 8008992:	d10d      	bne.n	80089b0 <__mcmp+0x28>
 8008994:	3314      	adds	r3, #20
 8008996:	3114      	adds	r1, #20
 8008998:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800899c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089a8:	4295      	cmp	r5, r2
 80089aa:	d002      	beq.n	80089b2 <__mcmp+0x2a>
 80089ac:	d304      	bcc.n	80089b8 <__mcmp+0x30>
 80089ae:	2001      	movs	r0, #1
 80089b0:	bd30      	pop	{r4, r5, pc}
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	d3f4      	bcc.n	80089a0 <__mcmp+0x18>
 80089b6:	e7fb      	b.n	80089b0 <__mcmp+0x28>
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	e7f8      	b.n	80089b0 <__mcmp+0x28>
	...

080089c0 <__mdiff>:
 80089c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	460d      	mov	r5, r1
 80089c6:	4607      	mov	r7, r0
 80089c8:	4611      	mov	r1, r2
 80089ca:	4628      	mov	r0, r5
 80089cc:	4614      	mov	r4, r2
 80089ce:	f7ff ffdb 	bl	8008988 <__mcmp>
 80089d2:	1e06      	subs	r6, r0, #0
 80089d4:	d111      	bne.n	80089fa <__mdiff+0x3a>
 80089d6:	4631      	mov	r1, r6
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fd57 	bl	800848c <_Balloc>
 80089de:	4602      	mov	r2, r0
 80089e0:	b928      	cbnz	r0, 80089ee <__mdiff+0x2e>
 80089e2:	f240 2132 	movw	r1, #562	; 0x232
 80089e6:	4b3a      	ldr	r3, [pc, #232]	; (8008ad0 <__mdiff+0x110>)
 80089e8:	483a      	ldr	r0, [pc, #232]	; (8008ad4 <__mdiff+0x114>)
 80089ea:	f000 f9d1 	bl	8008d90 <__assert_func>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089f4:	4610      	mov	r0, r2
 80089f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fa:	bfa4      	itt	ge
 80089fc:	4623      	movge	r3, r4
 80089fe:	462c      	movge	r4, r5
 8008a00:	4638      	mov	r0, r7
 8008a02:	6861      	ldr	r1, [r4, #4]
 8008a04:	bfa6      	itte	ge
 8008a06:	461d      	movge	r5, r3
 8008a08:	2600      	movge	r6, #0
 8008a0a:	2601      	movlt	r6, #1
 8008a0c:	f7ff fd3e 	bl	800848c <_Balloc>
 8008a10:	4602      	mov	r2, r0
 8008a12:	b918      	cbnz	r0, 8008a1c <__mdiff+0x5c>
 8008a14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a18:	4b2d      	ldr	r3, [pc, #180]	; (8008ad0 <__mdiff+0x110>)
 8008a1a:	e7e5      	b.n	80089e8 <__mdiff+0x28>
 8008a1c:	f102 0814 	add.w	r8, r2, #20
 8008a20:	46c2      	mov	sl, r8
 8008a22:	f04f 0c00 	mov.w	ip, #0
 8008a26:	6927      	ldr	r7, [r4, #16]
 8008a28:	60c6      	str	r6, [r0, #12]
 8008a2a:	692e      	ldr	r6, [r5, #16]
 8008a2c:	f104 0014 	add.w	r0, r4, #20
 8008a30:	f105 0914 	add.w	r9, r5, #20
 8008a34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008a38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a3c:	3410      	adds	r4, #16
 8008a3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008a42:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a46:	fa1f f18b 	uxth.w	r1, fp
 8008a4a:	448c      	add	ip, r1
 8008a4c:	b299      	uxth	r1, r3
 8008a4e:	0c1b      	lsrs	r3, r3, #16
 8008a50:	ebac 0101 	sub.w	r1, ip, r1
 8008a54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a5c:	b289      	uxth	r1, r1
 8008a5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008a62:	454e      	cmp	r6, r9
 8008a64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a68:	f84a 3b04 	str.w	r3, [sl], #4
 8008a6c:	d8e7      	bhi.n	8008a3e <__mdiff+0x7e>
 8008a6e:	1b73      	subs	r3, r6, r5
 8008a70:	3b15      	subs	r3, #21
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	3515      	adds	r5, #21
 8008a78:	3304      	adds	r3, #4
 8008a7a:	42ae      	cmp	r6, r5
 8008a7c:	bf38      	it	cc
 8008a7e:	2304      	movcc	r3, #4
 8008a80:	4418      	add	r0, r3
 8008a82:	4443      	add	r3, r8
 8008a84:	461e      	mov	r6, r3
 8008a86:	4605      	mov	r5, r0
 8008a88:	4575      	cmp	r5, lr
 8008a8a:	d30e      	bcc.n	8008aaa <__mdiff+0xea>
 8008a8c:	f10e 0103 	add.w	r1, lr, #3
 8008a90:	1a09      	subs	r1, r1, r0
 8008a92:	f021 0103 	bic.w	r1, r1, #3
 8008a96:	3803      	subs	r0, #3
 8008a98:	4586      	cmp	lr, r0
 8008a9a:	bf38      	it	cc
 8008a9c:	2100      	movcc	r1, #0
 8008a9e:	4419      	add	r1, r3
 8008aa0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008aa4:	b18b      	cbz	r3, 8008aca <__mdiff+0x10a>
 8008aa6:	6117      	str	r7, [r2, #16]
 8008aa8:	e7a4      	b.n	80089f4 <__mdiff+0x34>
 8008aaa:	f855 8b04 	ldr.w	r8, [r5], #4
 8008aae:	fa1f f188 	uxth.w	r1, r8
 8008ab2:	4461      	add	r1, ip
 8008ab4:	140c      	asrs	r4, r1, #16
 8008ab6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008aba:	b289      	uxth	r1, r1
 8008abc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ac0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008ac4:	f846 1b04 	str.w	r1, [r6], #4
 8008ac8:	e7de      	b.n	8008a88 <__mdiff+0xc8>
 8008aca:	3f01      	subs	r7, #1
 8008acc:	e7e8      	b.n	8008aa0 <__mdiff+0xe0>
 8008ace:	bf00      	nop
 8008ad0:	08009b87 	.word	0x08009b87
 8008ad4:	08009b98 	.word	0x08009b98

08008ad8 <__d2b>:
 8008ad8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008adc:	2101      	movs	r1, #1
 8008ade:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008ae2:	4690      	mov	r8, r2
 8008ae4:	461d      	mov	r5, r3
 8008ae6:	f7ff fcd1 	bl	800848c <_Balloc>
 8008aea:	4604      	mov	r4, r0
 8008aec:	b930      	cbnz	r0, 8008afc <__d2b+0x24>
 8008aee:	4602      	mov	r2, r0
 8008af0:	f240 310a 	movw	r1, #778	; 0x30a
 8008af4:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <__d2b+0xb0>)
 8008af6:	4825      	ldr	r0, [pc, #148]	; (8008b8c <__d2b+0xb4>)
 8008af8:	f000 f94a 	bl	8008d90 <__assert_func>
 8008afc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008b00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008b04:	bb2d      	cbnz	r5, 8008b52 <__d2b+0x7a>
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	f1b8 0300 	subs.w	r3, r8, #0
 8008b0c:	d026      	beq.n	8008b5c <__d2b+0x84>
 8008b0e:	4668      	mov	r0, sp
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	f7ff fd83 	bl	800861c <__lo0bits>
 8008b16:	9900      	ldr	r1, [sp, #0]
 8008b18:	b1f0      	cbz	r0, 8008b58 <__d2b+0x80>
 8008b1a:	9a01      	ldr	r2, [sp, #4]
 8008b1c:	f1c0 0320 	rsb	r3, r0, #32
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	430b      	orrs	r3, r1
 8008b26:	40c2      	lsrs	r2, r0
 8008b28:	6163      	str	r3, [r4, #20]
 8008b2a:	9201      	str	r2, [sp, #4]
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bf14      	ite	ne
 8008b32:	2102      	movne	r1, #2
 8008b34:	2101      	moveq	r1, #1
 8008b36:	61a3      	str	r3, [r4, #24]
 8008b38:	6121      	str	r1, [r4, #16]
 8008b3a:	b1c5      	cbz	r5, 8008b6e <__d2b+0x96>
 8008b3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b40:	4405      	add	r5, r0
 8008b42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b46:	603d      	str	r5, [r7, #0]
 8008b48:	6030      	str	r0, [r6, #0]
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	b002      	add	sp, #8
 8008b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b56:	e7d6      	b.n	8008b06 <__d2b+0x2e>
 8008b58:	6161      	str	r1, [r4, #20]
 8008b5a:	e7e7      	b.n	8008b2c <__d2b+0x54>
 8008b5c:	a801      	add	r0, sp, #4
 8008b5e:	f7ff fd5d 	bl	800861c <__lo0bits>
 8008b62:	2101      	movs	r1, #1
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	6121      	str	r1, [r4, #16]
 8008b68:	6163      	str	r3, [r4, #20]
 8008b6a:	3020      	adds	r0, #32
 8008b6c:	e7e5      	b.n	8008b3a <__d2b+0x62>
 8008b6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008b72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b76:	6038      	str	r0, [r7, #0]
 8008b78:	6918      	ldr	r0, [r3, #16]
 8008b7a:	f7ff fd2f 	bl	80085dc <__hi0bits>
 8008b7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008b82:	6031      	str	r1, [r6, #0]
 8008b84:	e7e1      	b.n	8008b4a <__d2b+0x72>
 8008b86:	bf00      	nop
 8008b88:	08009b87 	.word	0x08009b87
 8008b8c:	08009b98 	.word	0x08009b98

08008b90 <_calloc_r>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	fba1 5402 	umull	r5, r4, r1, r2
 8008b96:	b934      	cbnz	r4, 8008ba6 <_calloc_r+0x16>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f000 f875 	bl	8008c88 <_malloc_r>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	b928      	cbnz	r0, 8008bae <_calloc_r+0x1e>
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	bd70      	pop	{r4, r5, r6, pc}
 8008ba6:	220c      	movs	r2, #12
 8008ba8:	2600      	movs	r6, #0
 8008baa:	6002      	str	r2, [r0, #0]
 8008bac:	e7f9      	b.n	8008ba2 <_calloc_r+0x12>
 8008bae:	462a      	mov	r2, r5
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f7fe f95f 	bl	8006e74 <memset>
 8008bb6:	e7f4      	b.n	8008ba2 <_calloc_r+0x12>

08008bb8 <_free_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4605      	mov	r5, r0
 8008bbc:	2900      	cmp	r1, #0
 8008bbe:	d040      	beq.n	8008c42 <_free_r+0x8a>
 8008bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bc4:	1f0c      	subs	r4, r1, #4
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	bfb8      	it	lt
 8008bca:	18e4      	addlt	r4, r4, r3
 8008bcc:	f000 f922 	bl	8008e14 <__malloc_lock>
 8008bd0:	4a1c      	ldr	r2, [pc, #112]	; (8008c44 <_free_r+0x8c>)
 8008bd2:	6813      	ldr	r3, [r2, #0]
 8008bd4:	b933      	cbnz	r3, 8008be4 <_free_r+0x2c>
 8008bd6:	6063      	str	r3, [r4, #4]
 8008bd8:	6014      	str	r4, [r2, #0]
 8008bda:	4628      	mov	r0, r5
 8008bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008be0:	f000 b91e 	b.w	8008e20 <__malloc_unlock>
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	d908      	bls.n	8008bfa <_free_r+0x42>
 8008be8:	6820      	ldr	r0, [r4, #0]
 8008bea:	1821      	adds	r1, r4, r0
 8008bec:	428b      	cmp	r3, r1
 8008bee:	bf01      	itttt	eq
 8008bf0:	6819      	ldreq	r1, [r3, #0]
 8008bf2:	685b      	ldreq	r3, [r3, #4]
 8008bf4:	1809      	addeq	r1, r1, r0
 8008bf6:	6021      	streq	r1, [r4, #0]
 8008bf8:	e7ed      	b.n	8008bd6 <_free_r+0x1e>
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	b10b      	cbz	r3, 8008c04 <_free_r+0x4c>
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d9fa      	bls.n	8008bfa <_free_r+0x42>
 8008c04:	6811      	ldr	r1, [r2, #0]
 8008c06:	1850      	adds	r0, r2, r1
 8008c08:	42a0      	cmp	r0, r4
 8008c0a:	d10b      	bne.n	8008c24 <_free_r+0x6c>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	4401      	add	r1, r0
 8008c10:	1850      	adds	r0, r2, r1
 8008c12:	4283      	cmp	r3, r0
 8008c14:	6011      	str	r1, [r2, #0]
 8008c16:	d1e0      	bne.n	8008bda <_free_r+0x22>
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	4401      	add	r1, r0
 8008c1e:	6011      	str	r1, [r2, #0]
 8008c20:	6053      	str	r3, [r2, #4]
 8008c22:	e7da      	b.n	8008bda <_free_r+0x22>
 8008c24:	d902      	bls.n	8008c2c <_free_r+0x74>
 8008c26:	230c      	movs	r3, #12
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	e7d6      	b.n	8008bda <_free_r+0x22>
 8008c2c:	6820      	ldr	r0, [r4, #0]
 8008c2e:	1821      	adds	r1, r4, r0
 8008c30:	428b      	cmp	r3, r1
 8008c32:	bf01      	itttt	eq
 8008c34:	6819      	ldreq	r1, [r3, #0]
 8008c36:	685b      	ldreq	r3, [r3, #4]
 8008c38:	1809      	addeq	r1, r1, r0
 8008c3a:	6021      	streq	r1, [r4, #0]
 8008c3c:	6063      	str	r3, [r4, #4]
 8008c3e:	6054      	str	r4, [r2, #4]
 8008c40:	e7cb      	b.n	8008bda <_free_r+0x22>
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20000768 	.word	0x20000768

08008c48 <sbrk_aligned>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	4e0e      	ldr	r6, [pc, #56]	; (8008c84 <sbrk_aligned+0x3c>)
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	6831      	ldr	r1, [r6, #0]
 8008c50:	4605      	mov	r5, r0
 8008c52:	b911      	cbnz	r1, 8008c5a <sbrk_aligned+0x12>
 8008c54:	f000 f88c 	bl	8008d70 <_sbrk_r>
 8008c58:	6030      	str	r0, [r6, #0]
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	f000 f887 	bl	8008d70 <_sbrk_r>
 8008c62:	1c43      	adds	r3, r0, #1
 8008c64:	d00a      	beq.n	8008c7c <sbrk_aligned+0x34>
 8008c66:	1cc4      	adds	r4, r0, #3
 8008c68:	f024 0403 	bic.w	r4, r4, #3
 8008c6c:	42a0      	cmp	r0, r4
 8008c6e:	d007      	beq.n	8008c80 <sbrk_aligned+0x38>
 8008c70:	1a21      	subs	r1, r4, r0
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 f87c 	bl	8008d70 <_sbrk_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d101      	bne.n	8008c80 <sbrk_aligned+0x38>
 8008c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c80:	4620      	mov	r0, r4
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	2000076c 	.word	0x2000076c

08008c88 <_malloc_r>:
 8008c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8c:	1ccd      	adds	r5, r1, #3
 8008c8e:	f025 0503 	bic.w	r5, r5, #3
 8008c92:	3508      	adds	r5, #8
 8008c94:	2d0c      	cmp	r5, #12
 8008c96:	bf38      	it	cc
 8008c98:	250c      	movcc	r5, #12
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	db01      	blt.n	8008ca4 <_malloc_r+0x1c>
 8008ca0:	42a9      	cmp	r1, r5
 8008ca2:	d905      	bls.n	8008cb0 <_malloc_r+0x28>
 8008ca4:	230c      	movs	r3, #12
 8008ca6:	2600      	movs	r6, #0
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	4630      	mov	r0, r6
 8008cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb0:	4e2e      	ldr	r6, [pc, #184]	; (8008d6c <_malloc_r+0xe4>)
 8008cb2:	f000 f8af 	bl	8008e14 <__malloc_lock>
 8008cb6:	6833      	ldr	r3, [r6, #0]
 8008cb8:	461c      	mov	r4, r3
 8008cba:	bb34      	cbnz	r4, 8008d0a <_malloc_r+0x82>
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f7ff ffc2 	bl	8008c48 <sbrk_aligned>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	d14d      	bne.n	8008d66 <_malloc_r+0xde>
 8008cca:	6834      	ldr	r4, [r6, #0]
 8008ccc:	4626      	mov	r6, r4
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d140      	bne.n	8008d54 <_malloc_r+0xcc>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	eb04 0803 	add.w	r8, r4, r3
 8008cdc:	f000 f848 	bl	8008d70 <_sbrk_r>
 8008ce0:	4580      	cmp	r8, r0
 8008ce2:	d13a      	bne.n	8008d5a <_malloc_r+0xd2>
 8008ce4:	6821      	ldr	r1, [r4, #0]
 8008ce6:	3503      	adds	r5, #3
 8008ce8:	1a6d      	subs	r5, r5, r1
 8008cea:	f025 0503 	bic.w	r5, r5, #3
 8008cee:	3508      	adds	r5, #8
 8008cf0:	2d0c      	cmp	r5, #12
 8008cf2:	bf38      	it	cc
 8008cf4:	250c      	movcc	r5, #12
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7ff ffa5 	bl	8008c48 <sbrk_aligned>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	d02b      	beq.n	8008d5a <_malloc_r+0xd2>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	442b      	add	r3, r5
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	e00e      	b.n	8008d28 <_malloc_r+0xa0>
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	1b52      	subs	r2, r2, r5
 8008d0e:	d41e      	bmi.n	8008d4e <_malloc_r+0xc6>
 8008d10:	2a0b      	cmp	r2, #11
 8008d12:	d916      	bls.n	8008d42 <_malloc_r+0xba>
 8008d14:	1961      	adds	r1, r4, r5
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	6025      	str	r5, [r4, #0]
 8008d1a:	bf18      	it	ne
 8008d1c:	6059      	strne	r1, [r3, #4]
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	bf08      	it	eq
 8008d22:	6031      	streq	r1, [r6, #0]
 8008d24:	5162      	str	r2, [r4, r5]
 8008d26:	604b      	str	r3, [r1, #4]
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f104 060b 	add.w	r6, r4, #11
 8008d2e:	f000 f877 	bl	8008e20 <__malloc_unlock>
 8008d32:	f026 0607 	bic.w	r6, r6, #7
 8008d36:	1d23      	adds	r3, r4, #4
 8008d38:	1af2      	subs	r2, r6, r3
 8008d3a:	d0b6      	beq.n	8008caa <_malloc_r+0x22>
 8008d3c:	1b9b      	subs	r3, r3, r6
 8008d3e:	50a3      	str	r3, [r4, r2]
 8008d40:	e7b3      	b.n	8008caa <_malloc_r+0x22>
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	42a3      	cmp	r3, r4
 8008d46:	bf0c      	ite	eq
 8008d48:	6032      	streq	r2, [r6, #0]
 8008d4a:	605a      	strne	r2, [r3, #4]
 8008d4c:	e7ec      	b.n	8008d28 <_malloc_r+0xa0>
 8008d4e:	4623      	mov	r3, r4
 8008d50:	6864      	ldr	r4, [r4, #4]
 8008d52:	e7b2      	b.n	8008cba <_malloc_r+0x32>
 8008d54:	4634      	mov	r4, r6
 8008d56:	6876      	ldr	r6, [r6, #4]
 8008d58:	e7b9      	b.n	8008cce <_malloc_r+0x46>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	4638      	mov	r0, r7
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	f000 f85e 	bl	8008e20 <__malloc_unlock>
 8008d64:	e7a1      	b.n	8008caa <_malloc_r+0x22>
 8008d66:	6025      	str	r5, [r4, #0]
 8008d68:	e7de      	b.n	8008d28 <_malloc_r+0xa0>
 8008d6a:	bf00      	nop
 8008d6c:	20000768 	.word	0x20000768

08008d70 <_sbrk_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	2300      	movs	r3, #0
 8008d74:	4d05      	ldr	r5, [pc, #20]	; (8008d8c <_sbrk_r+0x1c>)
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7f8 fd00 	bl	8001780 <_sbrk>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_sbrk_r+0x1a>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_sbrk_r+0x1a>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20000770 	.word	0x20000770

08008d90 <__assert_func>:
 8008d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d92:	4614      	mov	r4, r2
 8008d94:	461a      	mov	r2, r3
 8008d96:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <__assert_func+0x2c>)
 8008d98:	4605      	mov	r5, r0
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68d8      	ldr	r0, [r3, #12]
 8008d9e:	b14c      	cbz	r4, 8008db4 <__assert_func+0x24>
 8008da0:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <__assert_func+0x30>)
 8008da2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008da6:	9100      	str	r1, [sp, #0]
 8008da8:	462b      	mov	r3, r5
 8008daa:	4906      	ldr	r1, [pc, #24]	; (8008dc4 <__assert_func+0x34>)
 8008dac:	f000 f80e 	bl	8008dcc <fiprintf>
 8008db0:	f000 fa62 	bl	8009278 <abort>
 8008db4:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <__assert_func+0x38>)
 8008db6:	461c      	mov	r4, r3
 8008db8:	e7f3      	b.n	8008da2 <__assert_func+0x12>
 8008dba:	bf00      	nop
 8008dbc:	2000000c 	.word	0x2000000c
 8008dc0:	08009cf4 	.word	0x08009cf4
 8008dc4:	08009d01 	.word	0x08009d01
 8008dc8:	08009d2f 	.word	0x08009d2f

08008dcc <fiprintf>:
 8008dcc:	b40e      	push	{r1, r2, r3}
 8008dce:	b503      	push	{r0, r1, lr}
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	4805      	ldr	r0, [pc, #20]	; (8008dec <fiprintf+0x20>)
 8008dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dda:	6800      	ldr	r0, [r0, #0]
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	f000 f84d 	bl	8008e7c <_vfiprintf_r>
 8008de2:	b002      	add	sp, #8
 8008de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de8:	b003      	add	sp, #12
 8008dea:	4770      	bx	lr
 8008dec:	2000000c 	.word	0x2000000c

08008df0 <__ascii_mbtowc>:
 8008df0:	b082      	sub	sp, #8
 8008df2:	b901      	cbnz	r1, 8008df6 <__ascii_mbtowc+0x6>
 8008df4:	a901      	add	r1, sp, #4
 8008df6:	b142      	cbz	r2, 8008e0a <__ascii_mbtowc+0x1a>
 8008df8:	b14b      	cbz	r3, 8008e0e <__ascii_mbtowc+0x1e>
 8008dfa:	7813      	ldrb	r3, [r2, #0]
 8008dfc:	600b      	str	r3, [r1, #0]
 8008dfe:	7812      	ldrb	r2, [r2, #0]
 8008e00:	1e10      	subs	r0, r2, #0
 8008e02:	bf18      	it	ne
 8008e04:	2001      	movne	r0, #1
 8008e06:	b002      	add	sp, #8
 8008e08:	4770      	bx	lr
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	e7fb      	b.n	8008e06 <__ascii_mbtowc+0x16>
 8008e0e:	f06f 0001 	mvn.w	r0, #1
 8008e12:	e7f8      	b.n	8008e06 <__ascii_mbtowc+0x16>

08008e14 <__malloc_lock>:
 8008e14:	4801      	ldr	r0, [pc, #4]	; (8008e1c <__malloc_lock+0x8>)
 8008e16:	f000 bbeb 	b.w	80095f0 <__retarget_lock_acquire_recursive>
 8008e1a:	bf00      	nop
 8008e1c:	20000774 	.word	0x20000774

08008e20 <__malloc_unlock>:
 8008e20:	4801      	ldr	r0, [pc, #4]	; (8008e28 <__malloc_unlock+0x8>)
 8008e22:	f000 bbe6 	b.w	80095f2 <__retarget_lock_release_recursive>
 8008e26:	bf00      	nop
 8008e28:	20000774 	.word	0x20000774

08008e2c <__sfputc_r>:
 8008e2c:	6893      	ldr	r3, [r2, #8]
 8008e2e:	b410      	push	{r4}
 8008e30:	3b01      	subs	r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	6093      	str	r3, [r2, #8]
 8008e36:	da07      	bge.n	8008e48 <__sfputc_r+0x1c>
 8008e38:	6994      	ldr	r4, [r2, #24]
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	db01      	blt.n	8008e42 <__sfputc_r+0x16>
 8008e3e:	290a      	cmp	r1, #10
 8008e40:	d102      	bne.n	8008e48 <__sfputc_r+0x1c>
 8008e42:	bc10      	pop	{r4}
 8008e44:	f000 b94a 	b.w	80090dc <__swbuf_r>
 8008e48:	6813      	ldr	r3, [r2, #0]
 8008e4a:	1c58      	adds	r0, r3, #1
 8008e4c:	6010      	str	r0, [r2, #0]
 8008e4e:	7019      	strb	r1, [r3, #0]
 8008e50:	4608      	mov	r0, r1
 8008e52:	bc10      	pop	{r4}
 8008e54:	4770      	bx	lr

08008e56 <__sfputs_r>:
 8008e56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e58:	4606      	mov	r6, r0
 8008e5a:	460f      	mov	r7, r1
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	18d5      	adds	r5, r2, r3
 8008e60:	42ac      	cmp	r4, r5
 8008e62:	d101      	bne.n	8008e68 <__sfputs_r+0x12>
 8008e64:	2000      	movs	r0, #0
 8008e66:	e007      	b.n	8008e78 <__sfputs_r+0x22>
 8008e68:	463a      	mov	r2, r7
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e70:	f7ff ffdc 	bl	8008e2c <__sfputc_r>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d1f3      	bne.n	8008e60 <__sfputs_r+0xa>
 8008e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e7c <_vfiprintf_r>:
 8008e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	460d      	mov	r5, r1
 8008e82:	4614      	mov	r4, r2
 8008e84:	4698      	mov	r8, r3
 8008e86:	4606      	mov	r6, r0
 8008e88:	b09d      	sub	sp, #116	; 0x74
 8008e8a:	b118      	cbz	r0, 8008e94 <_vfiprintf_r+0x18>
 8008e8c:	6983      	ldr	r3, [r0, #24]
 8008e8e:	b90b      	cbnz	r3, 8008e94 <_vfiprintf_r+0x18>
 8008e90:	f000 fb10 	bl	80094b4 <__sinit>
 8008e94:	4b89      	ldr	r3, [pc, #548]	; (80090bc <_vfiprintf_r+0x240>)
 8008e96:	429d      	cmp	r5, r3
 8008e98:	d11b      	bne.n	8008ed2 <_vfiprintf_r+0x56>
 8008e9a:	6875      	ldr	r5, [r6, #4]
 8008e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e9e:	07d9      	lsls	r1, r3, #31
 8008ea0:	d405      	bmi.n	8008eae <_vfiprintf_r+0x32>
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	059a      	lsls	r2, r3, #22
 8008ea6:	d402      	bmi.n	8008eae <_vfiprintf_r+0x32>
 8008ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eaa:	f000 fba1 	bl	80095f0 <__retarget_lock_acquire_recursive>
 8008eae:	89ab      	ldrh	r3, [r5, #12]
 8008eb0:	071b      	lsls	r3, r3, #28
 8008eb2:	d501      	bpl.n	8008eb8 <_vfiprintf_r+0x3c>
 8008eb4:	692b      	ldr	r3, [r5, #16]
 8008eb6:	b9eb      	cbnz	r3, 8008ef4 <_vfiprintf_r+0x78>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f000 f96e 	bl	800919c <__swsetup_r>
 8008ec0:	b1c0      	cbz	r0, 8008ef4 <_vfiprintf_r+0x78>
 8008ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec4:	07dc      	lsls	r4, r3, #31
 8008ec6:	d50e      	bpl.n	8008ee6 <_vfiprintf_r+0x6a>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	b01d      	add	sp, #116	; 0x74
 8008ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed2:	4b7b      	ldr	r3, [pc, #492]	; (80090c0 <_vfiprintf_r+0x244>)
 8008ed4:	429d      	cmp	r5, r3
 8008ed6:	d101      	bne.n	8008edc <_vfiprintf_r+0x60>
 8008ed8:	68b5      	ldr	r5, [r6, #8]
 8008eda:	e7df      	b.n	8008e9c <_vfiprintf_r+0x20>
 8008edc:	4b79      	ldr	r3, [pc, #484]	; (80090c4 <_vfiprintf_r+0x248>)
 8008ede:	429d      	cmp	r5, r3
 8008ee0:	bf08      	it	eq
 8008ee2:	68f5      	ldreq	r5, [r6, #12]
 8008ee4:	e7da      	b.n	8008e9c <_vfiprintf_r+0x20>
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	0598      	lsls	r0, r3, #22
 8008eea:	d4ed      	bmi.n	8008ec8 <_vfiprintf_r+0x4c>
 8008eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eee:	f000 fb80 	bl	80095f2 <__retarget_lock_release_recursive>
 8008ef2:	e7e9      	b.n	8008ec8 <_vfiprintf_r+0x4c>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef8:	2320      	movs	r3, #32
 8008efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008efe:	2330      	movs	r3, #48	; 0x30
 8008f00:	f04f 0901 	mov.w	r9, #1
 8008f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f08:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80090c8 <_vfiprintf_r+0x24c>
 8008f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f10:	4623      	mov	r3, r4
 8008f12:	469a      	mov	sl, r3
 8008f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f18:	b10a      	cbz	r2, 8008f1e <_vfiprintf_r+0xa2>
 8008f1a:	2a25      	cmp	r2, #37	; 0x25
 8008f1c:	d1f9      	bne.n	8008f12 <_vfiprintf_r+0x96>
 8008f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f22:	d00b      	beq.n	8008f3c <_vfiprintf_r+0xc0>
 8008f24:	465b      	mov	r3, fp
 8008f26:	4622      	mov	r2, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7ff ff93 	bl	8008e56 <__sfputs_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	f000 80aa 	beq.w	800908a <_vfiprintf_r+0x20e>
 8008f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f38:	445a      	add	r2, fp
 8008f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80a2 	beq.w	800908a <_vfiprintf_r+0x20e>
 8008f46:	2300      	movs	r3, #0
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f50:	f10a 0a01 	add.w	sl, sl, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	9307      	str	r3, [sp, #28]
 8008f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f5e:	4654      	mov	r4, sl
 8008f60:	2205      	movs	r2, #5
 8008f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f66:	4858      	ldr	r0, [pc, #352]	; (80090c8 <_vfiprintf_r+0x24c>)
 8008f68:	f7ff fa74 	bl	8008454 <memchr>
 8008f6c:	9a04      	ldr	r2, [sp, #16]
 8008f6e:	b9d8      	cbnz	r0, 8008fa8 <_vfiprintf_r+0x12c>
 8008f70:	06d1      	lsls	r1, r2, #27
 8008f72:	bf44      	itt	mi
 8008f74:	2320      	movmi	r3, #32
 8008f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7a:	0713      	lsls	r3, r2, #28
 8008f7c:	bf44      	itt	mi
 8008f7e:	232b      	movmi	r3, #43	; 0x2b
 8008f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f84:	f89a 3000 	ldrb.w	r3, [sl]
 8008f88:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8a:	d015      	beq.n	8008fb8 <_vfiprintf_r+0x13c>
 8008f8c:	4654      	mov	r4, sl
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f04f 0c0a 	mov.w	ip, #10
 8008f94:	9a07      	ldr	r2, [sp, #28]
 8008f96:	4621      	mov	r1, r4
 8008f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f9c:	3b30      	subs	r3, #48	; 0x30
 8008f9e:	2b09      	cmp	r3, #9
 8008fa0:	d94e      	bls.n	8009040 <_vfiprintf_r+0x1c4>
 8008fa2:	b1b0      	cbz	r0, 8008fd2 <_vfiprintf_r+0x156>
 8008fa4:	9207      	str	r2, [sp, #28]
 8008fa6:	e014      	b.n	8008fd2 <_vfiprintf_r+0x156>
 8008fa8:	eba0 0308 	sub.w	r3, r0, r8
 8008fac:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	46a2      	mov	sl, r4
 8008fb4:	9304      	str	r3, [sp, #16]
 8008fb6:	e7d2      	b.n	8008f5e <_vfiprintf_r+0xe2>
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	1d19      	adds	r1, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	9103      	str	r1, [sp, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bfbb      	ittet	lt
 8008fc4:	425b      	neglt	r3, r3
 8008fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8008fca:	9307      	strge	r3, [sp, #28]
 8008fcc:	9307      	strlt	r3, [sp, #28]
 8008fce:	bfb8      	it	lt
 8008fd0:	9204      	strlt	r2, [sp, #16]
 8008fd2:	7823      	ldrb	r3, [r4, #0]
 8008fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd6:	d10c      	bne.n	8008ff2 <_vfiprintf_r+0x176>
 8008fd8:	7863      	ldrb	r3, [r4, #1]
 8008fda:	2b2a      	cmp	r3, #42	; 0x2a
 8008fdc:	d135      	bne.n	800904a <_vfiprintf_r+0x1ce>
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	3402      	adds	r4, #2
 8008fe2:	1d1a      	adds	r2, r3, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	9203      	str	r2, [sp, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfb8      	it	lt
 8008fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ff0:	9305      	str	r3, [sp, #20]
 8008ff2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80090cc <_vfiprintf_r+0x250>
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	4650      	mov	r0, sl
 8008ffa:	7821      	ldrb	r1, [r4, #0]
 8008ffc:	f7ff fa2a 	bl	8008454 <memchr>
 8009000:	b140      	cbz	r0, 8009014 <_vfiprintf_r+0x198>
 8009002:	2340      	movs	r3, #64	; 0x40
 8009004:	eba0 000a 	sub.w	r0, r0, sl
 8009008:	fa03 f000 	lsl.w	r0, r3, r0
 800900c:	9b04      	ldr	r3, [sp, #16]
 800900e:	3401      	adds	r4, #1
 8009010:	4303      	orrs	r3, r0
 8009012:	9304      	str	r3, [sp, #16]
 8009014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009018:	2206      	movs	r2, #6
 800901a:	482d      	ldr	r0, [pc, #180]	; (80090d0 <_vfiprintf_r+0x254>)
 800901c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009020:	f7ff fa18 	bl	8008454 <memchr>
 8009024:	2800      	cmp	r0, #0
 8009026:	d03f      	beq.n	80090a8 <_vfiprintf_r+0x22c>
 8009028:	4b2a      	ldr	r3, [pc, #168]	; (80090d4 <_vfiprintf_r+0x258>)
 800902a:	bb1b      	cbnz	r3, 8009074 <_vfiprintf_r+0x1f8>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	3307      	adds	r3, #7
 8009030:	f023 0307 	bic.w	r3, r3, #7
 8009034:	3308      	adds	r3, #8
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	443b      	add	r3, r7
 800903c:	9309      	str	r3, [sp, #36]	; 0x24
 800903e:	e767      	b.n	8008f10 <_vfiprintf_r+0x94>
 8009040:	460c      	mov	r4, r1
 8009042:	2001      	movs	r0, #1
 8009044:	fb0c 3202 	mla	r2, ip, r2, r3
 8009048:	e7a5      	b.n	8008f96 <_vfiprintf_r+0x11a>
 800904a:	2300      	movs	r3, #0
 800904c:	f04f 0c0a 	mov.w	ip, #10
 8009050:	4619      	mov	r1, r3
 8009052:	3401      	adds	r4, #1
 8009054:	9305      	str	r3, [sp, #20]
 8009056:	4620      	mov	r0, r4
 8009058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905c:	3a30      	subs	r2, #48	; 0x30
 800905e:	2a09      	cmp	r2, #9
 8009060:	d903      	bls.n	800906a <_vfiprintf_r+0x1ee>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0c5      	beq.n	8008ff2 <_vfiprintf_r+0x176>
 8009066:	9105      	str	r1, [sp, #20]
 8009068:	e7c3      	b.n	8008ff2 <_vfiprintf_r+0x176>
 800906a:	4604      	mov	r4, r0
 800906c:	2301      	movs	r3, #1
 800906e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009072:	e7f0      	b.n	8009056 <_vfiprintf_r+0x1da>
 8009074:	ab03      	add	r3, sp, #12
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	462a      	mov	r2, r5
 800907a:	4630      	mov	r0, r6
 800907c:	4b16      	ldr	r3, [pc, #88]	; (80090d8 <_vfiprintf_r+0x25c>)
 800907e:	a904      	add	r1, sp, #16
 8009080:	f7fd ff9e 	bl	8006fc0 <_printf_float>
 8009084:	4607      	mov	r7, r0
 8009086:	1c78      	adds	r0, r7, #1
 8009088:	d1d6      	bne.n	8009038 <_vfiprintf_r+0x1bc>
 800908a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908c:	07d9      	lsls	r1, r3, #31
 800908e:	d405      	bmi.n	800909c <_vfiprintf_r+0x220>
 8009090:	89ab      	ldrh	r3, [r5, #12]
 8009092:	059a      	lsls	r2, r3, #22
 8009094:	d402      	bmi.n	800909c <_vfiprintf_r+0x220>
 8009096:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009098:	f000 faab 	bl	80095f2 <__retarget_lock_release_recursive>
 800909c:	89ab      	ldrh	r3, [r5, #12]
 800909e:	065b      	lsls	r3, r3, #25
 80090a0:	f53f af12 	bmi.w	8008ec8 <_vfiprintf_r+0x4c>
 80090a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090a6:	e711      	b.n	8008ecc <_vfiprintf_r+0x50>
 80090a8:	ab03      	add	r3, sp, #12
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	462a      	mov	r2, r5
 80090ae:	4630      	mov	r0, r6
 80090b0:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <_vfiprintf_r+0x25c>)
 80090b2:	a904      	add	r1, sp, #16
 80090b4:	f7fe fa20 	bl	80074f8 <_printf_i>
 80090b8:	e7e4      	b.n	8009084 <_vfiprintf_r+0x208>
 80090ba:	bf00      	nop
 80090bc:	08009e6c 	.word	0x08009e6c
 80090c0:	08009e8c 	.word	0x08009e8c
 80090c4:	08009e4c 	.word	0x08009e4c
 80090c8:	08009d3a 	.word	0x08009d3a
 80090cc:	08009d40 	.word	0x08009d40
 80090d0:	08009d44 	.word	0x08009d44
 80090d4:	08006fc1 	.word	0x08006fc1
 80090d8:	08008e57 	.word	0x08008e57

080090dc <__swbuf_r>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	460e      	mov	r6, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	4605      	mov	r5, r0
 80090e4:	b118      	cbz	r0, 80090ee <__swbuf_r+0x12>
 80090e6:	6983      	ldr	r3, [r0, #24]
 80090e8:	b90b      	cbnz	r3, 80090ee <__swbuf_r+0x12>
 80090ea:	f000 f9e3 	bl	80094b4 <__sinit>
 80090ee:	4b21      	ldr	r3, [pc, #132]	; (8009174 <__swbuf_r+0x98>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	d12b      	bne.n	800914c <__swbuf_r+0x70>
 80090f4:	686c      	ldr	r4, [r5, #4]
 80090f6:	69a3      	ldr	r3, [r4, #24]
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	071a      	lsls	r2, r3, #28
 80090fe:	d52f      	bpl.n	8009160 <__swbuf_r+0x84>
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	b36b      	cbz	r3, 8009160 <__swbuf_r+0x84>
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	6820      	ldr	r0, [r4, #0]
 8009108:	b2f6      	uxtb	r6, r6
 800910a:	1ac0      	subs	r0, r0, r3
 800910c:	6963      	ldr	r3, [r4, #20]
 800910e:	4637      	mov	r7, r6
 8009110:	4283      	cmp	r3, r0
 8009112:	dc04      	bgt.n	800911e <__swbuf_r+0x42>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f000 f938 	bl	800938c <_fflush_r>
 800911c:	bb30      	cbnz	r0, 800916c <__swbuf_r+0x90>
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	3001      	adds	r0, #1
 8009122:	3b01      	subs	r3, #1
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	701e      	strb	r6, [r3, #0]
 800912e:	6963      	ldr	r3, [r4, #20]
 8009130:	4283      	cmp	r3, r0
 8009132:	d004      	beq.n	800913e <__swbuf_r+0x62>
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	07db      	lsls	r3, r3, #31
 8009138:	d506      	bpl.n	8009148 <__swbuf_r+0x6c>
 800913a:	2e0a      	cmp	r6, #10
 800913c:	d104      	bne.n	8009148 <__swbuf_r+0x6c>
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f000 f923 	bl	800938c <_fflush_r>
 8009146:	b988      	cbnz	r0, 800916c <__swbuf_r+0x90>
 8009148:	4638      	mov	r0, r7
 800914a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <__swbuf_r+0x9c>)
 800914e:	429c      	cmp	r4, r3
 8009150:	d101      	bne.n	8009156 <__swbuf_r+0x7a>
 8009152:	68ac      	ldr	r4, [r5, #8]
 8009154:	e7cf      	b.n	80090f6 <__swbuf_r+0x1a>
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <__swbuf_r+0xa0>)
 8009158:	429c      	cmp	r4, r3
 800915a:	bf08      	it	eq
 800915c:	68ec      	ldreq	r4, [r5, #12]
 800915e:	e7ca      	b.n	80090f6 <__swbuf_r+0x1a>
 8009160:	4621      	mov	r1, r4
 8009162:	4628      	mov	r0, r5
 8009164:	f000 f81a 	bl	800919c <__swsetup_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	d0cb      	beq.n	8009104 <__swbuf_r+0x28>
 800916c:	f04f 37ff 	mov.w	r7, #4294967295
 8009170:	e7ea      	b.n	8009148 <__swbuf_r+0x6c>
 8009172:	bf00      	nop
 8009174:	08009e6c 	.word	0x08009e6c
 8009178:	08009e8c 	.word	0x08009e8c
 800917c:	08009e4c 	.word	0x08009e4c

08009180 <__ascii_wctomb>:
 8009180:	4603      	mov	r3, r0
 8009182:	4608      	mov	r0, r1
 8009184:	b141      	cbz	r1, 8009198 <__ascii_wctomb+0x18>
 8009186:	2aff      	cmp	r2, #255	; 0xff
 8009188:	d904      	bls.n	8009194 <__ascii_wctomb+0x14>
 800918a:	228a      	movs	r2, #138	; 0x8a
 800918c:	f04f 30ff 	mov.w	r0, #4294967295
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	4770      	bx	lr
 8009194:	2001      	movs	r0, #1
 8009196:	700a      	strb	r2, [r1, #0]
 8009198:	4770      	bx	lr
	...

0800919c <__swsetup_r>:
 800919c:	4b32      	ldr	r3, [pc, #200]	; (8009268 <__swsetup_r+0xcc>)
 800919e:	b570      	push	{r4, r5, r6, lr}
 80091a0:	681d      	ldr	r5, [r3, #0]
 80091a2:	4606      	mov	r6, r0
 80091a4:	460c      	mov	r4, r1
 80091a6:	b125      	cbz	r5, 80091b2 <__swsetup_r+0x16>
 80091a8:	69ab      	ldr	r3, [r5, #24]
 80091aa:	b913      	cbnz	r3, 80091b2 <__swsetup_r+0x16>
 80091ac:	4628      	mov	r0, r5
 80091ae:	f000 f981 	bl	80094b4 <__sinit>
 80091b2:	4b2e      	ldr	r3, [pc, #184]	; (800926c <__swsetup_r+0xd0>)
 80091b4:	429c      	cmp	r4, r3
 80091b6:	d10f      	bne.n	80091d8 <__swsetup_r+0x3c>
 80091b8:	686c      	ldr	r4, [r5, #4]
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091c0:	0719      	lsls	r1, r3, #28
 80091c2:	d42c      	bmi.n	800921e <__swsetup_r+0x82>
 80091c4:	06dd      	lsls	r5, r3, #27
 80091c6:	d411      	bmi.n	80091ec <__swsetup_r+0x50>
 80091c8:	2309      	movs	r3, #9
 80091ca:	6033      	str	r3, [r6, #0]
 80091cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	e03e      	b.n	8009256 <__swsetup_r+0xba>
 80091d8:	4b25      	ldr	r3, [pc, #148]	; (8009270 <__swsetup_r+0xd4>)
 80091da:	429c      	cmp	r4, r3
 80091dc:	d101      	bne.n	80091e2 <__swsetup_r+0x46>
 80091de:	68ac      	ldr	r4, [r5, #8]
 80091e0:	e7eb      	b.n	80091ba <__swsetup_r+0x1e>
 80091e2:	4b24      	ldr	r3, [pc, #144]	; (8009274 <__swsetup_r+0xd8>)
 80091e4:	429c      	cmp	r4, r3
 80091e6:	bf08      	it	eq
 80091e8:	68ec      	ldreq	r4, [r5, #12]
 80091ea:	e7e6      	b.n	80091ba <__swsetup_r+0x1e>
 80091ec:	0758      	lsls	r0, r3, #29
 80091ee:	d512      	bpl.n	8009216 <__swsetup_r+0x7a>
 80091f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091f2:	b141      	cbz	r1, 8009206 <__swsetup_r+0x6a>
 80091f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091f8:	4299      	cmp	r1, r3
 80091fa:	d002      	beq.n	8009202 <__swsetup_r+0x66>
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff fcdb 	bl	8008bb8 <_free_r>
 8009202:	2300      	movs	r3, #0
 8009204:	6363      	str	r3, [r4, #52]	; 0x34
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	2300      	movs	r3, #0
 8009210:	6063      	str	r3, [r4, #4]
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f043 0308 	orr.w	r3, r3, #8
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	6923      	ldr	r3, [r4, #16]
 8009220:	b94b      	cbnz	r3, 8009236 <__swsetup_r+0x9a>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800922c:	d003      	beq.n	8009236 <__swsetup_r+0x9a>
 800922e:	4621      	mov	r1, r4
 8009230:	4630      	mov	r0, r6
 8009232:	f000 fa05 	bl	8009640 <__smakebuf_r>
 8009236:	89a0      	ldrh	r0, [r4, #12]
 8009238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800923c:	f010 0301 	ands.w	r3, r0, #1
 8009240:	d00a      	beq.n	8009258 <__swsetup_r+0xbc>
 8009242:	2300      	movs	r3, #0
 8009244:	60a3      	str	r3, [r4, #8]
 8009246:	6963      	ldr	r3, [r4, #20]
 8009248:	425b      	negs	r3, r3
 800924a:	61a3      	str	r3, [r4, #24]
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	b943      	cbnz	r3, 8009262 <__swsetup_r+0xc6>
 8009250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009254:	d1ba      	bne.n	80091cc <__swsetup_r+0x30>
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	0781      	lsls	r1, r0, #30
 800925a:	bf58      	it	pl
 800925c:	6963      	ldrpl	r3, [r4, #20]
 800925e:	60a3      	str	r3, [r4, #8]
 8009260:	e7f4      	b.n	800924c <__swsetup_r+0xb0>
 8009262:	2000      	movs	r0, #0
 8009264:	e7f7      	b.n	8009256 <__swsetup_r+0xba>
 8009266:	bf00      	nop
 8009268:	2000000c 	.word	0x2000000c
 800926c:	08009e6c 	.word	0x08009e6c
 8009270:	08009e8c 	.word	0x08009e8c
 8009274:	08009e4c 	.word	0x08009e4c

08009278 <abort>:
 8009278:	2006      	movs	r0, #6
 800927a:	b508      	push	{r3, lr}
 800927c:	f000 fa48 	bl	8009710 <raise>
 8009280:	2001      	movs	r0, #1
 8009282:	f7f8 fa0a 	bl	800169a <_exit>
	...

08009288 <__sflush_r>:
 8009288:	898a      	ldrh	r2, [r1, #12]
 800928a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928c:	4605      	mov	r5, r0
 800928e:	0710      	lsls	r0, r2, #28
 8009290:	460c      	mov	r4, r1
 8009292:	d457      	bmi.n	8009344 <__sflush_r+0xbc>
 8009294:	684b      	ldr	r3, [r1, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	dc04      	bgt.n	80092a4 <__sflush_r+0x1c>
 800929a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	dc01      	bgt.n	80092a4 <__sflush_r+0x1c>
 80092a0:	2000      	movs	r0, #0
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	d0fa      	beq.n	80092a0 <__sflush_r+0x18>
 80092aa:	2300      	movs	r3, #0
 80092ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092b0:	682f      	ldr	r7, [r5, #0]
 80092b2:	602b      	str	r3, [r5, #0]
 80092b4:	d032      	beq.n	800931c <__sflush_r+0x94>
 80092b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	075a      	lsls	r2, r3, #29
 80092bc:	d505      	bpl.n	80092ca <__sflush_r+0x42>
 80092be:	6863      	ldr	r3, [r4, #4]
 80092c0:	1ac0      	subs	r0, r0, r3
 80092c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092c4:	b10b      	cbz	r3, 80092ca <__sflush_r+0x42>
 80092c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092c8:	1ac0      	subs	r0, r0, r3
 80092ca:	2300      	movs	r3, #0
 80092cc:	4602      	mov	r2, r0
 80092ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092d0:	4628      	mov	r0, r5
 80092d2:	6a21      	ldr	r1, [r4, #32]
 80092d4:	47b0      	blx	r6
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	d106      	bne.n	80092ea <__sflush_r+0x62>
 80092dc:	6829      	ldr	r1, [r5, #0]
 80092de:	291d      	cmp	r1, #29
 80092e0:	d82c      	bhi.n	800933c <__sflush_r+0xb4>
 80092e2:	4a29      	ldr	r2, [pc, #164]	; (8009388 <__sflush_r+0x100>)
 80092e4:	40ca      	lsrs	r2, r1
 80092e6:	07d6      	lsls	r6, r2, #31
 80092e8:	d528      	bpl.n	800933c <__sflush_r+0xb4>
 80092ea:	2200      	movs	r2, #0
 80092ec:	6062      	str	r2, [r4, #4]
 80092ee:	6922      	ldr	r2, [r4, #16]
 80092f0:	04d9      	lsls	r1, r3, #19
 80092f2:	6022      	str	r2, [r4, #0]
 80092f4:	d504      	bpl.n	8009300 <__sflush_r+0x78>
 80092f6:	1c42      	adds	r2, r0, #1
 80092f8:	d101      	bne.n	80092fe <__sflush_r+0x76>
 80092fa:	682b      	ldr	r3, [r5, #0]
 80092fc:	b903      	cbnz	r3, 8009300 <__sflush_r+0x78>
 80092fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009302:	602f      	str	r7, [r5, #0]
 8009304:	2900      	cmp	r1, #0
 8009306:	d0cb      	beq.n	80092a0 <__sflush_r+0x18>
 8009308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800930c:	4299      	cmp	r1, r3
 800930e:	d002      	beq.n	8009316 <__sflush_r+0x8e>
 8009310:	4628      	mov	r0, r5
 8009312:	f7ff fc51 	bl	8008bb8 <_free_r>
 8009316:	2000      	movs	r0, #0
 8009318:	6360      	str	r0, [r4, #52]	; 0x34
 800931a:	e7c2      	b.n	80092a2 <__sflush_r+0x1a>
 800931c:	6a21      	ldr	r1, [r4, #32]
 800931e:	2301      	movs	r3, #1
 8009320:	4628      	mov	r0, r5
 8009322:	47b0      	blx	r6
 8009324:	1c41      	adds	r1, r0, #1
 8009326:	d1c7      	bne.n	80092b8 <__sflush_r+0x30>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0c4      	beq.n	80092b8 <__sflush_r+0x30>
 800932e:	2b1d      	cmp	r3, #29
 8009330:	d001      	beq.n	8009336 <__sflush_r+0xae>
 8009332:	2b16      	cmp	r3, #22
 8009334:	d101      	bne.n	800933a <__sflush_r+0xb2>
 8009336:	602f      	str	r7, [r5, #0]
 8009338:	e7b2      	b.n	80092a0 <__sflush_r+0x18>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	e7ae      	b.n	80092a2 <__sflush_r+0x1a>
 8009344:	690f      	ldr	r7, [r1, #16]
 8009346:	2f00      	cmp	r7, #0
 8009348:	d0aa      	beq.n	80092a0 <__sflush_r+0x18>
 800934a:	0793      	lsls	r3, r2, #30
 800934c:	bf18      	it	ne
 800934e:	2300      	movne	r3, #0
 8009350:	680e      	ldr	r6, [r1, #0]
 8009352:	bf08      	it	eq
 8009354:	694b      	ldreq	r3, [r1, #20]
 8009356:	1bf6      	subs	r6, r6, r7
 8009358:	600f      	str	r7, [r1, #0]
 800935a:	608b      	str	r3, [r1, #8]
 800935c:	2e00      	cmp	r6, #0
 800935e:	dd9f      	ble.n	80092a0 <__sflush_r+0x18>
 8009360:	4633      	mov	r3, r6
 8009362:	463a      	mov	r2, r7
 8009364:	4628      	mov	r0, r5
 8009366:	6a21      	ldr	r1, [r4, #32]
 8009368:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800936c:	47e0      	blx	ip
 800936e:	2800      	cmp	r0, #0
 8009370:	dc06      	bgt.n	8009380 <__sflush_r+0xf8>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	f04f 30ff 	mov.w	r0, #4294967295
 8009378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e790      	b.n	80092a2 <__sflush_r+0x1a>
 8009380:	4407      	add	r7, r0
 8009382:	1a36      	subs	r6, r6, r0
 8009384:	e7ea      	b.n	800935c <__sflush_r+0xd4>
 8009386:	bf00      	nop
 8009388:	20400001 	.word	0x20400001

0800938c <_fflush_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	690b      	ldr	r3, [r1, #16]
 8009390:	4605      	mov	r5, r0
 8009392:	460c      	mov	r4, r1
 8009394:	b913      	cbnz	r3, 800939c <_fflush_r+0x10>
 8009396:	2500      	movs	r5, #0
 8009398:	4628      	mov	r0, r5
 800939a:	bd38      	pop	{r3, r4, r5, pc}
 800939c:	b118      	cbz	r0, 80093a6 <_fflush_r+0x1a>
 800939e:	6983      	ldr	r3, [r0, #24]
 80093a0:	b90b      	cbnz	r3, 80093a6 <_fflush_r+0x1a>
 80093a2:	f000 f887 	bl	80094b4 <__sinit>
 80093a6:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <_fflush_r+0x6c>)
 80093a8:	429c      	cmp	r4, r3
 80093aa:	d11b      	bne.n	80093e4 <_fflush_r+0x58>
 80093ac:	686c      	ldr	r4, [r5, #4]
 80093ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0ef      	beq.n	8009396 <_fflush_r+0xa>
 80093b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093b8:	07d0      	lsls	r0, r2, #31
 80093ba:	d404      	bmi.n	80093c6 <_fflush_r+0x3a>
 80093bc:	0599      	lsls	r1, r3, #22
 80093be:	d402      	bmi.n	80093c6 <_fflush_r+0x3a>
 80093c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093c2:	f000 f915 	bl	80095f0 <__retarget_lock_acquire_recursive>
 80093c6:	4628      	mov	r0, r5
 80093c8:	4621      	mov	r1, r4
 80093ca:	f7ff ff5d 	bl	8009288 <__sflush_r>
 80093ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093d0:	4605      	mov	r5, r0
 80093d2:	07da      	lsls	r2, r3, #31
 80093d4:	d4e0      	bmi.n	8009398 <_fflush_r+0xc>
 80093d6:	89a3      	ldrh	r3, [r4, #12]
 80093d8:	059b      	lsls	r3, r3, #22
 80093da:	d4dd      	bmi.n	8009398 <_fflush_r+0xc>
 80093dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093de:	f000 f908 	bl	80095f2 <__retarget_lock_release_recursive>
 80093e2:	e7d9      	b.n	8009398 <_fflush_r+0xc>
 80093e4:	4b05      	ldr	r3, [pc, #20]	; (80093fc <_fflush_r+0x70>)
 80093e6:	429c      	cmp	r4, r3
 80093e8:	d101      	bne.n	80093ee <_fflush_r+0x62>
 80093ea:	68ac      	ldr	r4, [r5, #8]
 80093ec:	e7df      	b.n	80093ae <_fflush_r+0x22>
 80093ee:	4b04      	ldr	r3, [pc, #16]	; (8009400 <_fflush_r+0x74>)
 80093f0:	429c      	cmp	r4, r3
 80093f2:	bf08      	it	eq
 80093f4:	68ec      	ldreq	r4, [r5, #12]
 80093f6:	e7da      	b.n	80093ae <_fflush_r+0x22>
 80093f8:	08009e6c 	.word	0x08009e6c
 80093fc:	08009e8c 	.word	0x08009e8c
 8009400:	08009e4c 	.word	0x08009e4c

08009404 <std>:
 8009404:	2300      	movs	r3, #0
 8009406:	b510      	push	{r4, lr}
 8009408:	4604      	mov	r4, r0
 800940a:	e9c0 3300 	strd	r3, r3, [r0]
 800940e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009412:	6083      	str	r3, [r0, #8]
 8009414:	8181      	strh	r1, [r0, #12]
 8009416:	6643      	str	r3, [r0, #100]	; 0x64
 8009418:	81c2      	strh	r2, [r0, #14]
 800941a:	6183      	str	r3, [r0, #24]
 800941c:	4619      	mov	r1, r3
 800941e:	2208      	movs	r2, #8
 8009420:	305c      	adds	r0, #92	; 0x5c
 8009422:	f7fd fd27 	bl	8006e74 <memset>
 8009426:	4b05      	ldr	r3, [pc, #20]	; (800943c <std+0x38>)
 8009428:	6224      	str	r4, [r4, #32]
 800942a:	6263      	str	r3, [r4, #36]	; 0x24
 800942c:	4b04      	ldr	r3, [pc, #16]	; (8009440 <std+0x3c>)
 800942e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009430:	4b04      	ldr	r3, [pc, #16]	; (8009444 <std+0x40>)
 8009432:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <std+0x44>)
 8009436:	6323      	str	r3, [r4, #48]	; 0x30
 8009438:	bd10      	pop	{r4, pc}
 800943a:	bf00      	nop
 800943c:	08009749 	.word	0x08009749
 8009440:	0800976b 	.word	0x0800976b
 8009444:	080097a3 	.word	0x080097a3
 8009448:	080097c7 	.word	0x080097c7

0800944c <_cleanup_r>:
 800944c:	4901      	ldr	r1, [pc, #4]	; (8009454 <_cleanup_r+0x8>)
 800944e:	f000 b8af 	b.w	80095b0 <_fwalk_reent>
 8009452:	bf00      	nop
 8009454:	0800938d 	.word	0x0800938d

08009458 <__sfmoreglue>:
 8009458:	2268      	movs	r2, #104	; 0x68
 800945a:	b570      	push	{r4, r5, r6, lr}
 800945c:	1e4d      	subs	r5, r1, #1
 800945e:	4355      	muls	r5, r2
 8009460:	460e      	mov	r6, r1
 8009462:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009466:	f7ff fc0f 	bl	8008c88 <_malloc_r>
 800946a:	4604      	mov	r4, r0
 800946c:	b140      	cbz	r0, 8009480 <__sfmoreglue+0x28>
 800946e:	2100      	movs	r1, #0
 8009470:	e9c0 1600 	strd	r1, r6, [r0]
 8009474:	300c      	adds	r0, #12
 8009476:	60a0      	str	r0, [r4, #8]
 8009478:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800947c:	f7fd fcfa 	bl	8006e74 <memset>
 8009480:	4620      	mov	r0, r4
 8009482:	bd70      	pop	{r4, r5, r6, pc}

08009484 <__sfp_lock_acquire>:
 8009484:	4801      	ldr	r0, [pc, #4]	; (800948c <__sfp_lock_acquire+0x8>)
 8009486:	f000 b8b3 	b.w	80095f0 <__retarget_lock_acquire_recursive>
 800948a:	bf00      	nop
 800948c:	20000775 	.word	0x20000775

08009490 <__sfp_lock_release>:
 8009490:	4801      	ldr	r0, [pc, #4]	; (8009498 <__sfp_lock_release+0x8>)
 8009492:	f000 b8ae 	b.w	80095f2 <__retarget_lock_release_recursive>
 8009496:	bf00      	nop
 8009498:	20000775 	.word	0x20000775

0800949c <__sinit_lock_acquire>:
 800949c:	4801      	ldr	r0, [pc, #4]	; (80094a4 <__sinit_lock_acquire+0x8>)
 800949e:	f000 b8a7 	b.w	80095f0 <__retarget_lock_acquire_recursive>
 80094a2:	bf00      	nop
 80094a4:	20000776 	.word	0x20000776

080094a8 <__sinit_lock_release>:
 80094a8:	4801      	ldr	r0, [pc, #4]	; (80094b0 <__sinit_lock_release+0x8>)
 80094aa:	f000 b8a2 	b.w	80095f2 <__retarget_lock_release_recursive>
 80094ae:	bf00      	nop
 80094b0:	20000776 	.word	0x20000776

080094b4 <__sinit>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	4604      	mov	r4, r0
 80094b8:	f7ff fff0 	bl	800949c <__sinit_lock_acquire>
 80094bc:	69a3      	ldr	r3, [r4, #24]
 80094be:	b11b      	cbz	r3, 80094c8 <__sinit+0x14>
 80094c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c4:	f7ff bff0 	b.w	80094a8 <__sinit_lock_release>
 80094c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094cc:	6523      	str	r3, [r4, #80]	; 0x50
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <__sinit+0x68>)
 80094d0:	4a13      	ldr	r2, [pc, #76]	; (8009520 <__sinit+0x6c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	bf08      	it	eq
 80094da:	2301      	moveq	r3, #1
 80094dc:	4620      	mov	r0, r4
 80094de:	bf08      	it	eq
 80094e0:	61a3      	streq	r3, [r4, #24]
 80094e2:	f000 f81f 	bl	8009524 <__sfp>
 80094e6:	6060      	str	r0, [r4, #4]
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 f81b 	bl	8009524 <__sfp>
 80094ee:	60a0      	str	r0, [r4, #8]
 80094f0:	4620      	mov	r0, r4
 80094f2:	f000 f817 	bl	8009524 <__sfp>
 80094f6:	2200      	movs	r2, #0
 80094f8:	2104      	movs	r1, #4
 80094fa:	60e0      	str	r0, [r4, #12]
 80094fc:	6860      	ldr	r0, [r4, #4]
 80094fe:	f7ff ff81 	bl	8009404 <std>
 8009502:	2201      	movs	r2, #1
 8009504:	2109      	movs	r1, #9
 8009506:	68a0      	ldr	r0, [r4, #8]
 8009508:	f7ff ff7c 	bl	8009404 <std>
 800950c:	2202      	movs	r2, #2
 800950e:	2112      	movs	r1, #18
 8009510:	68e0      	ldr	r0, [r4, #12]
 8009512:	f7ff ff77 	bl	8009404 <std>
 8009516:	2301      	movs	r3, #1
 8009518:	61a3      	str	r3, [r4, #24]
 800951a:	e7d1      	b.n	80094c0 <__sinit+0xc>
 800951c:	08009ad0 	.word	0x08009ad0
 8009520:	0800944d 	.word	0x0800944d

08009524 <__sfp>:
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009526:	4607      	mov	r7, r0
 8009528:	f7ff ffac 	bl	8009484 <__sfp_lock_acquire>
 800952c:	4b1e      	ldr	r3, [pc, #120]	; (80095a8 <__sfp+0x84>)
 800952e:	681e      	ldr	r6, [r3, #0]
 8009530:	69b3      	ldr	r3, [r6, #24]
 8009532:	b913      	cbnz	r3, 800953a <__sfp+0x16>
 8009534:	4630      	mov	r0, r6
 8009536:	f7ff ffbd 	bl	80094b4 <__sinit>
 800953a:	3648      	adds	r6, #72	; 0x48
 800953c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009540:	3b01      	subs	r3, #1
 8009542:	d503      	bpl.n	800954c <__sfp+0x28>
 8009544:	6833      	ldr	r3, [r6, #0]
 8009546:	b30b      	cbz	r3, 800958c <__sfp+0x68>
 8009548:	6836      	ldr	r6, [r6, #0]
 800954a:	e7f7      	b.n	800953c <__sfp+0x18>
 800954c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009550:	b9d5      	cbnz	r5, 8009588 <__sfp+0x64>
 8009552:	4b16      	ldr	r3, [pc, #88]	; (80095ac <__sfp+0x88>)
 8009554:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009558:	60e3      	str	r3, [r4, #12]
 800955a:	6665      	str	r5, [r4, #100]	; 0x64
 800955c:	f000 f847 	bl	80095ee <__retarget_lock_init_recursive>
 8009560:	f7ff ff96 	bl	8009490 <__sfp_lock_release>
 8009564:	2208      	movs	r2, #8
 8009566:	4629      	mov	r1, r5
 8009568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800956c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009570:	6025      	str	r5, [r4, #0]
 8009572:	61a5      	str	r5, [r4, #24]
 8009574:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009578:	f7fd fc7c 	bl	8006e74 <memset>
 800957c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009580:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009584:	4620      	mov	r0, r4
 8009586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009588:	3468      	adds	r4, #104	; 0x68
 800958a:	e7d9      	b.n	8009540 <__sfp+0x1c>
 800958c:	2104      	movs	r1, #4
 800958e:	4638      	mov	r0, r7
 8009590:	f7ff ff62 	bl	8009458 <__sfmoreglue>
 8009594:	4604      	mov	r4, r0
 8009596:	6030      	str	r0, [r6, #0]
 8009598:	2800      	cmp	r0, #0
 800959a:	d1d5      	bne.n	8009548 <__sfp+0x24>
 800959c:	f7ff ff78 	bl	8009490 <__sfp_lock_release>
 80095a0:	230c      	movs	r3, #12
 80095a2:	603b      	str	r3, [r7, #0]
 80095a4:	e7ee      	b.n	8009584 <__sfp+0x60>
 80095a6:	bf00      	nop
 80095a8:	08009ad0 	.word	0x08009ad0
 80095ac:	ffff0001 	.word	0xffff0001

080095b0 <_fwalk_reent>:
 80095b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b4:	4606      	mov	r6, r0
 80095b6:	4688      	mov	r8, r1
 80095b8:	2700      	movs	r7, #0
 80095ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095c2:	f1b9 0901 	subs.w	r9, r9, #1
 80095c6:	d505      	bpl.n	80095d4 <_fwalk_reent+0x24>
 80095c8:	6824      	ldr	r4, [r4, #0]
 80095ca:	2c00      	cmp	r4, #0
 80095cc:	d1f7      	bne.n	80095be <_fwalk_reent+0xe>
 80095ce:	4638      	mov	r0, r7
 80095d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d4:	89ab      	ldrh	r3, [r5, #12]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d907      	bls.n	80095ea <_fwalk_reent+0x3a>
 80095da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095de:	3301      	adds	r3, #1
 80095e0:	d003      	beq.n	80095ea <_fwalk_reent+0x3a>
 80095e2:	4629      	mov	r1, r5
 80095e4:	4630      	mov	r0, r6
 80095e6:	47c0      	blx	r8
 80095e8:	4307      	orrs	r7, r0
 80095ea:	3568      	adds	r5, #104	; 0x68
 80095ec:	e7e9      	b.n	80095c2 <_fwalk_reent+0x12>

080095ee <__retarget_lock_init_recursive>:
 80095ee:	4770      	bx	lr

080095f0 <__retarget_lock_acquire_recursive>:
 80095f0:	4770      	bx	lr

080095f2 <__retarget_lock_release_recursive>:
 80095f2:	4770      	bx	lr

080095f4 <__swhatbuf_r>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	460e      	mov	r6, r1
 80095f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fc:	4614      	mov	r4, r2
 80095fe:	2900      	cmp	r1, #0
 8009600:	461d      	mov	r5, r3
 8009602:	b096      	sub	sp, #88	; 0x58
 8009604:	da08      	bge.n	8009618 <__swhatbuf_r+0x24>
 8009606:	2200      	movs	r2, #0
 8009608:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800960c:	602a      	str	r2, [r5, #0]
 800960e:	061a      	lsls	r2, r3, #24
 8009610:	d410      	bmi.n	8009634 <__swhatbuf_r+0x40>
 8009612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009616:	e00e      	b.n	8009636 <__swhatbuf_r+0x42>
 8009618:	466a      	mov	r2, sp
 800961a:	f000 f8fb 	bl	8009814 <_fstat_r>
 800961e:	2800      	cmp	r0, #0
 8009620:	dbf1      	blt.n	8009606 <__swhatbuf_r+0x12>
 8009622:	9a01      	ldr	r2, [sp, #4]
 8009624:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009628:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800962c:	425a      	negs	r2, r3
 800962e:	415a      	adcs	r2, r3
 8009630:	602a      	str	r2, [r5, #0]
 8009632:	e7ee      	b.n	8009612 <__swhatbuf_r+0x1e>
 8009634:	2340      	movs	r3, #64	; 0x40
 8009636:	2000      	movs	r0, #0
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	b016      	add	sp, #88	; 0x58
 800963c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009640 <__smakebuf_r>:
 8009640:	898b      	ldrh	r3, [r1, #12]
 8009642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009644:	079d      	lsls	r5, r3, #30
 8009646:	4606      	mov	r6, r0
 8009648:	460c      	mov	r4, r1
 800964a:	d507      	bpl.n	800965c <__smakebuf_r+0x1c>
 800964c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	6123      	str	r3, [r4, #16]
 8009654:	2301      	movs	r3, #1
 8009656:	6163      	str	r3, [r4, #20]
 8009658:	b002      	add	sp, #8
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	466a      	mov	r2, sp
 800965e:	ab01      	add	r3, sp, #4
 8009660:	f7ff ffc8 	bl	80095f4 <__swhatbuf_r>
 8009664:	9900      	ldr	r1, [sp, #0]
 8009666:	4605      	mov	r5, r0
 8009668:	4630      	mov	r0, r6
 800966a:	f7ff fb0d 	bl	8008c88 <_malloc_r>
 800966e:	b948      	cbnz	r0, 8009684 <__smakebuf_r+0x44>
 8009670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009674:	059a      	lsls	r2, r3, #22
 8009676:	d4ef      	bmi.n	8009658 <__smakebuf_r+0x18>
 8009678:	f023 0303 	bic.w	r3, r3, #3
 800967c:	f043 0302 	orr.w	r3, r3, #2
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	e7e3      	b.n	800964c <__smakebuf_r+0xc>
 8009684:	4b0d      	ldr	r3, [pc, #52]	; (80096bc <__smakebuf_r+0x7c>)
 8009686:	62b3      	str	r3, [r6, #40]	; 0x28
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	6020      	str	r0, [r4, #0]
 800968c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	6120      	str	r0, [r4, #16]
 8009696:	6163      	str	r3, [r4, #20]
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	b15b      	cbz	r3, 80096b4 <__smakebuf_r+0x74>
 800969c:	4630      	mov	r0, r6
 800969e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a2:	f000 f8c9 	bl	8009838 <_isatty_r>
 80096a6:	b128      	cbz	r0, 80096b4 <__smakebuf_r+0x74>
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	f023 0303 	bic.w	r3, r3, #3
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	89a0      	ldrh	r0, [r4, #12]
 80096b6:	4305      	orrs	r5, r0
 80096b8:	81a5      	strh	r5, [r4, #12]
 80096ba:	e7cd      	b.n	8009658 <__smakebuf_r+0x18>
 80096bc:	0800944d 	.word	0x0800944d

080096c0 <_raise_r>:
 80096c0:	291f      	cmp	r1, #31
 80096c2:	b538      	push	{r3, r4, r5, lr}
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	d904      	bls.n	80096d4 <_raise_r+0x14>
 80096ca:	2316      	movs	r3, #22
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	f04f 30ff 	mov.w	r0, #4294967295
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096d6:	b112      	cbz	r2, 80096de <_raise_r+0x1e>
 80096d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096dc:	b94b      	cbnz	r3, 80096f2 <_raise_r+0x32>
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 f830 	bl	8009744 <_getpid_r>
 80096e4:	462a      	mov	r2, r5
 80096e6:	4601      	mov	r1, r0
 80096e8:	4620      	mov	r0, r4
 80096ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ee:	f000 b817 	b.w	8009720 <_kill_r>
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d00a      	beq.n	800970c <_raise_r+0x4c>
 80096f6:	1c59      	adds	r1, r3, #1
 80096f8:	d103      	bne.n	8009702 <_raise_r+0x42>
 80096fa:	2316      	movs	r3, #22
 80096fc:	6003      	str	r3, [r0, #0]
 80096fe:	2001      	movs	r0, #1
 8009700:	e7e7      	b.n	80096d2 <_raise_r+0x12>
 8009702:	2400      	movs	r4, #0
 8009704:	4628      	mov	r0, r5
 8009706:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800970a:	4798      	blx	r3
 800970c:	2000      	movs	r0, #0
 800970e:	e7e0      	b.n	80096d2 <_raise_r+0x12>

08009710 <raise>:
 8009710:	4b02      	ldr	r3, [pc, #8]	; (800971c <raise+0xc>)
 8009712:	4601      	mov	r1, r0
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	f7ff bfd3 	b.w	80096c0 <_raise_r>
 800971a:	bf00      	nop
 800971c:	2000000c 	.word	0x2000000c

08009720 <_kill_r>:
 8009720:	b538      	push	{r3, r4, r5, lr}
 8009722:	2300      	movs	r3, #0
 8009724:	4d06      	ldr	r5, [pc, #24]	; (8009740 <_kill_r+0x20>)
 8009726:	4604      	mov	r4, r0
 8009728:	4608      	mov	r0, r1
 800972a:	4611      	mov	r1, r2
 800972c:	602b      	str	r3, [r5, #0]
 800972e:	f7f7 ffa4 	bl	800167a <_kill>
 8009732:	1c43      	adds	r3, r0, #1
 8009734:	d102      	bne.n	800973c <_kill_r+0x1c>
 8009736:	682b      	ldr	r3, [r5, #0]
 8009738:	b103      	cbz	r3, 800973c <_kill_r+0x1c>
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	bd38      	pop	{r3, r4, r5, pc}
 800973e:	bf00      	nop
 8009740:	20000770 	.word	0x20000770

08009744 <_getpid_r>:
 8009744:	f7f7 bf92 	b.w	800166c <_getpid>

08009748 <__sread>:
 8009748:	b510      	push	{r4, lr}
 800974a:	460c      	mov	r4, r1
 800974c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009750:	f000 f894 	bl	800987c <_read_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	bfab      	itete	ge
 8009758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800975a:	89a3      	ldrhlt	r3, [r4, #12]
 800975c:	181b      	addge	r3, r3, r0
 800975e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009762:	bfac      	ite	ge
 8009764:	6563      	strge	r3, [r4, #84]	; 0x54
 8009766:	81a3      	strhlt	r3, [r4, #12]
 8009768:	bd10      	pop	{r4, pc}

0800976a <__swrite>:
 800976a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976e:	461f      	mov	r7, r3
 8009770:	898b      	ldrh	r3, [r1, #12]
 8009772:	4605      	mov	r5, r0
 8009774:	05db      	lsls	r3, r3, #23
 8009776:	460c      	mov	r4, r1
 8009778:	4616      	mov	r6, r2
 800977a:	d505      	bpl.n	8009788 <__swrite+0x1e>
 800977c:	2302      	movs	r3, #2
 800977e:	2200      	movs	r2, #0
 8009780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009784:	f000 f868 	bl	8009858 <_lseek_r>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	4632      	mov	r2, r6
 800978c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	4628      	mov	r0, r5
 8009794:	463b      	mov	r3, r7
 8009796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800979a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	f000 b817 	b.w	80097d0 <_write_r>

080097a2 <__sseek>:
 80097a2:	b510      	push	{r4, lr}
 80097a4:	460c      	mov	r4, r1
 80097a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097aa:	f000 f855 	bl	8009858 <_lseek_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	bf15      	itete	ne
 80097b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80097b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097be:	81a3      	strheq	r3, [r4, #12]
 80097c0:	bf18      	it	ne
 80097c2:	81a3      	strhne	r3, [r4, #12]
 80097c4:	bd10      	pop	{r4, pc}

080097c6 <__sclose>:
 80097c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ca:	f000 b813 	b.w	80097f4 <_close_r>
	...

080097d0 <_write_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4604      	mov	r4, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	2200      	movs	r2, #0
 80097da:	4d05      	ldr	r5, [pc, #20]	; (80097f0 <_write_r+0x20>)
 80097dc:	602a      	str	r2, [r5, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	f7f7 ff82 	bl	80016e8 <_write>
 80097e4:	1c43      	adds	r3, r0, #1
 80097e6:	d102      	bne.n	80097ee <_write_r+0x1e>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	b103      	cbz	r3, 80097ee <_write_r+0x1e>
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	bd38      	pop	{r3, r4, r5, pc}
 80097f0:	20000770 	.word	0x20000770

080097f4 <_close_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	2300      	movs	r3, #0
 80097f8:	4d05      	ldr	r5, [pc, #20]	; (8009810 <_close_r+0x1c>)
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7f7 ff8e 	bl	8001720 <_close>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_close_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_close_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	20000770 	.word	0x20000770

08009814 <_fstat_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	2300      	movs	r3, #0
 8009818:	4d06      	ldr	r5, [pc, #24]	; (8009834 <_fstat_r+0x20>)
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	4611      	mov	r1, r2
 8009820:	602b      	str	r3, [r5, #0]
 8009822:	f7f7 ff88 	bl	8001736 <_fstat>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	d102      	bne.n	8009830 <_fstat_r+0x1c>
 800982a:	682b      	ldr	r3, [r5, #0]
 800982c:	b103      	cbz	r3, 8009830 <_fstat_r+0x1c>
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	bd38      	pop	{r3, r4, r5, pc}
 8009832:	bf00      	nop
 8009834:	20000770 	.word	0x20000770

08009838 <_isatty_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	2300      	movs	r3, #0
 800983c:	4d05      	ldr	r5, [pc, #20]	; (8009854 <_isatty_r+0x1c>)
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f7 ff86 	bl	8001754 <_isatty>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_isatty_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_isatty_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	20000770 	.word	0x20000770

08009858 <_lseek_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	2200      	movs	r2, #0
 8009862:	4d05      	ldr	r5, [pc, #20]	; (8009878 <_lseek_r+0x20>)
 8009864:	602a      	str	r2, [r5, #0]
 8009866:	461a      	mov	r2, r3
 8009868:	f7f7 ff7e 	bl	8001768 <_lseek>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d102      	bne.n	8009876 <_lseek_r+0x1e>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	b103      	cbz	r3, 8009876 <_lseek_r+0x1e>
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	bd38      	pop	{r3, r4, r5, pc}
 8009878:	20000770 	.word	0x20000770

0800987c <_read_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	4611      	mov	r1, r2
 8009884:	2200      	movs	r2, #0
 8009886:	4d05      	ldr	r5, [pc, #20]	; (800989c <_read_r+0x20>)
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7f7 ff0f 	bl	80016ae <_read>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_read_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_read_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20000770 	.word	0x20000770

080098a0 <_init>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr

080098ac <_fini>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr
